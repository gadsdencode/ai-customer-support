This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-20T11:13:35.236Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.eslintrc.json
.gitignore
.hintrc
app/api/copilotkit/route.ts
app/api/proxy/route.ts
app/components/ai/CoAgentStateDisplay.tsx
app/components/ai/CopilotCustomChatUI.tsx
app/components/ai/CopilotCustomerSupport.tsx
app/components/ai/HumanApprovalModal.tsx
app/components/ai/views/ActionView.tsx
app/components/ai/views/AGUIShowcase.tsx
app/components/ai/views/DynamicUIRenderer.tsx
app/components/ai/views/ProcessingAnimation.tsx
app/components/ai/views/ThinkingView.tsx
app/components/ai/WeatherInfo.tsx
app/components/database/SupaDemo.tsx
app/components/errors/ErrorBoundary.tsx
app/components/InfoModal.tsx
app/components/Instructions.tsx
app/configs/copilotConfig.ts
app/configs/copilotReadableConfigs.ts
app/configs/endpoints.ts
app/contexts/CopilotFeaturesContext.tsx
app/contexts/InteleosContext.tsx
app/contexts/useAuth.ts
app/copilot/ActionButton.tsx
app/copilot/AddSlideButton.tsx
app/copilot/AIChatSuggestions.tsx
app/copilot/aiPollGenerator.ts
app/copilot/components.ts
app/copilot/CopilotChatUI.tsx
app/copilot/CopilotGenAI.tsx
app/copilot/CopilotTextarea.tsx
app/copilot/DeleteSlideButton.tsx
app/copilot/GenerateSlideButton.tsx
app/copilot/HeaderPPTGen.tsx
app/copilot/NavButton.tsx
app/copilot/PerformResearchSwitch.tsx
app/copilot/PollComponent.tsx
app/copilot/PowerPointActions.tsx
app/copilot/Presentation.tsx
app/copilot/sendEmailButton.tsx
app/copilot/Slide.tsx
app/copilot/SlideNumberIndicator.tsx
app/copilot/SlidePreview.tsx
app/copilot/SlidePreviewCarousel.tsx
app/copilot/SlideThumbnail.tsx
app/copilot/SpeakCurrentSlideButton.tsx
app/copilot/SuggestionList.tsx
app/copilot/tavily.ts
app/copilot/useAISuggestions.tsx
app/copilot/useAppendSlide.tsx
app/copilot/useCopilotPollAction.tsx
app/copilot/useCopilotReadable.ts
app/copilot/useEmailSendingAction.ts
app/copilot/useGenerateChart.tsx
app/copilot/useResearchAction.ts
app/copilot/UserProfile.tsx
app/copilot/useScheduleAppointmentAction.ts
app/copilot/useSuggestions.tsx
app/copilot/useUpdateSlide.tsx
app/copilot/VirtualizedThumbnails.tsx
app/globals.css
app/layout.tsx
app/page.tsx
app/providers/AGUIProvider.tsx
app/providers/CopilotFeaturesProvider.tsx
app/services/actionService.ts
app/store/AgentStateStore.ts
app/types/agent.ts
app/types/copilot.ts
app/types/index.ts
app/types/langgraph.ts
app/types/supabaseTypes.ts
app/utils/actionUtils.ts
app/utils/error-classes/errorClasses.tsx
app/utils/globalAudio.tsx
app/utils/logger.ts
app/utils/supabase/client.ts
app/utils/supabase/server.ts
components.json
components/ui/accordion.tsx
components/ui/alert-dialog.tsx
components/ui/alert.tsx
components/ui/app-sidebar.tsx
components/ui/aspect-ratio.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/breadcrumb.tsx
components/ui/button.tsx
components/ui/calendar.tsx
components/ui/card.tsx
components/ui/carousel.tsx
components/ui/chart.tsx
components/ui/checkbox.tsx
components/ui/collapsible.tsx
components/ui/command.tsx
components/ui/context-menu.tsx
components/ui/dialog.tsx
components/ui/drawer.tsx
components/ui/dropdown-menu.tsx
components/ui/form.tsx
components/ui/hover-card.tsx
components/ui/input-otp.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/menubar.tsx
components/ui/navigation-menu.tsx
components/ui/pagination.tsx
components/ui/popover.tsx
components/ui/progress.tsx
components/ui/radio-group.tsx
components/ui/resizable.tsx
components/ui/scroll-area.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sheet.tsx
components/ui/sidebar.tsx
components/ui/skeleton.tsx
components/ui/slider.tsx
components/ui/sonner.tsx
components/ui/switch.tsx
components/ui/table.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
components/ui/toast.tsx
components/ui/toaster.tsx
components/ui/toggle-group.tsx
components/ui/toggle.tsx
components/ui/tooltip.tsx
hooks/use-mobile.tsx
hooks/use-toast.ts
hooks/useActionHandler.ts
hooks/useAgentActions.tsx
hooks/useAgentUI.tsx
hooks/useAIActions.ts
hooks/useCoAgentStateRender.ts
hooks/useCoAgentStateRenderOld.tsx
hooks/useCopilotActions.ts
hooks/useCopilotChatSuggestions.ts
hooks/useCopilotReadableState.ts
hooks/useGenerateChartAction.tsx
hooks/useGeneratePresentationAction.tsx
hooks/useGenerateSpreadsheetAction.ts
hooks/useMakeCopilotReadable.ts
hooks/usePowerPointState.ts
hooks/useRealTimeActions.ts
hooks/useSlideTransition.ts
lib/utils.ts
middleware.ts
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tailwind.config.ts
tsconfig.json
tsconfig/base.json
tsconfig/react-library.json

================================================================
Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .hintrc
================
{
  "extends": [
    "development"
  ],
  "hints": {
    "typescript-config/strict": "off",
    "typescript-config/consistent-casing": "off"
  }
}

================
File: app/api/copilotkit/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/api/copilotkit/route.ts

/* eslint-disable @typescript-eslint/no-explicit-any */
// app/api/copilotkit/route.ts

import {
  CopilotRuntime,
  OpenAIAdapter,
  copilotRuntimeNextJSAppRouterEndpoint,
} from '@copilotkit/runtime';
import OpenAI from 'openai';
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import logger from '@/app/utils/logger';
import { Action, CopilotAction } from '@/app/types/copilot';
import { MessageRole } from '@copilotkit/runtime-client-gql';

// Enhanced message interface with optional properties
export interface Message {
  role: MessageRole;
  content: string;
  id?: string;
  timestamp?: string;
  metadata?: Record<string, unknown>;
}

// Enhanced state extraction with error handling
function extractStateFromMessages(messages: Message[]): any {
  try {
    return {
      lastMessage: messages[messages.length - 1]?.content || null,
      messageCount: messages.length,
      timestamp: new Date().toISOString(),
      messageHistory: messages.map(msg => ({
        role: msg.role,
        content: msg.content,
        timestamp: msg.timestamp || new Date().toISOString()
      }))
    };
  } catch (error) {
    logger.error('Error extracting state from messages:', { error });
    return {
      lastMessage: null,
      messageCount: 0,
      timestamp: new Date().toISOString(),
      error: 'Failed to extract state'
    };
  }
}

// Enhanced environment validation with detailed error messages
const EnvSchema = z.object({
  NEXT_PUBLIC_OPENAI_API_KEY: z.string().min(1, 'OpenAI API key is required'),
  NEXT_PUBLIC_REMOTE_ENDPOINT: z.string().url('Valid remote endpoint URL is required'),
});

// Validate environment variables with error handling
const env = (() => {
  try {
    return EnvSchema.parse({
      NEXT_PUBLIC_OPENAI_API_KEY: process.env.NEXT_PUBLIC_OPENAI_API_KEY || '',
      NEXT_PUBLIC_REMOTE_ENDPOINT: process.env.NEXT_PUBLIC_REMOTE_ENDPOINT || '',
    });
  } catch (error) {
    logger.error('Environment validation failed:', { error });
    throw new Error('Invalid environment configuration');
  }
})();

// Initialize OpenAI with error handling
const openai = new OpenAI({ 
  apiKey: env.NEXT_PUBLIC_OPENAI_API_KEY,
  timeout: 30000, // 30 second timeout
  maxRetries: 3
});
const serviceAdapter = new OpenAIAdapter({ openai });

// Enhanced default actions with proper error handling and typing
const defaultActions: CopilotAction[] = [
  {
    name: "sendMessage",
    description: "Send a message in the chat",
    parameters: [
      {
        name: "message",
        type: "string",
        description: "The message content"
      }
    ],
    handler: async (args: { message: string }) => {
      try {
        if (!args.message?.trim()) {
          throw new Error('Message content is required');
        }
        return { 
          success: true, 
          data: args,
          timestamp: new Date().toISOString()
        };
      } catch (error) {
        logger.error('Send message handler error:', { error, args });
        return { 
          success: false, 
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  },
  {
    name: "emitState",
    description: "Emit agent state",
    parameters: [
      {
        name: "messages",
        type: "array",
        description: "The list of messages"
      },
      {
        name: "config",
        type: "object",
        description: "The current runnable config"
      }
    ],
    handler: async (args: { messages: Message[]; config: any }) => {
      try {
        const state = extractStateFromMessages(args.messages);
        return { 
          success: true, 
          state,
          timestamp: new Date().toISOString()
        };
      } catch (error) {
        logger.error('Emit state handler error:', { error, args });
        return { 
          success: false, 
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }
  }
];

// Initialize CopilotRuntime with proper type casting and configuration
const runtime = new CopilotRuntime({
  actions: defaultActions as unknown as Action<CopilotAction[]>[],
  remoteActions: [
    {
      url: env.NEXT_PUBLIC_REMOTE_ENDPOINT,
    }
  ],
});

// Enhanced POST handler with detailed error handling
export async function POST(req: NextRequest) {
  try {
    const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
      runtime,
      serviceAdapter,
      endpoint: '/api/copilotkit',
    });

    logger.info('Processing Copilot Runtime Request', {
      method: req.method,
      url: req.url,
      timestamp: new Date().toISOString()
    });

    const response = await handleRequest(req);
    
    logger.info('Request processed successfully', {
      status: response.status,
      timestamp: new Date().toISOString()
    });

    return response;
  } catch (error) {
    logger.error('API Route Error:', { 
      error, 
      timestamp: new Date().toISOString(),
      stack: error instanceof Error ? error.stack : undefined
    });

    return NextResponse.json(
      { 
        error: 'Internal Server Error',
        message: error instanceof Error ? error.message : 'Unknown error occurred',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/route.ts
================
/* eslint-disable @typescript-eslint/no-unused-vars */
// app/api/proxy/route.ts

import { NextRequest, NextResponse } from 'next/server';

const CORS_HEADERS = {
    'Access-Control-Allow-Origin': process.env.NEXT_PUBLIC_FRONTEND_URL || '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',
    'Access-Control-Allow-Credentials': 'true',
    'Access-Control-Max-Age': '86400',
  };
  
  // Export handlers with CORS
  export const OPTIONS = async (req: NextRequest) => {
    return new NextResponse(null, {
      status: 204,
      headers: CORS_HEADERS
    });
  };

  export const POST = async (req: NextRequest) => {
  try {
    const body = await req.json();
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || ''}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: req.headers.get('Authorization') || '',
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();
    return new NextResponse(JSON.stringify(data), {
        headers: CORS_HEADERS,
      });
    } catch (error) {
      console.error('Proxy POST error:', error);
      return new NextResponse(
        JSON.stringify({ error: 'Internal Server Error' }),
        {
          status: 500,
          headers: CORS_HEADERS,
        }
      );
    }
  };

  export const GET = async (req: NextRequest) => {
    return new NextResponse(null, {
      status: 204,
      headers: CORS_HEADERS
    });
  };

================
File: app/components/ai/CoAgentStateDisplay.tsx
================
// app/components/ai/CoAgentStateDisplay.tsx

'use client';

import React from 'react';
import WeatherInfo from './WeatherInfo';
import { Loader2 } from 'lucide-react';
import { WeatherResponse } from '@/app/types/copilot';
import { useAgentUIContext } from '@/app/providers/AGUIProvider';

interface WeatherState {
  final_response: WeatherResponse;
}

const CoAgentStateDisplay: React.FC = () => {
  const { weatherAgent } = useAgentUIContext();
  const { status, state } = weatherAgent;
  
  const renderWeatherUI = () => {
    if (status === 'thinking') {
      return (
        <div className="flex items-center space-x-2">
          <Loader2 className="w-4 h-4 animate-spin" />
          <span>Processing weather request...</span>
        </div>
      );
    }
    
    if (status === 'response' && state && 'final_response' in state) {
      const weatherState = (state as unknown) as WeatherState;
      if ('final_response' in weatherState && 
          typeof weatherState.final_response === 'object' && 
          weatherState.final_response !== null) {
        return <WeatherInfo data={weatherState.final_response} />;
      }
    }
    
    return (
      <div className="text-sm text-muted-foreground">
        Waiting for weather data...
      </div>
    );
  };

  return (
    <div className="agent-state-display p-4 bg-secondary rounded-lg">
      {renderWeatherUI()}
    </div>
  );
};

export default CoAgentStateDisplay;

================
File: app/components/ai/CopilotCustomChatUI.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// File: src/components/ai/CopilotCustomChatUI.tsx
"use client";

import React, {
  useState,
  useRef,
  useEffect,
  useMemo,
  useCallback,
} from "react";
import {
  useCopilotAction,
  useCopilotChat,
  useCopilotReadable,
} from "@copilotkit/react-core";
import { Role, TextMessage } from "@copilotkit/runtime-client-gql";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Loader2, Trash2, RotateCcw, Send } from 'lucide-react';
import { gsap } from "gsap";
import { motion, AnimatePresence } from "framer-motion";
import ErrorBoundary from "@/app/components/errors/ErrorBoundary";
import { useToast } from "@/hooks/use-toast";
import { HumanApprovalModal } from "./HumanApprovalModal";
import { useAgentUI } from "@/hooks/useAgentUI";
// import { useRealtimeActions } from "@/hooks/useRealTimeActions"; // Removed as per latest code
import { useCoAgentStateRender } from "@/hooks/useCoAgentStateRender";
import { ActionContext, ActionResult, ViewTypeEnum } from "@/app/types/agent";
import { AgentUIProvider } from '@/app/providers/AGUIProvider';
import { DynamicUIRenderer } from '@/app/components/ai/views/DynamicUIRenderer';
import { useAgentStore } from '@/app/store/AgentStateStore'; // Import the store
import { ENDPOINTS } from "@/app/configs/endpoints";
import { ProcessingAnimation } from '@/app/components/ai/views/ProcessingAnimation'; // Import the ProcessingAnimation component

export function CopilotCustomChatUI() {
  // Initialize hooks and state
  const { toast } = useToast();
  const [inputValue, setInputValue] = useState("");
  const chatCardRef = useRef<HTMLDivElement>(null);
  const viewportRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  // Local state to manage processing animation
  // const [isProcessing, setIsProcessing] = useState<boolean>(false);
  // const [showProcessing, setShowProcessing] = useState(false);
  const [isResponding, setIsResponding] = useState(false);
  const [responseRendered, setResponseRendered] = useState(false);

  // Get showDynamicUI from the store
  const showDynamicUI = useAgentStore(state => state.state.showDynamicUI);
  const isThinking = useAgentStore(state => state.state.isThinking);

  const renderDynamicContent = () => {
    if (isThinking) {
      return (
        <React.Fragment key="dynamic-ui">
          {renderCoAgentUI()}
          <DynamicUIRenderer />
        </React.Fragment>
      );
    }
    return null;
  };

  // Initialize chat and agent state
  const {
    visibleMessages,
    appendMessage,
    setMessages,
    reloadMessages,
    stopGeneration,
    isLoading,
  } = useCopilotChat();

  // Initialize co-agent state renderer
  const {
    needsApproval,
    setNeedsApproval,
    pendingAction,
    setPendingAction,
    executeAction,
    renderDynamicUI: renderCoAgentUI,
  } = useCoAgentStateRender({
    name: "inteleos_agent",
    streamEndpoint: `${ENDPOINTS.PRODUCTION.BASE}${ENDPOINTS.PRODUCTION.ACTIONS}`,
    render: ({ status, state }) => {
      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.5 }}
          className="p-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg backdrop-blur-sm"
        >
          {status === 'thinking' && (
            <div className="flex items-center space-x-2">
              <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
              <span className="text-blue-500 font-medium">Processing request...</span>
            </div>
          )}
          {status === 'response' && (
            <div className="bg-white/10 rounded-lg p-4 shadow-lg">
              <pre className="whitespace-pre-wrap text-sm text-gray-200">
                {JSON.stringify(state, null, 2)}
              </pre>
            </div>
          )}
        </motion.div>
      );
    }
  });

  // Initialize UI state
  const { uiState, updateUIState } = useAgentUI();

  // Handle realtime actions with retry logic
  const handleRealtimeAction = useCallback(
    async (actionName: string, parameters: Record<string, any>): Promise<ActionResult> => {
      const MAX_RETRIES = 3;
      const RETRY_DELAY = 1000;

      const makeRequest = async (attempt: number = 1): Promise<ActionResult> => {
        try {
          if (!actionName) {
            throw new Error("Action name is required");
          }
      
          const response = await fetch(
            `${ENDPOINTS.PRODUCTION.BASE}${ENDPOINTS.PRODUCTION.ACTIONS}`, // Correctly construct the URL
            {
              method: "POST",
              credentials: "include",
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
                Origin: window.location.origin,
              },
              body: JSON.stringify({
                action_name: actionName,
                parameters: parameters || {},
              }),
            }
          );

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(
              errorData.message || `Server responded with status: ${response.status}`
            );
          }

          const data = await response.json();
          return {
            success: true,
            data: {
              response: data.response,
              metadata: data.metadata,
            },
            timestamp: new Date().toISOString(),
          };
        } catch (error) {
          console.error(`Attempt ${attempt} failed:`, error);

          if (attempt < MAX_RETRIES) {
            await new Promise((resolve) => setTimeout(resolve, RETRY_DELAY * attempt));
            return makeRequest(attempt + 1);
          }

          return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error occurred",
            timestamp: new Date().toISOString(),
          };
        }
      };

      return makeRequest();
    },
    []
  );

  // Handle processing animation
  const sendMessageHandler = useCallback(
    async (content: string) => {
      if (!content.trim()) return;
  
      try {
        setIsResponding(true);
        setResponseRendered(false);
        setInputValue("");
  
        const userMessage = new TextMessage({
          content,
          role: Role.User,
          id: `msg-${Date.now()}`,
        });
        appendMessage(userMessage);
  
        // Execute actions
        await executeAction(
          { type: "processMessage", payload: { message: content } },
          { type: "processMessage", payload: { message: content } }
        );
  
        const context: ActionContext = {
          type: "sendMessage",
          payload: { message: content },
        };
  
        const result = await handleRealtimeAction("sendMessage", context);
  
        if (!result?.success) {
          throw new Error(result?.error || "Message sending failed");
        }
  
        if (result.data && typeof result.data.response === "string") {
          const responseMessage = new TextMessage({
            content: result.data.response,
            role: Role.Assistant,
            id: `msg-${Date.now()}-response`,
          });
          appendMessage(responseMessage);
          
          // Wait for the response to be rendered
          setTimeout(() => {
            setResponseRendered(true);
          }, 100);
        }
      } catch (error) {
        console.error("Message send failed:", error);
        const errorMessage = new TextMessage({
          content: "An error occurred while processing your request.",
          role: Role.Assistant,
          id: `error-${Date.now()}`,
        });
        appendMessage(errorMessage);
        setResponseRendered(true);
      }
    },
    [appendMessage, handleRealtimeAction, executeAction]
  );

  useEffect(() => {
    if (responseRendered && isResponding) {
      // Add a delay to ensure the response is visible
      const timer = setTimeout(() => {
        setIsResponding(false);
      }, 1000); // Adjust this value as needed
  
      return () => clearTimeout(timer);
    }
  }, [responseRendered, isResponding]);

  // Handle scrolling
  const scrollToBottom = useCallback(() => {
    if (viewportRef.current) {
      gsap.to(viewportRef.current, {
        scrollTop: viewportRef.current.scrollHeight,
        duration: 0.5,
        ease: "power2.out",
      });
    }
  }, []);

  useEffect(() => {
    const timeoutId = setTimeout(scrollToBottom, 100);
    return () => clearTimeout(timeoutId);
  }, [visibleMessages, scrollToBottom]);

  // Animation setup
  const messageVariants = useMemo(
    () => ({
      hidden: { opacity: 0, y: 20, scale: 0.95 },
      visible: {
        opacity: 1,
        y: 0,
        scale: 1,
        transition: {
          type: "spring",
          stiffness: 260,
          damping: 20
        }
      },
      exit: {
        opacity: 0,
        y: -20,
        scale: 0.95,
        transition: {
          duration: 0.2,
          ease: "easeInOut"
        }
      },
    }),
    []
  );

  // Copilot readable value
  const copilotReadableValue = useMemo(
    () => ({
      messageCount: visibleMessages.length,
      isLoading,
      lastMessage: visibleMessages[visibleMessages.length - 1]?.isTextMessage,
    }),
    [visibleMessages, isLoading]
  );

  useCopilotReadable({
    description: "Chat UI State",
    value: copilotReadableValue,
  });

  // Action handlers
  const sendJokeMessageHandler = useCallback(
    async ({ message }: { message: string }) => {
      toast({
        title: "AI Action Success",
        description: "The AI action was successful.",
        variant: "default",
        duration: 2000,
      });
      sendMessageHandler(message);
    },
    [toast, sendMessageHandler]
  );

  const clearChatHandler = useCallback(async () => {
    setMessages([]);
    toast({
      title: "AI Action Success",
      description: "The AI action was successful.",
      variant: "default",
      duration: 2000,
    });
    return "Chat cleared successfully";
  }, [setMessages, toast]);

  // Register Copilot actions
  useCopilotAction({
    name: "sendJokeMessage",
    description: "Send a clever joke to the chat",
    parameters: [
      {
        name: "message",
        type: "string",
        description: "The message to send",
      },
    ],
    handler: sendJokeMessageHandler,
  });

  useCopilotAction({
    name: "clearChat",
    description: "Clear all chat messages",
    parameters: [],
    handler: clearChatHandler,
  });

  // Render component
  return (
    <AgentUIProvider>
      <Card
        ref={chatCardRef}
        className="w-[90vw] mx-auto h-[90vh] flex flex-col bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 shadow-2xl rounded-xl overflow-hidden border border-blue-500/30"
      >
        <CardContent className="flex flex-col h-full p-6">
          <ErrorBoundary>
            <div className="flex-grow pr-4 custom-scrollbar overflow-y-auto" ref={scrollAreaRef}>
              <AnimatePresence initial={false} mode="sync">
                {visibleMessages.map((message, index) => {
                  const { role, content } = message as TextMessage;
                  if (!content || content.trim() === "") {
                    return null;
                  }

                  return (
                    <motion.div
                      key={message.id || index}
                      variants={messageVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      onAnimationComplete={() => {
                        if (role === Role.Assistant) {
                          setResponseRendered(true);
                        }
                      }}
                      className={`flex items-start space-x-4 mb-4 ${
                        role === Role.User ? "justify-end" : "justify-start"
                      }`}
                    >
                      {role !== Role.User && (
                        <Avatar className="border-2 border-blue-500 shadow-glow-blue">
                          <AvatarImage src="/support-avatar.png" alt="AI" />
                          <AvatarFallback>AI</AvatarFallback>
                        </Avatar>
                      )}
                      <div
                        className={`rounded-lg p-3 max-w-[70%] ${
                          role === Role.User
                            ? "bg-blue-600 text-white"
                            : "bg-gray-800/30 text-gray-200"
                        } shadow-md transition-all duration-300 ease-in-out hover:shadow-lg relative overflow-hidden backdrop-blur-sm`}
                      >
                        <p className="text-sm leading-relaxed">{content}</p>
                        {role !== Role.User && (
                          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 animate-shimmer" />
                        )}
                      </div>
                      {role === Role.User && (
                        <Avatar className="border-2 border-purple-500 shadow-glow-purple">
                          <AvatarImage src="/generic-support-avatar.png" alt="User" />
                          <AvatarFallback>You</AvatarFallback>
                        </Avatar>
                      )}
                    </motion.div>
                  );
                })}

                {/* Conditionally render the ProcessingAnimation component */}
                <AnimatePresence mode="wait">
                  {isResponding && (
                    <motion.div
                      key="processing"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                    >
                      <ProcessingAnimation />
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* Conditionally render the dynamic UI */}
                {showDynamicUI && (
                  <React.Fragment key="dynamic-ui">
                    {renderCoAgentUI()}
                    {renderDynamicContent()}
                  </React.Fragment>
                )}

                {needsApproval && (
                  <HumanApprovalModal
                    isOpen={needsApproval}
                    onClose={() => {
                      setNeedsApproval(false);
                      updateUIState({ currentView: ViewTypeEnum.APPROVAL });
                    }}
                    onApprove={async () => {
                      if (pendingAction && uiState.context) {
                        await executeAction(
                          { type: pendingAction, payload: {} },
                          { type: pendingAction, payload: uiState.context }
                        );
                        updateUIState({ currentView: ViewTypeEnum.APPROVAL });
                      }
                    }}
                    onReject={() => {
                      setNeedsApproval(false);
                      setPendingAction(null);
                      updateUIState({ currentView: ViewTypeEnum.APPROVAL });
                    }}
                    data={typeof pendingAction === 'string' ? { action: pendingAction } : {}}
                  />
                )}
              </AnimatePresence>
            </div>
          </ErrorBoundary>

          <div className="flex items-center space-x-2 mt-4">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter" && !isResponding) {
                e.preventDefault();
                sendMessageHandler(inputValue);
              }
            }}
            disabled={isResponding}
            className="bg-gray-800/50 border-gray-700 text-gray-200 placeholder-gray-400 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Type your message..."
          />
          <Button
            onClick={() => sendMessageHandler(inputValue)}
            disabled={isResponding || inputValue.trim() === ""}
            className="bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-300 flex items-center justify-center"
          >
            {isResponding ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
          </Button>
          </div>

          <div className="flex justify-between mt-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setMessages([])}
              title="Clear chat"
              className="text-gray-300 border-gray-600 hover:bg-gray-700 transition-colors duration-300"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={reloadMessages}
              title="Reload messages"
              className="text-gray-300 border-gray-600 hover:bg-gray-700 transition-colors duration-300"
            >
              <RotateCcw className="w-4 h-4" />
            </Button>
            {isLoading && (
              <Button
                variant="destructive"
                size="sm"
                onClick={stopGeneration}
                title="Stop generation"
                className="bg-red-600 hover:bg-red-700 transition-colors duration-300"
              >
                Stop
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </AgentUIProvider>
  );
}

================
File: app/components/ai/CopilotCustomerSupport.tsx
================
import { CopilotChat } from "@copilotkit/react-ui";
 
export function CopilotCustomerSupport() {
  return (
    <CopilotChat
      instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
      labels={{
        title: "Customer Support AI",
        initial: "Hi! 👋 How can I assist you today?",
      }}
    />
  );
}

================
File: app/components/ai/HumanApprovalModal.tsx
================
// app/components/ai/HumanApprovalModal.tsx
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';

interface HumanApprovalModalProps {
  isOpen: boolean;
  onClose: () => void;
  onApprove: () => void;
  onReject: () => void;
  data: Record<string, unknown>;
}

export const HumanApprovalModal: React.FC<HumanApprovalModalProps> = ({
  isOpen,
  onClose,
  onApprove,
  onReject,
  data,
}) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Action Approval Required</DialogTitle>
        </DialogHeader>
        <div className="py-4">
          <pre className="bg-secondary p-4 rounded-md overflow-auto max-h-[200px]">
            {JSON.stringify(data, null, 2)}
          </pre>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={onReject}>
            Reject
          </Button>
          <Button onClick={onApprove}>
            Approve
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

================
File: app/components/ai/views/ActionView.tsx
================
// app/components/ai/views/ActionView.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';

export interface ActionViewProps {
  actions: string[];
  onActionSelect: (action: string) => void;
}

export const ActionView: React.FC<ActionViewProps> = ({ actions, onActionSelect }) => {
  return (
    <div className="flex flex-col space-y-2">
      {actions.map((action, index) => (
        <motion.div
          key={index}
          initial={{ x: -20, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: index * 0.1 }}
        >
          <Button
            variant="secondary"
            className="w-full"
            onClick={() => {
              // Handle action click
              console.log('Action clicked:', action);
              onActionSelect(action);
            }}
          >
            {action}
          </Button>
        </motion.div>
      ))}
    </div>
  );
};

================
File: app/components/ai/views/AGUIShowcase.tsx
================
'use client';

import React, { useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation, useInView } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Loader2, RefreshCw, Wind, Thermometer, Cloud } from 'lucide-react';
import { useCopilotFeatures } from '@/app/contexts/CopilotFeaturesContext';
import { useCopilotChat } from "@copilotkit/react-core";
import { TextMessage, Role } from "@copilotkit/runtime-client-gql";
import { Button } from '@/components/ui/button';
import { useCoAgentStateRender, WeatherAgentState } from '@/hooks/useCoAgentStateRender';
import { ENDPOINTS } from '@/app/configs/endpoints';
import gsap from 'gsap';

type AgentStatus = 'idle' | 'thinking' | 'response' | 'error';

const EnhancedAgentCapabilitiesShowcase: React.FC = () => {
  const {
    executeAction,
    status,
    state,
    streamState
  } = useCoAgentStateRender({
    name: "inteleos_agent",
    streamEndpoint: `${ENDPOINTS.PRODUCTION.BASE}${ENDPOINTS.PRODUCTION.STREAM}`,
    render: () => null
  });

  const { appState } = useCopilotFeatures();
  const { visibleMessages } = useCopilotChat();
  const cardRef = useRef<HTMLDivElement>(null);
  const controls = useAnimation();
  const isInView = useInView(cardRef);

  useEffect(() => {
    if (!visibleMessages?.length) return;
    
    const lastMessage = visibleMessages[visibleMessages.length - 1] as TextMessage;
    if (lastMessage?.role === Role.User && lastMessage?.content) {
      console.log('[EnhancedAgentCapabilitiesShowcase] Processing user message:', lastMessage.content);
      executeAction(
        { type: 'processMessage', payload: { message: lastMessage.content } },
        { type: 'processMessage', payload: { message: lastMessage.content } }
      ).catch(error => {
        console.error('[EnhancedAgentCapabilitiesShowcase] Error executing action:', error);
      });
    }
  }, [visibleMessages, executeAction]);

  useEffect(() => {
    if (isInView) {
      controls.start('visible');
    }
  }, [controls, isInView]);

  useEffect(() => {
    if (cardRef.current) {
      gsap.to(cardRef.current, {
        duration: 0.5,
        boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)',
        repeat: -1,
        yoyo: true,
      });
    }
  }, []);

  const renderWeatherUI = () => {
    const currentStatus: AgentStatus = status as AgentStatus;
    
    switch (currentStatus) {
      case 'thinking':
        return (
          <motion.div
            className="flex flex-col space-y-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            <div className="flex items-center space-x-2">
              <Loader2 className="w-5 h-5 animate-spin text-primary" />
              <span className="text-primary font-medium">Weather Agent is processing your request...</span>
            </div>
            {streamState.currentStep && (
              <motion.div
                className="text-sm text-muted-foreground bg-secondary/50 p-2 rounded-md"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2 }}
              >
                Current action: {streamState.currentStep}
              </motion.div>
            )}
          </motion.div>
        );
      case 'response':
        if (state && 'final_response' in state) {
          const weatherState = state as unknown as WeatherAgentState;
          return (
            <motion.div
              className="bg-gradient-to-br from-secondary/50 to-secondary rounded-lg p-6 space-y-4 backdrop-blur-sm"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, ease: "easeOut" }}
            >
              <h3 className="text-2xl font-bold text-primary">Weather Information</h3>
              <div className="grid gap-4">
                <WeatherInfoItem
                  icon={<Cloud className="w-6 h-6 text-blue-400" />}
                  label="Conditions"
                  value={weatherState.final_response.conditions}
                />
                <WeatherInfoItem
                  icon={<Thermometer className="w-6 h-6 text-red-400" />}
                  label="Temperature"
                  value={`${weatherState.final_response.temperature}°C`}
                />
                <WeatherInfoItem
                  icon={<Wind className="w-6 h-6 text-green-400" />}
                  label="Wind"
                  value={`${weatherState.final_response.wind_speed} km/h ${weatherState.final_response.wind_direction}`}
                />
              </div>
              <motion.div
                className="flex space-x-2 mt-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
              >
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => {
                    console.log('[EnhancedAgentCapabilitiesShowcase] Refreshing weather data');
                    executeAction(
                      { type: 'refreshWeather', payload: {} },
                      { type: 'refreshWeather', payload: {} }
                    ).catch(error => {
                      console.error('[EnhancedAgentCapabilitiesShowcase] Error refreshing weather:', error);
                    });
                  }}
                  disabled={currentStatus !== 'response'}
                  className="group transition-all duration-300 ease-in-out transform hover:scale-105"
                >
                  <RefreshCw className="w-4 h-4 mr-2 group-hover:rotate-180 transition-transform duration-500 ease-in-out" />
                  Refresh Data
                </Button>
              </motion.div>
            </motion.div>
          );
        }
        return null;
      case 'error':
        return (
          <motion.div
            className="bg-destructive/10 text-destructive rounded-lg p-6"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
          >
            <h3 className="text-xl font-semibold">Error</h3>
            <p className="text-sm mt-2">
              {streamState.currentStep || 'An error occurred while fetching weather data'}
            </p>
          </motion.div>
        );
      default:
        return (
          <motion.div
            className="bg-secondary/30 backdrop-blur-sm rounded-lg p-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <h3 className="text-xl font-semibold text-primary">Agent Status</h3>
            <p className="text-sm text-muted-foreground mt-2">
              {appState.lastError || 'Ready for queries'}
            </p>
          </motion.div>
        );
    }
  };

  const renderMetadata = () => (
    <motion.div
      className="mt-6 space-y-4"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
    >
      <div>
        <h3 className="text-lg font-medium text-primary">Current Step:</h3>
        <p className="text-sm text-muted-foreground mt-1 bg-secondary/30 p-2 rounded-md backdrop-blur-sm">
          {streamState.currentStep || 'Waiting for agent...'}
        </p>
      </div>
      <div>
        <h3 className="text-lg font-medium text-primary">Confidence Level:</h3>
        <div className="flex items-center space-x-2 mt-1">
          <div className="h-3 w-full bg-secondary rounded-full overflow-hidden">
            <motion.div
              className="h-full bg-gradient-to-r from-blue-400 to-purple-500"
              initial={{ width: 0 }}
              animate={{ width: `${(streamState.confidence || 0) * 100}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
          <span className="text-sm text-muted-foreground min-w-[4rem]">
            {streamState.confidence ? `${(streamState.confidence * 100).toFixed(1)}%` : 'N/A'}
          </span>
        </div>
      </div>
      <div className="text-xs text-muted-foreground flex justify-between bg-secondary/20 p-2 rounded-md backdrop-blur-sm">
        <span>Status: {status || 'idle'}</span>
        <span>Events: {streamState.intermediateResults.length}</span>
      </div>
    </motion.div>
  );

  return (
    <Card className="w-full mb-6 overflow-hidden" ref={cardRef}>
      <motion.div
        initial="hidden"
        animate={controls}
        variants={{
          hidden: { opacity: 0, y: 20 },
          visible: { opacity: 1, y: 0, transition: { duration: 0.5 } }
        }}
      >
        <CardContent className="space-y-6 p-6">
          <motion.h2
            className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Agent Capabilities Showcase
          </motion.h2>
          <AnimatePresence mode="wait">
            <motion.div
              key={status}
              variants={{
                initial: { opacity: 0, y: 20 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: -20 }
              }}
              initial="initial"
              animate="animate"
              exit="exit"
              transition={{ duration: 0.3 }}
              className="w-full"
            >
              {renderWeatherUI()}
            </motion.div>
          </AnimatePresence>
          {renderMetadata()}
        </CardContent>
      </motion.div>
    </Card>
  );
};

const WeatherInfoItem: React.FC<{ icon: React.ReactNode; label: string; value: string }> = ({ icon, label, value }) => (
  <motion.div
    className="flex items-center space-x-3"
    initial={{ opacity: 0, x: -20 }}
    animate={{ opacity: 1, x: 0 }}
    transition={{ duration: 0.3 }}
  >
    {icon}
    <div>
      <span className="text-sm text-muted-foreground">{label}:</span>
      <span className="ml-2 font-medium">{value}</span>
    </div>
  </motion.div>
);

export default EnhancedAgentCapabilitiesShowcase;

================
File: app/components/ai/views/DynamicUIRenderer.tsx
================
// components/DynamicUIRenderer.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';
import { useAgentUIContext } from '@/app/providers/AGUIProvider';
import { ViewTypeEnum } from '@/app/types/agent';

export const DynamicUIRenderer: React.FC = () => {
  const { uiState } = useAgentUIContext();

  const renderContent = () => {
    switch (uiState.currentView) {
      case 'thinking':
        return (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="flex items-center space-x-2 p-4 bg-gray-800/30 rounded-lg"
          >
            <Loader2 className="w-4 h-4 animate-spin" />
            <span>Processing...</span>
          </motion.div>
        );
      case ViewTypeEnum.ACTION:
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="p-4 bg-blue-500/10 rounded-lg"
          >
            {/* Render action-specific UI based on context */}
            {JSON.stringify(uiState.context, null, 2)}
          </motion.div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex flex-col justify-center items-center">
      {renderContent()}
    </div>
  );
};

================
File: app/components/ai/views/ProcessingAnimation.tsx
================
// File: src/components/ai/views/ProcessingAnimation.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';

const processingVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -20 },
};

export const ProcessingAnimation: React.FC = () => {
  return (
    <motion.div
      variants={processingVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
      transition={{ duration: 0.3 }}
      className="flex items-start space-x-4 mb-4 w-full"
      style={{ 
        zIndex: 1000,
        position: 'relative',
        pointerEvents: 'none'
      }}
    >
      <Avatar className="border-2 border-blue-500 shadow-glow-blue">
        <AvatarImage src="/support-avatar.png" alt="AI" />
        <AvatarFallback>AI</AvatarFallback>
      </Avatar>
      <div
        className={`rounded-lg p-3 max-w-[70%] bg-gray-800/30 text-gray-200 shadow-md transition-all duration-300 ease-in-out hover:shadow-lg relative overflow-hidden backdrop-blur-sm`}
      >
        <div className="flex items-center space-x-2">
          <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
          <span className="text-blue-500 font-medium">Processing...</span>
        </div>
        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 animate-shimmer" />
      </div>
    </motion.div>
  );
};

================
File: app/components/ai/views/ThinkingView.tsx
================
// app/components/ai/views/ThinkingView.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';

interface ThinkingViewProps {
  context: Record<string, unknown>;
}

export const ThinkingView: React.FC<ThinkingViewProps> = ({ context }) => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="flex items-center space-x-2 p-4"
    >
      <Loader2 className="w-4 h-4 animate-spin" />
      <span>Processing {context.currentTask as string}...</span>
    </motion.div>
  );
};

================
File: app/components/ai/WeatherInfo.tsx
================
// app/components/ai/WeatherInfo.tsx

import React from 'react';
import { WeatherResponse } from '@/app/types/copilot';

interface WeatherInfoProps {
  data: WeatherResponse;
}

const WeatherInfo: React.FC<WeatherInfoProps> = ({ data }) => {
  return (
    <div className="weather-info">
      <h2>Weather Details</h2>
      <p><strong>Conditions:</strong> {data.conditions}</p>
      <p><strong>Temperature:</strong> {data.temperature}°C</p>
      <p><strong>Wind Direction:</strong> {data.wind_direction}</p>
      <p><strong>Wind Speed:</strong> {data.wind_speed} km/h</p>
    </div>
  );
};

export default WeatherInfo;

================
File: app/components/database/SupaDemo.tsx
================
import { createClient } from '@/app/utils/supabase/server'

export default async function SupaDemo() {
    const supabase = await createClient();
    const { data: countries } = await supabase.from("countries").select();

    return <pre className='text-white'>{JSON.stringify(countries, null, 2)}</pre>
  }

================
File: app/components/errors/ErrorBoundary.tsx
================
// ErrorBoundary.tsx
import React from 'react';

class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      return <div>Something went wrong. Please refresh the page.</div>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

================
File: app/components/InfoModal.tsx
================
// /app/components/InfoModal.tsx

'use client'

import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { X, Loader2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { cn } from '@/lib/utils'

interface InfoModalProps {
  isOpen: boolean
  onClose: () => void
  children: React.ReactNode
  title?: string
  footer?: React.ReactNode
  isLoading?: boolean
  className?: string
}

const InfoModal: React.FC<InfoModalProps> = ({
  isOpen,
  onClose,
  children,
  title,
  footer,
  isLoading = false,
  className,
}) => {
  const [isMounted, setIsMounted] = useState(false)

  useEffect(() => {
    setIsMounted(true)
  }, [])

  if (!isMounted) {
    return null
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3, ease: 'easeInOut' }}
        >
          <motion.div
            className="fixed inset-0 bg-black/30 backdrop-blur-[5px]"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            onClick={onClose}
          />
          <motion.div
            className={cn(
              "relative z-50 w-full max-w-lg bg-sidebar dark:bg-sidebar-dark rounded-lg shadow-xl",
              className
            )}
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
          >
            {title && (
              <div className="flex items-center justify-between p-4 border-b border-sidebar-border">
                <h2 className="text-xl font-semibold text-white">{title}</h2>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  <X className="h-4 w-4" />
                  <span className="sr-only">Close</span>
                </Button>
              </div>
            )}
            <div className="p-6">
              {isLoading ? (
                <div className="flex justify-center items-center h-32">
                  <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
                </div>
              ) : (
                children
              )}
            </div>
            {footer && (
              <div className="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700">
                {footer}
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}

export default InfoModal

================
File: app/components/Instructions.tsx
================
import * as React from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { MessageCircle, ThumbsUp, AlertCircle } from 'lucide-react'

const Instructions: React.FC = () => {
  return (
    <Card className="w-full max-w-full mx-auto border border-blue-500/30 rounded-lg">
      {/* <CardHeader>
        <CardTitle className="text-2xl font-bold text-center">How to Interact with Customer Support AI</CardTitle>
      </CardHeader> */}
      <CardContent className="space-y-4 border border-blue-500/30 rounded-lg m-2 p-3">
      <p className="text-2xl font-bold text-center">How to Interact with Customer Support AI</p>
        <InstructionItem
          icon={<MessageCircle className="w-6 h-6 text-blue-500" />}
          title="Ask Your Question"
          description="Type your question in the chat box below. Use the keyword 'research' and the Customer Support AI will search for relevant information and provide sources."
        />
        <InstructionItem
          icon={<ThumbsUp className="w-6 h-6 text-green-500" />}
          title="Try asking..."
          description="Please research Inteleos' POCUS certification program and requirements."
        />
        <InstructionItem
          icon={<AlertCircle className="w-6 h-6 text-yellow-500" />}
          title="Follow-up if Needed"
          description="If you need more clarity, don't hesitate to ask follow-up questions or request further explanation from Customer Support AI."
        />
      </CardContent>
    </Card>
  )
}

interface InstructionItemProps {
  icon: React.ReactNode
  title: string
  description: string
}

const InstructionItem: React.FC<InstructionItemProps> = ({ icon, title, description }) => {
  return (
    <div className="flex items-start space-x-3">
      <div className="flex-shrink-0">{icon}</div>
      <div>
        <h3 className="text-xl font-semibold mb-1">{title}</h3>
        <p className="text-lg text-gray-600 dark:text-gray-300">{description}</p>
      </div>
    </div>
  )
}

export { Instructions }

================
File: app/configs/copilotConfig.ts
================
// config/copilotConfig.ts
import { CopilotState } from '../types/copilot';
import { ENDPOINTS } from './endpoints';

export const initialCopilotState: CopilotState = {
  actions: [],
  context: {},
  isInitialized: false
};

export const copilotConfig = {
  baseURL: ENDPOINTS.PRODUCTION.ACTIONS,
  defaultActions: [
    {
      name: "sendMessage",
      description: "Send a message in the chat",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "The message content"
        }
      ]
    }
  ]
};

================
File: app/configs/copilotReadableConfigs.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// /config/copilotReadableConfigs.ts
import { ReadableConfig } from '@/app/types/copilot';
import { ExtendedCopilotContextParams } from '@/app/types/copilot';
//import useAppendSlide from '@/app/copilot/useAppendSlide';
//import useUpdateSlide from '@/app/copilot/useUpdateSlide';
//import { useGenerateChartAction } from '@/hooks/useGenerateChartAction';
//import { useGenerateSpreadsheetAction } from '@/hooks/useGenerateSpreadsheetAction';
//import { useGeneratePresentationAction } from '@/hooks/useGeneratePresentationAction';

export const createReadableConfigs = (
  contextValues: ExtendedCopilotContextParams,
  myAppState: any
): ReadableConfig[] => [
  {
    description: "Inteleos company information and CX data",
    value: contextValues.addDocumentContext,
    categories: ['documentContext']
  },
  {
    description: "Application context information and tools",
    value: {
      sendEmail: contextValues.sendEmail,
      useAppendSlide: contextValues.useAppendSlide,
      useUpdateSlide: contextValues.useUpdateSlide,
      useGenerateChartAction: contextValues.useGenerateChartAction,
      useGenerateSpreadsheetAction: contextValues.useGenerateSpreadsheetAction,
      useGeneratePresentationAction: contextValues.useGeneratePresentationAction,
      ...contextValues.copilotComponents,
      pollAction: contextValues.pollAction,
      pollComponent: contextValues.pollComponent,
      useCopilotPollAction: contextValues.useCopilotPollAction,
    },
    categories: ['appContext']
  },
  {
    description: 'Application state information',
    value: myAppState,
    categories: ['appContext']
  },
  {
    description: "Poll action functionality",
    value: contextValues.pollAction,
    categories: ['pollAction']
  },
  {
    description: "Poll creation functionality",
    value: contextValues.useCopilotPollAction,
    categories: ['pollAction']
  },
  {
    description: "Poll component rendering",
    value: contextValues.pollComponent,
    categories: ['pollAction']
  },
  {
    description: "Slide preview carousel component",
    value: contextValues.SlidePreviewCarousel,
    categories: ['slideAction']
  },
  {
    description: "Individual slide preview component",
    value: contextValues.SlidePreview,
    categories: ['slideAction']
  },
  {
    description: "Slide transition management",
    value: contextValues.useSlideTransition,
    categories: ['slideAction']
  },
  {
    description: "Email functionality",
    value: contextValues.sendEmail,
    categories: ['appContext']
  },
  {
    description: "Appointment scheduling functionality",
    value: contextValues.useScheduleAppointmentAction,
    categories: ['appointmentAction']
  },
  {
    description: "Research functionality",
    value: contextValues.useResearchAction,
    categories: ['researchAction']
  },
  {
    description: "Chart generation functionality",
    value: contextValues.useGenerateChartAction,
    categories: ['chartAction']
  },
  {
    description: "Slide addition functionality",
    value: contextValues.useAppendSlide,
    categories: ['slideAction']
  },
  {
    description: "Slide update functionality",
    value: contextValues.useUpdateSlide,
    categories: ['slideAction']
  },
  {
    description: "Spreadsheet generation functionality",
    value: contextValues.useGenerateSpreadsheetAction,
    categories: ['spreadsheetAction']
  },
  {
    description: "Presentation generation functionality",
    value: contextValues.useGeneratePresentationAction,
    categories: ['presentationAction']
  },
  {
    description: "Spreadsheet context",
    value: contextValues.generateSpreadsheet,
    categories: ['spreadsheetAction']
  },
  {
    description: "Presentation context",
    value: contextValues.generatePresentation,
    categories: ['presentationAction']
  },
  {
    description: "Slide speaking functionality context",
    value: contextValues.SpeakCurrentSlideButton,
    categories: ['slideAction']
  },
  {
    description: "Slide speaking component",
    value: contextValues.SpeakCurrentSlideButton,
    categories: ['slideAction']
  }
];

================
File: app/configs/endpoints.ts
================
// /app/configs/endpoints.ts

export const ENDPOINTS = {
  LOCAL: {
    BASE: 'http://localhost:8000',  // Removed /copilotkit_remote from base
    BASE_ASSISTANTS: 'http://localhost:8000',
    ASSISTANTS: '/copilotkit_remote/assistants/search',
    ACTIONS: '/copilotkit_remote/info',  // Keep the path segment
    STREAM: '/copilotkit_remote',
    HEALTH: '/health',
    TEST: '/test',
    ROOT: '/'
  },
  PRODUCTION: {
    BASE: 'https://web-dev-461a.up.railway.app',  // Removed /copilotkit_remote from base
    BASE_ASSISTANTS: 'https://web-dev-461a.up.railway.app',
    ASSISTANTS: '/copilotkit_remote/assistants/search',
    ACTIONS: '/copilotkit_remote/info',  // Keep the path segment
    STREAM: '/copilotkit_remote',
    HEALTH: '/health'
  },
} as const;

export type Environment = keyof typeof ENDPOINTS;

export const getEndpoints = (environment: Environment) => {
  return ENDPOINTS[environment];
};

// Helper to get full URLs
export const getFullUrl = (environment: Environment, endpoint: keyof typeof ENDPOINTS[Environment]) => {
  const config = ENDPOINTS[environment];
  return endpoint.startsWith('/') ? 
    `${config.BASE}${endpoint}` : 
    `${config.BASE}/${endpoint}`;
};

================
File: app/contexts/CopilotFeaturesContext.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// CopilotFeaturesContext.tsx

import { createContext, useContext } from 'react';

interface CopilotFeaturesContextType {
  appState: any;
  actions: Record<string, (...args: any[]) => Promise<any>>;
  suggestions: string[];
}

export const CopilotFeaturesContext = createContext<CopilotFeaturesContextType>({
  appState: {},
  actions: {},
  suggestions: [],
});

export const useCopilotFeatures = () => useContext(CopilotFeaturesContext);

================
File: app/contexts/InteleosContext.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
// /app/contexts/InteleosContext.tsx
'use client'
import React, { createContext, useContext, useState, useEffect, useRef, ReactNode, useCallback } from 'react';
import { CopilotReadableOptions, ExtendedCopilotContextParams, SlideData } from '../types/copilot';
import { useToast } from '../../hooks/use-toast';
import { supabase } from '../utils/supabase/client';
import useGenerateChartAction from '../copilot/useGenerateChart';
import useScheduleAppointmentAction from '../copilot/useScheduleAppointmentAction';
import useResearchAction from '../copilot/useResearchAction';
import { useAISuggestions } from '../copilot/useAISuggestions';
import useEmailSendingAction from '../copilot/useEmailSendingAction';
import { DocumentPointer } from '@copilotkit/react-core';
import { Message } from '@copilotkit/runtime-client-gql';
import logger from '../utils/logger';
import useAppendSlide from '../copilot/useAppendSlide';
import useUpdateSlide from '../copilot/useUpdateSlide';
import { copilotComponents } from '../copilot/components';
import * as XLSX from 'xlsx';
import pptxgen from 'pptxgenjs';
import { useCopilotAction } from '@copilotkit/react-core';
import { Presentation } from '../copilot/Presentation';
import { Header } from '../copilot/HeaderPPTGen';
import { SlideNumberIndicator } from '../copilot/SlideNumberIndicator';
import { GenerateSlideButton } from '../copilot/GenerateSlideButton';
import { DeleteSlideButton } from '../copilot/DeleteSlideButton';
import { NavButton } from '../copilot/NavButton';
import { PerformResearchSwitch } from '../copilot/PerformResearchSwitch';
import { AddSlideButton } from '../copilot/AddSlideButton';
import { SpeakCurrentSlideButton } from '../copilot/SpeakCurrentSlideButton';
import { SlidePreview } from '../copilot/SlidePreview';
import { SlidePreviewCarousel } from '../copilot/SlidePreviewCarousel';
import { useSlideTransition } from '../../hooks/useSlideTransition';
import { PowerPointActions } from '../copilot/PowerPointActions';
import { usePowerPointState } from '../../hooks/usePowerPointState';
import useCopilotPollAction from '../copilot/useCopilotPollAction';
import PollComponent from '../copilot/PollComponent';
import { useMakeCopilotReadable } from '../../hooks/useMakeCopilotReadable';
import { useGenerateSpreadsheetAction } from '../../hooks/useGenerateSpreadsheetAction';
import { useGeneratePresentationAction } from '../../hooks/useGeneratePresentationAction';
import { SupabaseError, DataNotFoundError } from '../utils/error-classes/errorClasses';
import { SharedState } from '../types/agent';
type PollActionType = ReturnType<typeof useCopilotPollAction>;
type SpreadsheetData = {
  headers: string[];
  rows: (string | number)[][];
};

type PresentationSlide = {
  title: string;
  content: string[];
};

type PresentationData = {
  title: string;
  slides: PresentationSlide[];
};
type InChatRenderFunction = (args: any) => JSX.Element;

interface CopilotContextProviderProps {
  children?: ReactNode;
}

export interface FrontendAction<T> {
  name: string;
  description: string;
  parameters: T;
  handler: (args: T) => Promise<any>;
  render: (args: any) => string | JSX.Element;
}

type FrontendActionType = ReturnType<typeof useCopilotAction>;

interface InteleosContextType {
  sharedState: SharedState;
  updateState: (newState: Partial<SharedState>, options?: UpdateStateOptions) => void;
}

interface UpdateStateOptions {
  merge?: boolean;
  reset?: boolean;
}

const initialState: SharedState = {
  currentAction: undefined,
  lastAction: undefined,
  lastError: undefined,
  isProcessing: false,
};

export const InteleosSharedStateContext = createContext<InteleosContextType>({
  sharedState: initialState,
  updateState: () => {},
});

export const useSharedState = () => {
  const context = useContext(InteleosSharedStateContext);
  if (!context) {
    throw new Error('useSharedState must be used within InteleosContextProvider');
  }
  return context;
};

export const InteleosContext = createContext<ExtendedCopilotContextParams | undefined>(undefined);

export const InteleosContextProvider: React.FC<CopilotContextProviderProps> = ({ children }) => {
  const [documentContent, setDocumentContent] = useState<string>('');
  const [isLoading, setIsLoading] = useState(true);
  const [chatInstructions, setChatInstructions] = useState('');
  const { toast } = useToast();
  const {
    currentSlide,
    direction,
    nextSlide,
    prevSlide,
    setCurrentSlide,
    setDirection,
    slides,
    setSlides,
    addSlide,
  } = useSlideTransition();
  const [initialSlides, setInitialSlides] = useState<SlideData[]>([]);
  const sendEmailAction = useEmailSendingAction();
  const generateChartAction = useGenerateChartAction();
  const scheduleAppointmentAction = useScheduleAppointmentAction();
  const researchAction = useResearchAction();
  const pollAction = useCopilotPollAction();
  const pollComponent = PollComponent;
  const [sharedState, setSharedState] = useState<SharedState>(initialState);

  const updateState = useCallback((
    newState: Partial<SharedState>, 
    options: UpdateStateOptions = { merge: true }
  ) => {
    setSharedState(prevState => {
      if (options.reset) {
        return { ...initialState, ...newState };
      }
      return options.merge 
        ? { ...prevState, ...newState }
        : { ...initialState, ...newState };
    });
  }, []);


  useEffect(() => {
    const fetchDocumentContent = async () => {
        try {
            const { data, error } = await supabase
                .from('inteleos-context-document')
                .select('content');

            if (error) throw new SupabaseError(error.message);
            if (!data?.length) throw new DataNotFoundError('No document content found');

            // Join array of content into single string
            setDocumentContent(data.map(row => row.content).join('\n'));
        } catch (error) {
            logger.error('Error fetching document content:', error);
        }
    };
    fetchDocumentContent();
}, [toast]);

  const document: DocumentPointer = {
    id: "2",
    name: "Inteleos Company Information",
    sourceApplication: "Notepad",
    iconImageUri: "/images/GoogleDocs.svg",
    getContents: () => documentContent,
  };

  useEffect(() => {
    // Define the myAppState object here
    const myAppState = {
      sendEmail: sendEmailAction,
      useAppendSlide: useAppendSlide,
      useUpdateSlide: useUpdateSlide,
      SlidePreview: SlidePreview,
      useGenerateChartAction: useGenerateChartAction,
      useGenerateSpreadsheetAction: useGenerateSpreadsheetAction,
      useGeneratePresentationAction: useGeneratePresentationAction,
      Presentation: Presentation,
      Header: Header,
      SlideNumberIndicator: SlideNumberIndicator,
      GenerateSlideButton: GenerateSlideButton,
      DeleteSlideButton: DeleteSlideButton,
      NavButton: NavButton,
      PerformResearchSwitch: PerformResearchSwitch,
      AddSlideButton: AddSlideButton,
      SpeakCurrentSlideButton: SpeakCurrentSlideButton,
      SlidePreviewCarousel: SlidePreviewCarousel,
      useSlideTransition: useSlideTransition,
      slides: slides,
      setSlides: setSlides,
      addSlide: addSlide,
      currentSlide: currentSlide,
      setCurrentSlide: setCurrentSlide,
      direction: direction,
      setDirection: setDirection,
      nextSlide: nextSlide,
      prevSlide: prevSlide,
      initialSlides: initialSlides,
      setInitialSlides: setInitialSlides,
      pollAction: pollAction,
      pollComponent: pollComponent,
      useCopilotPollAction: useCopilotPollAction,
    }
  }, [documentContent, sendEmailAction,
    generateChartAction, pollAction, pollComponent,
    addSlide,
    currentSlide,
    direction,
    nextSlide,
    prevSlide,
    slides,
    setSlides,
    initialSlides,
    setInitialSlides,
    setCurrentSlide,
    setDirection,
    sharedState,
    updateState,
  ]);

  // Register the schedule appointment action
  useScheduleAppointmentAction();
  // Register the research action
  useResearchAction();

  const suggestionsContext: ExtendedCopilotContextParams = {
    sharedState,
    updateState,
    showDevConsole: false,
    coagentStates: {},
    setCoagentStates: () => { },
    agentSession: { agentName: '' },
    setAgentSession: () => { },
    removeAction: () => { },
    coAgentStateRenders: {},
    setCoAgentStateRender: () => { },
    removeCoAgentStateRender: () => { },
    actions: {} as Record<string, FrontendAction<any>>,
    setAction: () => { },
    initialSlides: [],
    setInitialSlides: () => { },
    useAISuggestions: useAISuggestions,
    pollAction: () => pollAction,
    pollComponent: pollComponent,
    getChatCompletionFunctionDescriptions: () => [],
    generateSpreadsheet: async (data: SpreadsheetData, filename: string) => {
      logger.info("Generating spreadsheet");
      try {
        const worksheet = XLSX.utils.aoa_to_sheet([data.headers, ...data.rows]);
        logger.info("Worksheet created successfully");
        const workbook = XLSX.utils.book_new();
        logger.info("Workbook created successfully");
        XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
        logger.info("Sheet appended successfully");
        XLSX.writeFile(workbook, `${filename}.xlsx`);
        logger.info("Spreadsheet generated successfully!");
        return "Spreadsheet generated successfully!";
      } catch (error) {
        logger.error("Error generating spreadsheet:", error);
        throw new Error("Failed to generate spreadsheet");
      }
    },

    generatePresentation: async (data: PresentationData, filename: string) => {
      logger.info("Generating presentation");
      try {
        const pres = new pptxgen();
        logger.info("Creating new presentation");
        pres.layout = 'LAYOUT_WIDE';

        // Title slide
        const titleSlide = pres.addSlide();
        logger.info("Adding title slide to presentation");
        titleSlide.addText(data.title, { x: 1, y: 1, w: '80%', h: 1, fontSize: 44, bold: true, align: 'center' });

        // Content slides
        data.slides.forEach((slide) => {
          logger.info("Adding slide to presentation");
          const newSlide = pres.addSlide();
          newSlide.addText(slide.title, { x: 0.5, y: 0.5, w: '90%', h: 1, fontSize: 32, bold: true });
          slide.content.forEach((content, index) => {
            logger.info("Adding content to slide");
            newSlide.addText(content, { x: 0.5, y: 1.5 + index * 0.5, w: '90%', h: 0.5, fontSize: 18 });
          });
        });

        await pres.writeFile({ fileName: `${filename}.pptx` });
        logger.info("Presentation generated successfully!");
        return "Presentation generated successfully!";
      } catch (error) {
        logger.error("Error generating presentation:", error);
        throw new Error("Failed to generate presentation");
      }
    },
    ...copilotComponents,
    entryPoints: {},
    setEntryPoint: () => { },
    removeEntryPoint: () => { },
    chatComponentsCache: useRef<Record<string, string | InChatRenderFunction>>({}),
    getFunctionCallHandler: () => () => Promise.resolve(),
    setFunctionCallHandler: () => { },
    removeFunctionCallHandler: () => { },
    getChatCompletion: () => "",
    setChatCompletion: () => { },
    removeChatCompletion: () => { },
    getChatComponent: () => "",
    setChatComponent: () => { },
    removeChatComponent: () => { },
    getChatSuggestion: () => "",
    setChatSuggestion: () => { },
    removeChatSuggestion: () => { },
    messages: [] as Message[],
    setMessages: () => { },
    addContext: () => "",
    removeContext: () => { },
    getContextString: () => '',
    addDocumentContext: () => "",
    removeDocumentContext: () => "",
    getDocumentsContext: () => [],
    chatSuggestionConfiguration: {},
    addChatSuggestionConfiguration: () => { },
    removeChatSuggestionConfiguration: () => { },
    copilotApiConfig: { chatApiEndpoint: "", chatApiEndpointV2: "", headers: {}, body: {} },
    isLoading,
    setIsLoading,
    chatInstructions,
    setChatInstructions,
    sendEmail: sendEmailAction,
    Presentation: Presentation,
    Header: Header,
    SlideNumberIndicator: SlideNumberIndicator,
    GenerateSlideButton: GenerateSlideButton,
    DeleteSlideButton: DeleteSlideButton,
    NavButton: NavButton,
    PerformResearchSwitch: PerformResearchSwitch,
    AddSlideButton: AddSlideButton,
    SpeakCurrentSlideButton: SpeakCurrentSlideButton,
    copilotComponents: copilotComponents,
    XLSX: XLSX,
    pptxgen: pptxgen,
    useCopilotAction: useCopilotAction,
    SlidePreviewCarousel: SlidePreviewCarousel,
    useSlideTransition: useSlideTransition,
    PowerPointActions: PowerPointActions,
    SlidePreview: SlidePreview,
    usePowerPointState: usePowerPointState,
    currentSlide: currentSlide,
    setCurrentSlide: setCurrentSlide,
    direction,
    setDirection,
    nextSlide,
    prevSlide,
    slides,
    setSlides,
    addSlide,
    useCopilotPollAction,
    useAppendSlide,
    useUpdateSlide,
    useGenerateChartAction,
    useGenerateSpreadsheetAction,
    useGeneratePresentationAction,
    useScheduleAppointmentAction,
    useResearchAction,
    appendSlide: useAppendSlide,
  };

  // Register the schedule appointment action
  useScheduleAppointmentAction();
  // Register the research action
  useResearchAction();
  useSlideTransition();
  // useEnhancedCopilotSuggestions();
  useAISuggestions({
    instructions: "Provide suggestions based on the user's context and the next-best-actions that logically follow.",
    minSuggestions: 4,
    maxSuggestions: 6,
    className: 'suggestion-button text-white-important hover:text-white-important focus:text-white-important',
  });

  useAppendSlide({
    setSlides: () => { },
    setCurrentSlideIndex: () => { },
    slides: [],
  });
  useUpdateSlide({
    partialUpdateSlide: () => { },
  });
  // Add this to the CopilotAuthContextProvider
  useGenerateChartAction();

  return (
    <InteleosContext.Provider value={{...suggestionsContext, sharedState, updateState}}>
      {children}
    </InteleosContext.Provider>
  );
};

export const useInteleos = () => {
  const context = useContext(InteleosContext);
  if (context === undefined) {
    throw new Error('useInteleos must be used within a InteleosContextProvider');
  }
  return context;
};

================
File: app/contexts/useAuth.ts
================
// /app/contexts/useAuth.ts

import { useState, useEffect } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  // Add other user properties as needed
}

interface AuthContextType {
  user: User | null;
  // Add other authentication-related properties and methods as needed
}

const useAuth = (): AuthContextType => {
  // Placeholder state for user
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    // Mock fetching user data
    const fetchUser = async () => {
      // Simulate an API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Set mock user data
      setUser({
        id: 'mock-user-id',
        name: 'John Doe',
        email: 'john.doe@example.com',
      });
    };

    fetchUser();
  }, []);

  return { user };
};

export default useAuth;

================
File: app/copilot/ActionButton.tsx
================
// /app/copilot/ActionButton.tsx

import clsx from "clsx";

interface ActionButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
  inProgress?: boolean;
}

export function ActionButton({
  children,
  onClick,
  disabled,
  inProgress,
}: ActionButtonProps) {
  return (
    <button
      onClick={onClick}
      disabled={disabled || inProgress}
      className={clsx(
        "text-white font-bold w-7 h-7 flex items-center justify-center rounded-md",
        disabled
          ? "opacity-50 cursor-not-allowed"
          : "hover:border hover:border-white",
        inProgress &&
          "animate-bounce text-blue-400 cursor-not-allowed hover:border-none"
      )}
    >
      {children}
    </button>
  );
}

================
File: app/copilot/AddSlideButton.tsx
================
// /app/copilot/AddSlideButton.tsx

import { SlideModel } from "../types/copilot";
import { ActionButton } from "./ActionButton";
import { FcPlus } from "react-icons/fc";

interface AddSlideButtonProps {
  currentSlideIndex: number;
  setCurrentSlideIndex: (fn: (i: number) => number) => void;
  setSlides: (fn: (slides: SlideModel[]) => SlideModel[]) => void;
}

export function AddSlideButton({
  currentSlideIndex,
  setCurrentSlideIndex,
  setSlides,
}: AddSlideButtonProps) {
  return (
    <ActionButton
      onClick={() => {
        const newSlide: SlideModel = {
          content: "",
          backgroundImageUrl:
            "https://loremflickr.com/cache/resized/65535_53415810728_d1db6e2660_h_800_600_nofilter.jpg",
          spokenNarration: "",
        };
        setSlides((slides) => [
          ...slides.slice(0, currentSlideIndex + 1),
          newSlide,
          ...slides.slice(currentSlideIndex + 1),
        ]);
        setCurrentSlideIndex((i) => i + 1);
      }}
    >
      <FcPlus className="h-5 w-5" />
    </ActionButton>
  );
}

================
File: app/copilot/AIChatSuggestions.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
// /app/copilot/AIChatSuggestions.tsx

import React, { useEffect, useRef } from 'react';
import { ExtendedCopilotContextParams } from '@/app/types/copilot';
import { useAISuggestions } from '@/app/copilot/useAISuggestions';
import { CopilotChatSuggestionConfiguration } from '@copilotkit/react-core';

interface SuggestionType {
  title: string;
  message: string;
  partial?: boolean;
}

interface SuggestionComponentProps {
  context: ExtendedCopilotContextParams;
}

interface IndividualSuggestionProps {
  title: string;
  message: string;
  onClick: (message: string) => void;
  partial: boolean;
  className: string;
}

const IndividualSuggestion: React.FC<IndividualSuggestionProps> = ({ title, message, onClick, partial, className }) => (
  <button className={className} onClick={() => onClick(message)}>
    <h3>{title}</h3>
    <p>{message}</p>
    {partial && <span>(Partial)</span>}
  </button>
);

const SuggestionComponent: React.FC<SuggestionComponentProps> = ({ context }) => {
  const [suggestions, refreshSuggestions] = useAISuggestions({
    instructions: "Provide suggestions based on the user's context.",
    minSuggestions: 1,
    maxSuggestions: 5,
    className: 'suggestion-class',
    onSuggestionsChanged: (newSuggestions: SuggestionType[]) => {
      // This callback is handled internally by useAISuggestions
    },
  });

  const abortControllerRef = useRef<AbortController | null>(null);

  useEffect(() => {
    const chatSuggestionConfiguration: { [key: string]: CopilotChatSuggestionConfiguration } = {
      default: {
        instructions: "Provide suggestions based on the user's context.",
        minSuggestions: 1,
        maxSuggestions: 5,
        className: 'suggestion-class',
      },
    };

    if (context) {
      refreshSuggestions();
    }
  }, [context, refreshSuggestions]);

  return (
    <div className="suggestion-container">
      {suggestions.map((suggestion, index) => (
        <IndividualSuggestion
          key={index}
          title={suggestion.title}
          message={suggestion.message}
          onClick={(message: string) => console.log('Suggestion clicked:', message)}
          partial={suggestion.partial || false}
          className=""
        />
      ))}
    </div>
  );
};

export default SuggestionComponent;

================
File: app/copilot/aiPollGenerator.ts
================
// app/copilot/aiPollGenerator.ts

import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources/chat/completions';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
  dangerouslyAllowBrowser: true,
});

interface GeneratedPoll {
  question: string;
  options: string[];
}

export async function generatePollWithAI(topic: string): Promise<GeneratedPoll> {
  const prompt = `Generate a poll question and four answer options about the topic: "${topic}". 
  Respond with a JSON object containing "question" and "options" fields. 
  The "options" field should be an array of four strings. Do not include any markdown formatting.`;

  const messages: ChatCompletionMessageParam[] = [
    { role: "system", content: "You are a poll generation assistant. Respond only with valid JSON." },
    { role: "user", content: prompt },
  ];

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // Changed from "gpt-4o" which seems to be a typo
      messages: messages,
    });

    const generatedContent = response.choices[0]?.message?.content;

    if (!generatedContent) {
      throw new Error("No content generated from AI");
    }

    // Strip any potential markdown formatting
    const cleanedContent = generatedContent.replace(/```json\n?|\n?```/g, '').trim();

    const parsedContent: GeneratedPoll = JSON.parse(cleanedContent);

    if (!parsedContent.question || !Array.isArray(parsedContent.options) || parsedContent.options.length !== 4) {
      throw new Error("Invalid AI response format");
    }

    return parsedContent;
  } catch (error) {
    console.error("Error generating poll with AI:", error);
    throw new Error("Failed to generate poll with AI");
  }
}

================
File: app/copilot/components.ts
================
// /app/copilot/components.ts

import { Presentation } from './Presentation';
import { Slide } from './Slide';
import { Header } from './HeaderPPTGen';
import { SlideNumberIndicator } from './SlideNumberIndicator';
import { GenerateSlideButton } from './GenerateSlideButton';
import { DeleteSlideButton } from './DeleteSlideButton';
import { NavButton } from './NavButton';
import { PerformResearchSwitch } from './PerformResearchSwitch';
import { AddSlideButton } from './AddSlideButton';
import { SpeakCurrentSlideButton } from './SpeakCurrentSlideButton';
import { SlidePreview } from './SlidePreview';
import { SlidePreviewCarousel } from './SlidePreviewCarousel';
import { useSlideTransition } from '../../hooks/useSlideTransition';
import { VirtualizedThumbnails } from './VirtualizedThumbnails';
import { SlideThumbnail } from './SlideThumbnail';
import { useMakeCopilotReadable } from './useCopilotReadable';
import useCopilotPollAction from './useCopilotPollAction';
import PollComponent from './PollComponent';

export const copilotComponents = {
  Presentation,
  Slide,
  Header,
  SlideNumberIndicator,
  GenerateSlideButton,
  DeleteSlideButton,
  NavButton,
  PerformResearchSwitch,
  AddSlideButton,
  SpeakCurrentSlideButton,
  SlidePreview,
  SlidePreviewCarousel,
  useSlideTransition,
  VirtualizedThumbnails,
  SlideThumbnail,
  useCopilotPollAction,
  PollComponent,
  useMakeCopilotReadable,
};

================
File: app/copilot/CopilotChatUI.tsx
================
// /app/copilot/CopilotChatUI.tsx

'use client';
import { useCoAgent } from "@copilotkit/react-core";
import { CopilotChat } from "@copilotkit/react-ui";
import { useState, useCallback } from 'react';

// Enhanced type definitions with more specific state management
type InteleosAgentResponse = {
  companyInfo?: string;
  certifications?: string[];
  productDetails?: Record<string, unknown>;
}

type AgentState = {
  final_response?: InteleosAgentResponse;
  currentStep?: 'initializing' | 'processing' | 'completed' | 'error';
  confidence?: number;
  error?: string;
}

export default function CopilotChatUI() {
  const [isDebugMode, setIsDebugMode] = useState(false);

  // Use useCoAgent with enhanced type safety and initial state
  const agent = useCoAgent<AgentState>({
    name: "inteleos-agent",
    initialState: {
      final_response: {},
      currentStep: 'initializing',
      confidence: 0
    }
  });

  // Memoized state update handler with type safety
  const handleStateUpdate = useCallback(() => {
    agent.setState({
      ...agent.state,
      currentStep: 'processing',
      confidence: 0.5,
      final_response: {
        companyInfo: "Inteleos is a leading technology solutions provider",
        certifications: ["ISO 9001", "CMMI Level 5"]
      }
    });
  }, [agent]);

  // Error boundary simulation
  const handleErrorSimulation = useCallback(() => {
    agent.setState({
      ...agent.state,
      currentStep: 'error',
      error: 'Simulated agent error occurred'
    });
  }, [agent]);

  return (
    <div className="flex flex-col space-y-4">
      <CopilotChat
        labels={{
          title: "Inteleos AI",
          initial: "Hi!👋 I'm Inteleos AI and I'll be your guide...",
        }}
        className="h-full overflow-y-auto"
        instructions="You are InteleosAI. You are eager to help users by answering their questions about the company Inteleos including the certifications and products Inteleos offers. You exude professionalism and you possess world-class expertise on Inteleos and the certifications and products Inteleos offers. You always chat in a conversational, friendly, and approachable manner."
      />
      
      {/* Debug toggle */}
      <div className="flex items-center space-x-2">
        <label className="inline-flex items-center">
          <input 
            type="checkbox" 
            checked={isDebugMode}
            onChange={() => setIsDebugMode(!isDebugMode)}
            className="form-checkbox"
          />
          <span className="ml-2">Show Debug Information</span>
        </label>
      </div>
      
      {isDebugMode && (
        <div className="agent-state bg-gray-100 p-4 rounded-lg">
          <h3 className="text-lg font-bold mb-2">Agent Details</h3>
          <div className="grid grid-cols-2 gap-2">
            <div>
              <strong>Name:</strong> {agent.name}
            </div>
            <div>
              <strong>Running:</strong> {agent.running ? 'Active' : 'Inactive'}
            </div>
            <div>
              <strong>Current Step:</strong> {agent.state.currentStep}
            </div>
            <div>
              <strong>Confidence:</strong> {agent.state.confidence?.toFixed(2)}
            </div>
          </div>

          {agent.state.final_response && (
            <div className="mt-4">
              <strong>Response:</strong>
              <pre className="bg-white p-2 rounded text-xs overflow-x-auto">
                {JSON.stringify(agent.state.final_response, null, 2)}
              </pre>
            </div>
          )}

          {agent.state.error && (
            <div className="mt-4 text-red-500">
              <strong>Error:</strong> {agent.state.error}
            </div>
          )}
          
          <div className="flex space-x-2 mt-4">
            <button 
              onClick={handleStateUpdate}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Update State
            </button>
            <button 
              onClick={handleErrorSimulation}
              className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
            >
              Simulate Error
            </button>
            <button 
              onClick={() => agent.start()} 
              disabled={agent.running}
              className="px-4 py-2 bg-green-500 text-white rounded disabled:opacity-50 hover:bg-green-600"
            >
              Start Agent
            </button>
            <button 
              onClick={() => agent.stop()} 
              disabled={!agent.running}
              className="px-4 py-2 bg-yellow-500 text-white rounded disabled:opacity-50 hover:bg-yellow-600"
            >
              Stop Agent
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: app/copilot/CopilotGenAI.tsx
================
// src/components/CopilotGenAI.tsx

import React, { useState, useCallback } from 'react';
import { useCopilotAction } from '@copilotkit/react-core';
import * as XLSX from 'xlsx';
import pptxgen from 'pptxgenjs';
import { saveAs } from 'file-saver';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

// Enhanced types for our data structures
type SpreadsheetData = {
  headers: string[];
  rows: (string | number)[][];
};

type SpreadsheetStyle = {
  headerColor: string;
  headerFontColor: string;
  cellColor: string;
  cellFontColor: string;
};

type PresentationSlide = {
  title: string;
  content: string[];
};

type PresentationData = {
  title: string;
  slides: PresentationSlide[];
};

type PresentationStyle = {
  theme: 'light' | 'dark';
  primaryColor: string;
  secondaryColor: string;
  fontFamily: string;
};

type FileFormat = 'xlsx' | 'csv' | 'pptx' | 'pdf';

const CopilotGenAI: React.FC = () => {
  const [progress, setProgress] = useState(0);

  const updateProgress = useCallback((value: number) => {
    setProgress(value);
  }, []);

  const generateSpreadsheet = async (
    data: SpreadsheetData,
    filename: string,
    style: SpreadsheetStyle,
    format: FileFormat
  ) => {
    try {
      const worksheet = XLSX.utils.aoa_to_sheet([data.headers, ...data.rows]);

      // Apply custom styles
      const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1');
      for (let R = range.s.r; R <= range.e.r; ++R) {
        for (let C = range.s.c; C <= range.e.c; ++C) {
          const cellAddress = { c: C, r: R };
          const cellRef = XLSX.utils.encode_cell(cellAddress);
          if (!worksheet[cellRef]) continue;
          
          worksheet[cellRef].s = {
            fill: { fgColor: { rgb: R === 0 ? style.headerColor.replace('#', '') : style.cellColor.replace('#', '') } },
            font: { color: { rgb: R === 0 ? style.headerFontColor.replace('#', '') : style.cellFontColor.replace('#', '') } }
          };
        }
        updateProgress((R / range.e.r) * 100);
      }

      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

      if (format === 'xlsx') {
        XLSX.writeFile(workbook, `${filename}.xlsx`);
      } else if (format === 'csv') {
        const csv = XLSX.utils.sheet_to_csv(worksheet);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        saveAs(blob, `${filename}.csv`);
      }

      return `${format.toUpperCase()} file generated successfully!`;
    } catch (error) {
      console.error(`Error generating ${format.toUpperCase()} file:`, error);
      throw new Error(`Failed to generate ${format.toUpperCase()} file`);
    }
  };

  const generatePresentation = async (
    data: PresentationData,
    filename: string,
    style: PresentationStyle,
    format: FileFormat
  ) => {
    try {
      if (format === 'pptx') {
        const pres = new pptxgen();
  
        // Define the slide master using Tailwind custom colors
        pres.defineSlideMaster({
          title: 'MASTER_SLIDE',
          background: { color: style.theme === 'dark' ? 'rgb(116,148,204)' : 'rgb(12, 76, 148)' },
          objects: [
            {
              rect: {
                x: 0,
                y: 0,
                w: '100%',
                h: '10%',
                fill: { color: style.theme === 'dark' ? 'rgb(244,116,52)' : 'rgb(244,100,35)' }
              }
            }
          ]
        });
  
        // Add title slide using the defined slide master
        const titleSlide = pres.addSlide({ masterName: 'MASTER_SLIDE' });
        titleSlide.addText(data.title, {
          x: 1,
          y: 1,
          w: '80%',
          h: 1,
          fontSize: 44,
          bold: true,
          align: 'center',
          color: style.theme === 'dark' ? '#FFFFFF' : '#000000',
          fontFace: style.fontFamily
        });
  
        // Add content slides
        data.slides.forEach((slide, index) => {
          const newSlide = pres.addSlide({ masterName: 'MASTER_SLIDE' });
          newSlide.addText(slide.title, {
            x: 0.5,
            y: 0.5,
            w: '90%',
            h: 1,
            fontSize: 32,
            bold: true,
            color: style.theme === 'dark' ? '#FFFFFF' : '#000000',
            fontFace: style.fontFamily
          });
          slide.content.forEach((content, contentIndex) => {
            newSlide.addText(content, {
              x: 0.5,
              y: 1.5 + contentIndex * 0.5,
              w: '90%',
              h: 0.5,
              fontSize: 18,
              color: style.theme === 'dark' ? '#FFFFFF' : '#000000',
              fontFace: style.fontFamily
            });
          });
          updateProgress((index / data.slides.length) * 100);
        });
  
        await pres.writeFile({ fileName: `${filename}.pptx` });
      } else if (format === 'pdf') {
        const doc = new jsPDF();
        doc.setFont(style.fontFamily);
        doc.setTextColor(style.theme === 'dark' ? 255 : 0);
  
        // Title page
        doc.setFontSize(24);
        doc.text(data.title, 105, 20, { align: 'center' });
  
        data.slides.forEach((slide, index) => {
          if (index > 0) doc.addPage();
          doc.setFontSize(18);
          doc.text(slide.title, 20, 20);
          doc.setFontSize(12);
          slide.content.forEach((content, contentIndex) => {
            doc.text(content, 20, 40 + contentIndex * 10);
          });
          updateProgress((index / data.slides.length) * 100);
        });
  
        doc.save(`${filename}.pdf`);
      }
  
      return `${format.toUpperCase()} file generated successfully!`;
    } catch (error) {
      console.error(`Error generating ${format.toUpperCase()} file:`, error);
      throw new Error(`Failed to generate ${format.toUpperCase()} file`);
    }
  };
    

  useCopilotAction({
    name: "generateSpreadsheet",
    description: "Generate a spreadsheet based on provided data with custom styling",
    parameters: [
      {
        name: "data",
        type: "object",
        description: "Spreadsheet data including headers and rows",
        attributes: [
          { name: "headers", type: "string[]", description: "Column headers" },
          { name: "rows", type: "object[]", description: "Data rows" },
        ],
      },
      {
        name: "filename",
        type: "string",
        description: "Name of the file to be generated",
      },
      {
        name: "style",
        type: "object",
        description: "Custom styling for the spreadsheet",
        attributes: [
          { name: "headerColor", type: "string", description: "Header background color" },
          { name: "headerFontColor", type: "string", description: "Header font color" },
          { name: "cellColor", type: "string", description: "Cell background color" },
          { name: "cellFontColor", type: "string", description: "Cell font color" },
        ],
      },
      {
        name: "format",
        type: "string",
        description: "File format (xlsx or csv)",
        enum: ["xlsx", "csv"],
      },
    ],
    handler: async ({ data, filename, style, format }: { 
      data: SpreadsheetData; 
      filename: string; 
      style: SpreadsheetStyle;
      format: FileFormat;
    }) => {
      return generateSpreadsheet(data, filename, style, format);
    },
    render: ({ status }: { status: string }) => {
      if (status === "inProgress") return (
        <div className="text-custom-blue dark:text-custom-blue-dark">
          Preparing to generate spreadsheet... {progress.toFixed(0)}%
        </div>
      );
      if (status === "executing") return (
        <div className="text-custom-orange dark:text-custom-orange-dark">
          Generating spreadsheet... {progress.toFixed(0)}%
        </div>
      );
      if (status === "complete") return (
        <div className="text-green-500">Spreadsheet generated successfully!</div>
      );
      return <></>;  // Return an empty fragment instead of null
    },
  });

  useCopilotAction({
    name: "generatePresentation",
    description: "Generate a presentation based on provided data with custom styling",
    parameters: [
      {
        name: "data",
        type: "object",
        description: "Presentation data including title and slides",
        attributes: [
          { name: "title", type: "string", description: "Presentation title" },
          {
            name: "slides",
            type: "object[]",
            description: "Array of slide objects",
            attributes: [
              { name: "title", type: "string", description: "Slide title" },
              { name: "content", type: "string[]", description: "Slide content as array of strings" },
            ],
          },
        ],
      },
      {
        name: "filename",
        type: "string",
        description: "Name of the file to be generated",
      },
      {
        name: "style",
        type: "object",
        description: "Custom styling for the presentation",
        attributes: [
          { name: "theme", type: "string", description: "Presentation theme (light or dark)", enum: ["light", "dark"] },
          { name: "primaryColor", type: "string", description: "Primary color" },
          { name: "secondaryColor", type: "string", description: "Secondary color" },
          { name: "fontFamily", type: "string", description: "Font family" },
        ],
      },
      {
        name: "format",
        type: "string",
        description: "File format (pptx or pdf)",
        enum: ["pptx", "pdf"],
      },
    ],
    handler: async ({ data, filename, style, format }: { 
      data: PresentationData; 
      filename: string;
      style: PresentationStyle;
      format: FileFormat;
    }) => {
      return generatePresentation(data, filename, style, format);
    },
    render: ({ status }: { status: string }) => {
      if (status === "inProgress") return (
        <div className="text-custom-blue dark:text-custom-blue-dark">
          Preparing to generate presentation... {progress.toFixed(0)}%
        </div>
      );
      if (status === "executing") return (
        <div className="text-custom-orange dark:text-custom-orange-dark">
          Generating presentation... {progress.toFixed(0)}%
        </div>
      );
      if (status === "complete") return (
        <div className="text-green-500 text-center text-sm border-2 border-green-500 p-2 rounded-md">Presentation generated successfully!</div>
      );
      return <></>; // Return an empty fragment instead of null
    },
  });

  return null; // This component doesn't render anything visible
};

export default CopilotGenAI;

================
File: app/copilot/CopilotTextarea.tsx
================
import { CopilotTextarea } from "@copilotkit/react-textarea";
import { useState } from "react";

export function CopilotText() {
  const [text, setText] = useState("");

  return (
    <>
      <CopilotTextarea
        className="px-4 py-4 bg-gray-700"
        value={text}
        onValueChange={(value: string) => setText(value)}
        placeholder="Write your notes here and watch AI intelligently make suggestions!"
        autosuggestionsConfig={{
          textareaPurpose: "Notes about a user's tax-related questions and concerns. Likely written in a colloquial style, but adjust as needed.",
          chatApiConfigs: {
            suggestionsApiConfig: {
              maxTokens: 20,
              stop: [".", "?", "!"],
            },
          },
        }}
      />
    </>
  );
}

================
File: app/copilot/DeleteSlideButton.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
import { SlideModel } from "../types/copilot";
import { ActionButton } from "./ActionButton";
import { FcFullTrash } from "react-icons/fc";

interface DeleteSlideButtonProps {
  currentSlideIndex: number;
  setCurrentSlideIndex: (fn: (i: number) => number) => void;
  slides: SlideModel[];
  setSlides: (fn: (slides: SlideModel[]) => SlideModel[]) => void;
}

export function DeleteSlideButton({
  currentSlideIndex,
  setCurrentSlideIndex,
  slides,
  setSlides,
}: DeleteSlideButtonProps) {
  return (
    <ActionButton
      disabled={slides.length == 1}
      onClick={() => {
        // delete the current slide
        setSlides((slides) => [
          ...slides.slice(0, currentSlideIndex),
          ...slides.slice(currentSlideIndex + 1),
        ]);
        setCurrentSlideIndex((i) => 0);
      }}
    >
      <FcFullTrash className="h-5 w-5" />
    </ActionButton>
  );
}

================
File: app/copilot/GenerateSlideButton.tsx
================
import { CopilotContextParams, CopilotTask } from "@copilotkit/react-core";
import { useState } from "react";
import { ActionButton } from "./ActionButton";
import { FcMindMap } from "react-icons/fc";

interface GenerateSlideButtonProps {
  context: CopilotContextParams;
}

export function GenerateSlideButton({ context }: GenerateSlideButtonProps) {
  const [isGeneratingSlide, setIsGeneratingSlide] = useState(false);
  return (
    <ActionButton
      inProgress={isGeneratingSlide}
      onClick={async () => {
        try {
          const slideContent = prompt("What should the new slide be about?");
          if (slideContent === null) {
            return;
          }
          setIsGeneratingSlide(true);
          const generateSlideTask = new CopilotTask({
            instructions:
              "Make a new slide given this user input: " +
              slideContent +
              "\n DO NOT carry out research",
          });
          await generateSlideTask.run(context);
        } finally {
          setIsGeneratingSlide(false);
        }
      }}
    >
      <FcMindMap className={"h-5 w-5"} />
    </ActionButton>
  );
}

================
File: app/copilot/HeaderPPTGen.tsx
================
import clsx from "clsx";
import { SlideModel } from "../types/copilot";
import { useMemo } from "react";
import { useCopilotContext } from "@copilotkit/react-core";
import { SlideNumberIndicator } from "./SlideNumberIndicator";
import { GenerateSlideButton } from "./GenerateSlideButton";
import { SpeakCurrentSlideButton } from "./SpeakCurrentSlideButton";
import { DeleteSlideButton } from "./DeleteSlideButton";
import { NavButton } from "./NavButton";
import { FcPrevious, FcNext } from "react-icons/fc";
import { PerformResearchSwitch } from "./PerformResearchSwitch";
import { AddSlideButton } from "./AddSlideButton";

interface HeaderProps {
  currentSlideIndex: number;
  setCurrentSlideIndex: (fn: (i: number) => number) => void;
  slides: SlideModel[];
  setSlides: (fn: (slides: SlideModel[]) => SlideModel[]) => void;
  performResearch: boolean;
  setPerformResearch: (fn: (b: boolean) => boolean) => void;
}

export function Header({
  currentSlideIndex,
  setCurrentSlideIndex,
  slides,
  setSlides,
  performResearch,
  setPerformResearch,
}: HeaderProps) {
  const currentSlide = useMemo(
    () => slides[currentSlideIndex],
    [slides, currentSlideIndex]
  );

  /**
   * We need to get the context here to run a Copilot task for generating a slide
   **/
  const context = useCopilotContext();

  return (
    <header className={clsx("bg-customBlack text-white items-center flex p-4")}>
      <div className="flex-0 flex space-x-1">
        {/* Back */}
        <NavButton
          disabled={currentSlideIndex == 0}
          onClick={() => setCurrentSlideIndex((i) => i - 1)}
        >
          <FcPrevious className="h-6 w-6" />
        </NavButton>

        {/* Forward */}
        <NavButton
          disabled={currentSlideIndex == slides.length - 1}
          onClick={() => setCurrentSlideIndex((i) => i + 1)}
        >
          <FcNext className="h-6 w-6" />
        </NavButton>

        {/* Perform Research */}
        <PerformResearchSwitch
          isEnabled={performResearch}
          setIsEnabled={setPerformResearch}
        />
      </div>

      <SlideNumberIndicator
        {...{ currentSlideIndex, totalSlides: slides.length }}
      />

      <div className="flex-0 flex space-x-1">
        <AddSlideButton
          {...{ currentSlideIndex, setCurrentSlideIndex, setSlides }}
        />

        <GenerateSlideButton context={context} />

        <SpeakCurrentSlideButton
          spokenNarration={currentSlide.spokenNarration}
        />

        <DeleteSlideButton
          {...{ currentSlideIndex, setCurrentSlideIndex, slides, setSlides }}
        />
      </div>
    </header>
  );
}

================
File: app/copilot/NavButton.tsx
================
import clsx from "clsx";

interface NavButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
}

export function NavButton({ children, onClick, disabled }: NavButtonProps) {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={clsx(
        "w-7 h-7 border border-white rounded-md flex justify-center items-center",
        "focus:outline-none",
        disabled
          ? "opacity-40 cursor-not-allowed"
          : "hover:bg-white hover:text-black"
      )}
    >
      {children}
    </button>
  );
}

================
File: app/copilot/PerformResearchSwitch.tsx
================
import React from "react";

interface PerformResearchSwitchProps {
  isEnabled: boolean;
  setIsEnabled: (fn: (b: boolean) => boolean) => void;
}

export const PerformResearchSwitch = ({
  isEnabled,
  setIsEnabled,
}: PerformResearchSwitchProps) => {
  return (
    <label className="flex items-center cursor-pointer pl-4">
      <div className="relative">
        <input
          type="checkbox"
          className="sr-only"
          checked={isEnabled}
          onChange={() => setIsEnabled((b) => !b)}
        />
        <div
          className={`w-10 h-4 ${
            isEnabled ? "bg-blue-500" : "bg-gray-400"
          } rounded-full shadow-inner transition-colors`}
        ></div>

        <div
          className={`absolute w-6 h-6 bg-white rounded-full shadow -left-1 -top-1 transition-transform ${
            isEnabled ? "transform translate-x-full" : ""
          }`}
        ></div>
      </div>
      <span className="text-sm font-normal ml-2">Perform Research?</span>
    </label>
  );
};

================
File: app/copilot/PollComponent.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
// /app/copilot/PollComponent.tsx

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { useCopilotAction } from '@copilotkit/react-core';
import { ErrorBoundary } from 'react-error-boundary';
import { useTranslation } from 'react-i18next';
import useAuth from '@/app/contexts/useAuth';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';

// Initialize Supabase client
const supabase: SupabaseClient = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL ?? '',
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? ''
);

interface PollOption {
  id: string;
  option_text: string;
  votes: number;
}

interface Poll {
  id: string;
  question: string;
  options: PollOption[];
  created_by: string;
  created_at: string;
  total_votes: number;
}

interface Comment {
  id: string;
  user_id: string;
  content: string;
  created_at: string;
}

interface PollComponentProps {
  pollId: string;
  userId?: string;
}

const PollComponent: React.FC<PollComponentProps> = React.memo(({ pollId }) => {
  const { user } = useAuth();
  const [poll, setPoll] = useState<Poll | null>(null);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [isVoted, setIsVoted] = useState(false);
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { t } = useTranslation();

  const fetchPoll = useCallback(async () => {
    try {
      const { data: pollData, error: pollError } = await supabase
        .from('poll_results')
        .select('*')
        .eq('poll_id', pollId);

      if (pollError) throw new Error(`Error fetching poll: ${pollError.message}`);

      if (pollData && pollData.length > 0) {
        const pollResult = pollData[0];
        setPoll({
          id: pollResult.poll_id,
          question: pollResult.question,
          options: pollData.map(option => ({
            id: option.option_id,
            option_text: option.option_text,
            votes: option.votes
          })),
          created_by: '',
          created_at: '',
          total_votes: pollResult.total_votes
        });
      } else {
        throw new Error('Poll not found');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    }
  }, [pollId]);

  const fetchComments = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from('comments')
        .select('*')
        .eq('poll_id', pollId)
        .order('created_at', { ascending: false });

      if (error) throw new Error(`Error fetching comments: ${error.message}`);

      setComments(data);
    } catch (err) {
      console.error('Error fetching comments:', err);
      // Optionally set an error state for comments
    }
  }, [pollId]);

  const checkUserVoted = useCallback(async () => {
    if (!user?.id) {
      setIsVoted(false);
      return;
    }

    try {
      const { data, error } = await supabase.rpc('has_user_voted', {
        p_poll_id: pollId,
        p_user_id: user.id
      });

      if (error) throw new Error(`Error checking user vote: ${error.message}`);

      setIsVoted(data);
    } catch (err) {
      console.error('Error checking user vote:', err);
      setIsVoted(false);
    }
  }, [pollId, user?.id]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      await Promise.all([fetchPoll(), fetchComments(), checkUserVoted()]);
      setLoading(false);
    };

    fetchData();

    const pollSubscription = supabase
      .channel(`poll:${pollId}`)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'polls' }, fetchPoll)
      .subscribe();

    const commentsSubscription = supabase
      .channel(`comments:${pollId}`)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'comments' }, fetchComments)
      .subscribe();

    return () => {
      pollSubscription.unsubscribe();
      commentsSubscription.unsubscribe();
    };
  }, [pollId, fetchPoll, fetchComments, checkUserVoted]);

  const handleVote = async () => {
    if (!selectedOption || isVoted || !user?.id) return;

    try {
      const { error } = await supabase.rpc('increment_vote', {
        p_option_id: selectedOption,
        p_user_id: user.id,
      });

      if (error) throw new Error(`Error voting: ${error.message}`);

      setIsVoted(true);
      await fetchPoll();
    } catch (err) {
      console.error('Error voting:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while voting');
    }
  };

  const handleComment = async () => {
    if (!newComment.trim() || !user?.id) return;

    try {
      const { error } = await supabase
        .from('comments')
        .insert({ poll_id: pollId, user_id: user.id, content: newComment });

      if (error) throw new Error(`Error adding comment: ${error.message}`);

      setNewComment('');
      await fetchComments();
    } catch (err) {
      console.error('Error adding comment:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while adding a comment');
    }
  };

  const handleShare = () => {
    navigator.share({
      title: poll?.question,
      url: `${window.location.origin}/poll/${pollId}`,
    }).catch(console.error);
  };

  if (loading) return <div>{t('loading')}</div>;
  if (error) return <div>{t('errorOccurred')}: {error}</div>;
  if (!poll) return <div>{t('pollNotFound')}</div>;

  return (
    <ErrorBoundary fallback={<div>{t('errorOccurred')}</div>}>
      <div className="bg-white shadow-md rounded-lg p-6 max-w-md mx-auto">
        <h2 className="text-2xl font-semibold mb-4">{poll.question}</h2>
        <div className="space-y-3">
          {poll.options.map((option) => (
            <div key={option.id} className="flex items-center">
              <input
                type="radio"
                id={option.id}
                name="poll-option"
                value={option.id}
                checked={selectedOption === option.id}
                onChange={() => setSelectedOption(option.id)}
                disabled={isVoted || !user}
                className="mr-3"
              />
              <label htmlFor={option.id} className="flex-grow">
                {option.option_text}
                {isVoted && (
                  <div className="mt-1 bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-500 rounded-full h-2"
                      style={{ width: `${(option.votes / poll.total_votes) * 100}%` }}
                    ></div>
                  </div>
                )}
              </label>
              {isVoted && <span className="ml-2 text-sm text-gray-500">{option.votes} {t('votes')}</span>}
            </div>
          ))}
        </div>
        {!isVoted && user && (
          <Button
            onClick={handleVote}
            disabled={!selectedOption}
            variant="outline"
            className="mt-4 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors disabled:bg-gray-300"
          >
            {t('vote')}
          </Button>
        )}
        {isVoted && <p className="mt-4 text-center text-gray-600">{t('thankYouForVoting')}</p>}
        {!user && <p className="mt-4 text-center text-gray-600">{t('loginToVote')}</p>}
        <Button onClick={handleShare} variant="outline" className="mt-4 bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors">
          {t('share')}
        </Button>
        <div className="mt-6">
          <h3 className="text-xl font-semibold mb-2">{t('comments')}</h3>
          {user ? (
            <>
              <Textarea
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                className="w-full p-2 border rounded-md"
                placeholder={t('addComment')}
              />
              <Button
                onClick={handleComment}
                variant="outline"
                className="mt-2 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors"
              >
                {t('postComment')}
              </Button>
            </>
          ) : (
            <p className="text-gray-600">{t('loginToComment')}</p>
          )}
          <div className="mt-4 space-y-2">
            {comments.map((comment) => (
              <div key={comment.id} className="bg-gray-100 p-2 rounded-md">
                <p>{comment.content}</p>
                <small className="text-gray-500">{new Date(comment.created_at).toLocaleString()}</small>
              </div>
            ))}
          </div>
        </div>
      </div>
    </ErrorBoundary>
  );
});

PollComponent.displayName = 'PollComponent';

export default PollComponent;

================
File: app/copilot/PowerPointActions.tsx
================
// /app/copilot/PowerPointActions.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import { usePowerPointState, Slide } from '../../hooks/usePowerPointState';

interface PowerPointActionsProps {
  onGenerateSlide: () => Promise<Slide>;
}

export const PowerPointActions: React.FC<PowerPointActionsProps> = ({ onGenerateSlide }) => {
  const { addSlide, deleteSlide, currentSlideIndex } = usePowerPointState();

  const handleGenerateSlide = async () => {
    const newSlide = await onGenerateSlide();
    addSlide(newSlide);
  };

  return (
    <div className="flex space-x-2">
      <Button onClick={handleGenerateSlide}>Generate Slide</Button>
      <Button onClick={() => deleteSlide(currentSlideIndex)}>Delete Current Slide</Button>
    </div>
  );
};

================
File: app/copilot/Presentation.tsx
================
// /app/copilot/Presentation.tsx

"use client";
import { useCopilotReadable } from "@copilotkit/react-core";
import { useCallback, useMemo, useState } from "react";
import { Slide } from "./Slide";
import { Header } from "./HeaderPPTGen";
import useAppendSlide from "./useAppendSlide";
import { SlideModel } from "../types/copilot";

interface PresentationProps {
    performResearch: boolean;
    setPerformResearch: (fn: (b: boolean) => boolean) => void;
  }
  
  export const Presentation = ({
    performResearch,
    setPerformResearch,
  }: PresentationProps) => {
    const [slides, setSlides] = useState<SlideModel[]>([
      {
        content: "This is the first slide.",
        backgroundImageUrl:
          "https://loremflickr.com/cache/resized/65535_53415810728_d1db6e2660_h_800_600_nofilter.jpg",
        spokenNarration: "This is the first slide. Welcome to our presentation!",
      },
    ]);
    const [currentSlideIndex, setCurrentSlideIndex] = useState(0);
    const currentSlide = useMemo(
      () => slides[currentSlideIndex],
      [slides, currentSlideIndex]
    );
  
    /**
     * This makes all slides available to the Copilot.
     */
    useCopilotReadable({
      description: "These are all the slides",
      value: slides,
    });
  
    /**
     * This makes the current slide available to the Copilot.
     */
    useCopilotReadable({
      description: "This is the current slide",
      value: currentSlide,
    });
  
    /**
     * This action allows the Copilot to append a new slide to the presentation.
     */
    useAppendSlide({
      setSlides: setSlides as React.Dispatch<React.SetStateAction<SlideModel[]>>,
      setCurrentSlideIndex,
      slides: slides as SlideModel[],
    });
  
    const updateCurrentSlide = useCallback(
      (partialSlide: Partial<SlideModel>) => {
        setSlides((slides) => [
          ...slides.slice(0, currentSlideIndex),
          { ...slides[currentSlideIndex], ...partialSlide },
          ...slides.slice(currentSlideIndex + 1),
        ]);
      },
      [currentSlideIndex, setSlides]
    );
  
    return (
      <div
        style={{
          height: `100vh`,
        }}
        className="flex flex-col"
      >
        <Header
          currentSlideIndex={currentSlideIndex}
          setCurrentSlideIndex={setCurrentSlideIndex}
          slides={slides}
          setSlides={setSlides}
          performResearch={performResearch}
          setPerformResearch={setPerformResearch}
        />
        <div
          className="flex items-center justify-center flex-1"
          style={{ backgroundColor: "#414247", overflow: "auto" }}
        >
          <div
            className="aspect-ratio-box bg-white flex shadow-2xl"
            style={{ margin: "5rem", maxHeight: "70vh" }}
          >
            <Slide slide={currentSlide} partialUpdateSlide={updateCurrentSlide} />
          </div>
        </div>
      </div>
    );
  };

================
File: app/copilot/sendEmailButton.tsx
================
// /app/copilot/sendEmailButton.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import useEmailSendingAction from './useEmailSendingAction';

const SendEmailButton: React.FC = () => {
  const sendEmail = useEmailSendingAction();

  const handleSendEmail = async () => {
    try {
      await sendEmail({
        to: 'recipient@example.com',
        subject: 'Test Email',
        body: 'This is a test email sent by the AI.',
      });
      console.log('Email sent successfully');
    } catch (error) {
      console.error('Failed to send email:', error);
    }
  };

  return (
    <Button variant="outline" className='text-black hover:text-white rounded w-full' onClick={handleSendEmail}>Send Test Email</Button>
  );
};

export default SendEmailButton;

================
File: app/copilot/Slide.tsx
================
// /app/copilot/Slide.tsx

"use client";
import useUpdateSlide from "./useUpdateSlide";
import { SlideModel } from "../types/copilot";

export interface SlideProps {
  slide: SlideModel;
  partialUpdateSlide: (partialSlide: Partial<SlideModel>) => void;
  title?: string;
}

export const Slide = (props: SlideProps) => {
  const backgroundImage = `url("${props.slide.backgroundImageUrl}")`;

  /**
   * This action allows the Copilot to update the current slide.
   */
  useUpdateSlide({ partialUpdateSlide: props.partialUpdateSlide });

  return (
    <div className="w-full h-full flex flex-row bg-white">
      <div className="flex-grow h-full flex flex-col" style={{ flex: "2" }}>
        <SlideContent
          content={props.slide.content}
          onChange={(newContent) => {
            props.partialUpdateSlide({ content: newContent });
          }}
        />
        <SlideSpeakerNotes
          spokenNarration={props.slide.spokenNarration}
          onChange={(newSpokenNarration) => {
            props.partialUpdateSlide({ spokenNarration: newSpokenNarration });
          }}
        />
      </div>
      <SlideImage backgroundImage={backgroundImage} />
    </div>
  );
};

function SlideImage({ backgroundImage }: { backgroundImage: string }) {
  return (
    <div
      className="flex-grow h-full bg-slate-200"
      style={{
        flex: "1",
        backgroundImage,
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    />
  );
}

interface SpeakerNotesProps {
  spokenNarration: string;
  onChange: (newSpokenNarration: string) => void;
}

function SlideSpeakerNotes({ spokenNarration, onChange }: SpeakerNotesProps) {
  return (
    <div className="bg-gray-200 relative h-20 flex flex-col">
      <textarea
        className="w-full h-full bg-transparent p-2 text-base"
        style={{
          border: "none",
          outline: "none",
          lineHeight: "1.5",
          resize: "none",
        }}
        placeholder="Speaker notes..."
        value={spokenNarration}
        onChange={(e) => {
          onChange(e.target.value);
        }}
      />
    </div>
  );
}

interface SlideContentProps {
  content: string;
  onChange: (newContent: string) => void;
}

function SlideContent({ content, onChange }: SlideContentProps) {
  return (
    <textarea
      className="flex-1 w-full text-gray-800 p-4 px-10 font-bold flex items-center line-clamp-6"
      style={{
        border: "none",
        outline: "none",
        resize: "none",
        fontSize: "2vw",
      }}
      value={content}
      placeholder="Slide content..."
      onChange={(e) => {
        onChange(e.target.value);
      }}
    />
  );
}

================
File: app/copilot/SlideNumberIndicator.tsx
================
// /app/copilot/SlideNumberIndicator.tsx

interface SlideNumberIndicatorProps {
  currentSlideIndex: number;
  totalSlides: number;
}

export function SlideNumberIndicator({
  currentSlideIndex,
  totalSlides,
}: SlideNumberIndicatorProps) {
  return (
    <div className="flex-1 items-center justify-center flex uppercase text-xs font-bold tracking-widest">
      <span className="mr-3">{SLIDES_ICON}</span>
      Slide {currentSlideIndex + 1} of {totalSlides}
    </div>
  );
}

const SLIDES_ICON = (
  <svg
    width="10px"
    height="10px"
    viewBox="0 0 42 42"
    xmlns="http://www.w3.org/2000/svg"
    fill="currentColor"
  >
    <rect x="0" y="0" width="10" height="10" />
    <rect x="16" y="0" width="10" height="10" />
    <rect x="32" y="0" width="10" height="10" />
    <rect x="0" y="16" width="10" height="10" />
    <rect x="16" y="16" width="10" height="10" />
    <rect x="32" y="16" width="10" height="10" />
    <rect x="0" y="32" width="10" height="10" />
    <rect x="16" y="32" width="10" height="10" />
    <rect x="32" y="32" width="10" height="10" />
  </svg>
);

================
File: app/copilot/SlidePreview.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
// /app/copilot/SlidePreview.tsx

import React, { useMemo, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTheme } from 'next-themes';
import { useInView } from 'react-intersection-observer';
import { Button } from '@/components/ui/button';
import { Presentation } from './Presentation';
import { SlideData } from '../types/copilot';
interface SlidePreviewProps extends SlideData {
    done: boolean;
    backgroundImageUrl?: string;
    onNavigate: (direction: 'next' | 'prev') => void;
    currentSlide: number;
    direction: number;
    nextSlide: () => void;
    prevSlide: () => void;
    setCurrentSlide: (slide: number) => void;
    setDirection: (direction: number) => void;
    currentSlideIndex: number;
    slides: SlideData[];
    addSlide: (slide: SlideData) => void;
  }

export const SlidePreview: React.FC<SlidePreviewProps> = ({
  title,
  content,
  spokenNarration,
  done = false,
  backgroundImageUrl,
  onNavigate,
  currentSlide,
  direction,
  nextSlide,
  prevSlide,
  setCurrentSlide,
  setDirection,
  currentSlideIndex,
  slides,
  addSlide,
}) => {
  const { theme } = useTheme();
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const gradientColors = useMemo(() => {
    return theme === 'dark'
      ? ['from-blue-700', 'to-teal-700', 'bg-gray-900', 'border-gray-800']
      : ['from-blue-300', 'to-teal-300', 'bg-white', 'border-gray-200'];
  }, [theme]);

  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if (event.key === 'ArrowRight') {
      onNavigate('next');
    } else if (event.key === 'ArrowLeft') {
      onNavigate('prev');
    }
  }, [onNavigate]);

  useEffect(() => {
    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);

  const handleAddSlide = () => {
    addSlide({ title: '', content: '', spokenNarration: '' });
  };

  return (
    <div className="w-full h-full">
      <div className="relative h-full">
        <div className={`absolute inset-0 bg-gradient-to-r ${gradientColors[0]} ${gradientColors[1]} transform scale-[0.80] rounded-full blur-3xl`} />
        <div 
          className={`relative shadow-xl ${gradientColors[2]} border ${gradientColors[3]} px-6 py-8 h-full overflow-hidden rounded-2xl flex flex-col justify-between`}
          style={backgroundImageUrl ? { backgroundImage: `url(${backgroundImageUrl})`, backgroundSize: 'cover', backgroundPosition: 'center' } : {}}
        >
          <h2 className={`font-bold text-xl ${theme === 'dark' ? 'text-white' : 'text-gray-900'} mb-4 relative z-50`}>
            {done ? (title || "Slide Preview") : "Generating Slide..."}
          </h2>
          {!done && (
            <motion.div
              className="w-full h-2 bg-blue-300 rounded-full mb-4 overflow-hidden"
              initial={{ width: 0 }}
              animate={{ width: '100%' }}
              transition={{ duration: 2, ease: 'linear', repeat: Infinity }}
            >
              <motion.div
                className="h-full bg-blue-700 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: '100%' }}
                transition={{ duration: 2, ease: 'linear', repeat: Infinity }}
              />
            </motion.div>
          )}
          <p className={`font-normal text-base ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'} mb-4 relative z-50 whitespace-pre-wrap flex-grow overflow-auto`}>
            {content}
          </p>
          {spokenNarration && (
            <details className="mt-2 relative z-50">
              <summary className={`cursor-pointer ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'} hover:underline`}>
                View Narration
              </summary>
              <p className={`mt-2 font-normal text-sm ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
                {spokenNarration}
              </p>
            </details>
          )}
          <div className="flex justify-left mt-4">
            <div className="flex flex-row space-x-2">
              <Button variant="default" onClick={prevSlide}>Prev</Button>
              <Button variant="default" onClick={nextSlide}>Next</Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

================
File: app/copilot/SlidePreviewCarousel.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
// /app/copilot/SlidePreviewCarousel.tsx

import React, { useEffect, useRef, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useSwipeable } from 'react-swipeable';
import { SlidePreview } from './SlidePreview';
import { Button } from '@/components/ui/button';
import { PlayIcon, PauseIcon } from 'lucide-react';
import { usePowerPointState } from '../../hooks/usePowerPointState';
import { SlideData } from '../types/copilot';
import { SlideThumbnail } from './SlideThumbnail';
import { VirtualizedThumbnails } from './VirtualizedThumbnails';

export interface SlidePreviewCarouselProps {
  slides: SlideData[];
  backgroundImageUrl: string;
}

export const SlidePreviewCarousel: React.FC<SlidePreviewCarouselProps> = ({ 
  slides,
  backgroundImageUrl
}) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const carouselRef = useRef<HTMLDivElement>(null);
  const autoplayRef = useRef<NodeJS.Timeout | null>(null);
  const {
    currentSlideIndex,
    setCurrentSlideIndex,
    addSlide,
    updateSlide,
    deleteSlide,
    nextSlide,
    prevSlide,
  } = usePowerPointState(slides);

  const [direction, setDirection] = useState(0);

  const slideVariants = {
    enter: (direction: number) => ({
      x: direction > 0 ? 1000 : -1000,
      opacity: 0,
    }),
    center: {
      zIndex: 1,
      x: 0,
      opacity: 1,
    },
    exit: (direction: number) => ({
      zIndex: 0,
      x: direction < 0 ? 1000 : -1000,
      opacity: 0,
    }),
  };

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'ArrowLeft') {
        handlePrevSlide();
      } else if (event.key === 'ArrowRight') {
        handleNextSlide();
      }
    };

    const currentCarouselRef = carouselRef.current;
    currentCarouselRef?.addEventListener('keydown', handleKeyDown);
    currentCarouselRef?.focus();

    return () => {
      currentCarouselRef?.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  useEffect(() => {
    if (isPlaying) {
      autoplayRef.current = setInterval(() => {
        handleNextSlide();
      }, 5000); // Change slide every 5 seconds
    } else {
      if (autoplayRef.current) {
        clearInterval(autoplayRef.current);
      }
    }

    return () => {
      if (autoplayRef.current) {
        clearInterval(autoplayRef.current);
      }
    };
  }, [isPlaying]);

  const toggleAutoplay = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNextSlide = () => {
    setDirection(1);
    nextSlide();
  };

  const handlePrevSlide = () => {
    setDirection(-1);
    prevSlide();
  };

  const handlers = useSwipeable({
    onSwipedLeft: handleNextSlide,
    onSwipedRight: handlePrevSlide,
    trackMouse: true
  });

  return (
    <div className="space-y-4">
      <div 
        {...handlers}
        ref={carouselRef} 
        className="relative w-full max-w-4xl mx-auto h-[400px]"
        tabIndex={0} 
        aria-label="Slide Preview Carousel"
      >
        <AnimatePresence initial={false} custom={direction}>
          <motion.div
            key={currentSlideIndex}
            custom={direction}
            variants={slideVariants}
            initial="enter"
            animate="center"
            exit="exit"
            transition={{
              x: { type: 'spring', stiffness: 300, damping: 30 },
              opacity: { duration: 0.2 },
            }}
            className="absolute inset-0"
          >
            <SlidePreview
              {...slides[currentSlideIndex]}
              slides={slides}
              done={true}
              onNavigate={(direction) => direction === 'next' ? handleNextSlide() : handlePrevSlide()}
              backgroundImageUrl={backgroundImageUrl}
              currentSlideIndex={currentSlideIndex}
              currentSlide={currentSlideIndex}
              direction={direction}
              nextSlide={handleNextSlide}
              prevSlide={handlePrevSlide}
              addSlide={addSlide}
              setCurrentSlide={setCurrentSlideIndex}
              setDirection={setDirection}
            />
          </motion.div>
        </AnimatePresence>

        <div className="absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
          {slides.map((_, index) => (
            <div
              key={index}
              className={`h-2 w-2 rounded-full ${
                index === currentSlideIndex ? 'bg-primary' : 'bg-gray-300'
              }`}
              aria-label={`Slide ${index + 1} ${index === currentSlideIndex ? '(Current)' : ''}`}
            />
          ))}
        </div>

        <Button
          variant="ghost"
          onClick={toggleAutoplay}
          className="absolute left-4 bottom-4 bg-black bg-opacity-50 text-white p-2 rounded-full"
          aria-label={isPlaying ? "Pause autoplay" : "Start autoplay"}
        >
          {isPlaying ? <PauseIcon size={24} /> : <PlayIcon size={24} />}
        </Button>
      </div>
      
      <div className="flex justify-center space-x-2 overflow-x-auto py-2">
        <VirtualizedThumbnails 
          slides={slides} 
          currentSlideIndex={currentSlideIndex} 
          setCurrentSlideIndex={setCurrentSlideIndex} 
        />
      </div>
    </div>
  );
};

================
File: app/copilot/SlideThumbnail.tsx
================
// /app/copilot/SlideThumbnail.tsx

import React from 'react';
import { SlideData } from '../types/copilot';
import { Button } from '@/components/ui/button';

interface SlideThumbnailProps {
  slide: SlideData;
  isActive: boolean;
  onClick: () => void;
}

export const SlideThumbnail: React.FC<SlideThumbnailProps> = ({ slide, isActive, onClick }) => {
  return (
    <Button
      onClick={onClick}
      className={`w-36 h-16 border-2 ${
        isActive ? 'border-primary' : 'border-gray-300'
      } focus:outline-none focus:ring-2 focus:ring-primary rounded-md overflow-hidden`}
      aria-label={`Go to slide: ${slide.title}`}
    >
      <div className="w-full h-full p-1 text-xs overflow-hidden">
        <p className="font-bold truncate text-white">{slide.title}</p>
        <p className="text-white line-clamp-2">{slide.content}</p>
      </div>
    </Button>
  );
};

================
File: app/copilot/SpeakCurrentSlideButton.tsx
================
// /app/copilot/SpeakCurrentSlideButton.tsx

import { useState } from "react";
import { ActionButton } from "./ActionButton";
import { FcSpeaker } from "react-icons/fc";
import { resetGlobalAudio, speak } from "../utils/globalAudio";

interface SpeakCurrentSlideButtonProps {
  spokenNarration: string;
}

export function SpeakCurrentSlideButton({
  spokenNarration,
}: SpeakCurrentSlideButtonProps) {
  const [isSpeaking, setIsSpeaking] = useState(false);
  return (
    <ActionButton inProgress={isSpeaking}>
      <FcSpeaker
        className="h-5 w-5"
        onClick={async () => {
          resetGlobalAudio();
          try {
            setIsSpeaking(true);
            await speak(spokenNarration);
          } finally {
            setIsSpeaking(false);
          }
        }}
      />
    </ActionButton>
  );
}

================
File: app/copilot/SuggestionList.tsx
================
import { Button } from "@/components/ui/button";

interface SuggestionType {
    title: string;
    message: string;
    partial?: boolean;
  }

export function SuggestionList({ suggestions, onSelect }: { suggestions: SuggestionType[], onSelect: (message: string) => void }) {
    return (
      <div className="suggestions-container flex flex-wrap gap-2 mb-4">
        {suggestions.map((suggestion, index) => (
          <Button
            key={index}
            variant="outline"
            size="sm"
            onClick={() => onSelect(suggestion.message)}
            className="suggestion-button"
          >
            {suggestion.title}
          </Button>
        ))}
      </div>
    );
  }

================
File: app/copilot/tavily.ts
================
// /components/Copilot/tavily.ts

import OpenAI from "openai";

const TAVILY_API = process.env.NEXT_PUBLIC_TAVILY_API_KEY || '';
if (!TAVILY_API) {
  throw new Error("Missing TAVILY_API_KEY environment variable.");
}

export async function research(query: string) {
  if (!query) {
    throw new Error('Query cannot be empty.');
  }

  const response = await fetch('https://api.tavily.com/search', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${TAVILY_API}`
    },
    body: JSON.stringify({
      query: query,
      api_key: TAVILY_API,
      search_depth: "advanced",
      include_answer: true,
      include_images: true,
      include_raw_content: false,
      max_results: 25,
    }),
  });

  // Check if the response was successful
  if (!response.ok) {
    const errorData = await response.json();
    console.error("Tavily API response error:", errorData);
    throw new Error(`Tavily API request failed with status ${response.status}: ${JSON.stringify(errorData)}`);
  }

  const responseJson = await response.json();
  const OPENAI_API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY || '';

  if (!OPENAI_API_KEY) {
    throw new Error("Missing NEXT_PUBLIC_OPENAI_API_KEY environment variable.");
  }

  const openai = new OpenAI({ apiKey: OPENAI_API_KEY, dangerouslyAllowBrowser: true });

  console.log("TAVILY RESPONSE", responseJson);

  const completion = await openai.chat.completions.create({
    messages: [
      {
        role: "system",
        content: `Provide detailed answers based on the following JSON to answer the research query \`"${query}"\`: ${JSON.stringify(
          responseJson,
        )} in plain English. Note your sources and links as you would for a professional research paper.`,
      },
    ],
    model: "gpt-4o-mini",
  });

  console.log("SUMMARY", completion.choices[0].message.content);

  return completion.choices[0].message.content;
}

================
File: app/copilot/useAISuggestions.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// /app/hooks/useAISuggestions.tsx

import { useState, useCallback, useEffect } from 'react';
import { useCopilotContext } from "@copilotkit/react-core";
import { useCopilotChatSuggestions } from "@copilotkit/react-ui";

interface SuggestionType {
  title: string;
  message: string;
  partial?: boolean;
}

interface CopilotChatSuggestionConfiguration {
  instructions: string;
  [key: string]: any; // Allow any additional properties
}

export const useAISuggestions = (
  config: CopilotChatSuggestionConfiguration,
  dependencies: React.DependencyList = []
): [SuggestionType[], () => void] => {
  const [suggestions, setSuggestions] = useState<SuggestionType[]>([]);
  const context = useCopilotContext();

  const suggestionsConfig: CopilotChatSuggestionConfiguration = {
    ...config,
    instructions: config.instructions,
    onSuggestionsChanged: (newSuggestions: SuggestionType[]) => {
      setSuggestions(newSuggestions.map((suggestion) => ({
        title: suggestion.title,
        message: suggestion.message,
        partial: suggestion.partial,
      })));
    },
  };

  useCopilotChatSuggestions(suggestionsConfig);

  const refreshSuggestions = useCallback(() => {
    setSuggestions([]);
    // Note: We can't use refresh() as it doesn't exist on the return type of useCopilotChatSuggestions
    // Instead, we'll rely on the effect to trigger a refresh
  }, []);

  useEffect(() => {
    refreshSuggestions();
  }, [refreshSuggestions, ...dependencies]);

  return [suggestions, refreshSuggestions];
};

================
File: app/copilot/useAppendSlide.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// /app/copilot/useAppendSlide.tsx

import { useCopilotAction, ActionRenderProps } from "@copilotkit/react-core";
import { SlideModel } from "@/app/types/copilot";
import { SlidePreview } from "./SlidePreview";
import { Dispatch, SetStateAction, useCallback } from "react";
import { Parameter } from "@copilotkit/shared";

interface AppendSlideParams {
  setSlides: Dispatch<SetStateAction<SlideModel[]>>;
  setCurrentSlideIndex: Dispatch<SetStateAction<number>>;
  slides: SlideModel[];
}

interface SlideContent {
  content: string;
  backgroundImageUrl: string;
  spokenNarration: string;
  title?: string;
}

export default function useAppendSlide({
  setSlides,
  setCurrentSlideIndex,
  slides,
}: AppendSlideParams): void {
  const handleAppendSlide = useCallback(
    ({ content, backgroundImageUrl, spokenNarration, title }: SlideContent) => {
      const newSlide: SlideModel = {
        content,
        backgroundImageUrl,
        spokenNarration,
        title: title || "",
      };

      setSlides((prevSlides) => {
        const updatedSlides = [...prevSlides, newSlide];
        setCurrentSlideIndex(updatedSlides.length - 1);
        return updatedSlides;
      });
    },
    [setSlides, setCurrentSlideIndex]
  );

  useCopilotAction({
    name: "appendSlide",
    description: "Add a new slide to the presentation",
    parameters: [
      {
        name: "content",
        type: "string",
        description: "The content of the slide",
        required: true,
      },
      {
        name: "backgroundImageUrl",
        type: "string",
        description: "The background image URL",
        required: true,
      },
      {
        name: "spokenNarration",
        type: "string",
        description: "Narration for the slide",
        required: true,
      },
      {
        name: "title",
        type: "string",
        description: "Title of the slide",
        required: false,
      },
    ] as Parameter[],

    handler: handleAppendSlide as any,
    render: (props: ActionRenderProps) => {
      const { content, backgroundImageUrl, spokenNarration, title } = props.args[0] as SlideContent;
      const isDone = props.status === "complete";

      return (
        <SlidePreview 
          content={content || ''}
          spokenNarration={spokenNarration || ''}
          done={isDone}
          currentSlideIndex={slides.length}
          direction={0}
          backgroundImageUrl={backgroundImageUrl || ""}
          onNavigate={() => {}}
          currentSlide={slides.length}
          nextSlide={() => {}}
          prevSlide={() => {}}
          setCurrentSlide={() => {}}
          setDirection={() => {}}
          addSlide={() => {}}
          title={title || ''}
          slides={slides as any}
        />
      );
    },
  });
}

================
File: app/copilot/useCopilotPollAction.tsx
================
// app/copilot/useCopilotPollAction.ts

import { useCopilotAction } from '@copilotkit/react-core';
import { createClient } from '@supabase/supabase-js';
import PollComponent from './PollComponent';
import { generatePollWithAI } from './aiPollGenerator';
// import { useAuth } from '@/app/contexts/AuthContext'

const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL ?? '', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? '');

interface PollParams {
  topic: string;
}

interface GeneratedPoll {
  question: string;
  options: string[];
}

const useCopilotPollAction = () => {
  // const { user } = useAuth()
  return useCopilotAction({
    name: "createPoll",
    description: "Creates a new poll based on a given topic using AI-generated questions and answers",
    parameters: [
      {
        name: "topic",
        type: "string",
        description: "The topic for the poll",
        required: true,
      },
    ],
    handler: async ({ topic }: PollParams) => {
      try {
        const generatedPoll: GeneratedPoll = await generatePollWithAI(topic);

        const { data: pollData, error: pollError } = await supabase
          .from('polls')
          .insert({ question: generatedPoll.question, topic: topic, total_votes: 0 })
          .select()
          .single();

        if (pollError) throw pollError;

        const optionsToInsert = generatedPoll.options.map(option => ({
          poll_id: pollData.id,
          option_text: option,
          votes: 0,
        }));

        const { error: optionsError } = await supabase
          .from('poll_options')
          .insert(optionsToInsert);

        if (optionsError) throw optionsError;

        return pollData.id;
      } catch (err) {
        console.error('Error creating poll:', err);
        throw new Error('Failed to create poll');
      }
    },
    render: ({ status, result }) => {
      if (status === 'inProgress') {
        return <p>Creating AI-generated poll...</p>;
      }
      if (status === 'complete' && result) {
        return <PollComponent pollId={result} userId={''} />;
      }
      return <></>;
    }
  });
};

export default useCopilotPollAction;

================
File: app/copilot/useCopilotReadable.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import React from 'react';
import { useCopilotReadable } from "@copilotkit/react-core";

interface CopilotReadableOptions {
  description: string;
  value: any;
  parentId?: string;
  categories?: string[];
  convert?: (description: string, value: any) => string;
}

interface CopilotReadableProps {
  options: CopilotReadableOptions;
}

export const CopilotReadableComponent: React.FC<CopilotReadableProps> = ({ options }) => {
  useCopilotReadable(options);
  return null;
};

export const useMakeCopilotReadable = (options: CopilotReadableOptions) => {
  return React.createElement(CopilotReadableComponent, { options });
};

================
File: app/copilot/useEmailSendingAction.ts
================
// app/copilot/useEmailSendingAction.ts

import { useMemo, useCallback } from 'react';
import { useCopilotAction } from "@copilotkit/react-core";
import { SendEmailFunction } from '@/app/types/copilot';
import { useToast } from '@/hooks/use-toast';

const useEmailSendingAction = (): SendEmailFunction => {
  const { toast } = useToast();

  const handleSendEmail = useCallback(async ({ to, subject, body }: { to: string; subject: string; body: string }) => {
    if (!to || !subject || !body) {
      toast({
        title: "Email Sending Error",
        description: "Missing required parameters for sending email.",
        variant: "destructive",
        duration: 3000,
      });
      throw new Error('Missing required parameters');
    }

    try {
      const response = await fetch('/api/sendEmail', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ to, subject, body }),
      });

      const data = await response.json();

      if (!response.ok) {
        toast({
          title: "Error",
          description: data.error || "Failed to send email.",
          variant: "destructive",
          duration: 3500,
        });
        throw new Error(data.error || 'Failed to send email');
      }

      toast({
        title: "Email Sent",
        description: "Your email has been sent successfully.",
        variant: "default",
        duration: 3500,
      });

      return data;
    } catch (error) {
      console.error('Error sending email:', error);
      toast({
        title: "Email sending failed",
        description: "Unable to send the email. Please try again.",
        variant: "destructive",
        duration: 3500,
      });
      throw new Error('Failed to send email');
    }
  }, [toast]);

  useCopilotAction({
    name: 'sendEmail',
    description: 'Sends an email using Gmail',
    parameters: [
      { name: 'to', type: 'string', description: 'Recipient email address', required: true },
      { name: 'subject', type: 'string', description: 'Email subject', required: true },
      { name: 'body', type: 'string', description: 'Email body content', required: true },
    ],
    handler: handleSendEmail,
    render: ({ status }) => (status === 'complete' ? '✅ Email Sent!' : 'Sending email...'),
  });

  // Return a function that matches SendEmailFunction type
  return useMemo(() => {
    const sendEmail: SendEmailFunction = async (params: { to: string; subject: string; body: string }): Promise<void> => {
      try {
        await handleSendEmail(params);
      } catch (error) {
        console.error('Error in sendEmail:', error);
        throw error;
      }
    };
    return sendEmail;
  }, [handleSendEmail]);
};

export default useEmailSendingAction;

================
File: app/copilot/useGenerateChart.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
import Chart from 'chart.js/auto';
import { useCopilotAction } from "@copilotkit/react-core";
import { useCopilotReadable } from "@copilotkit/react-core";
export default function useGenerateChartAction() {
  useCopilotAction({
    name: "generateChart",
    description: "Generate a chart based on provided data",
    parameters: [
      {
        name: "data",
        type: "object",
        description: "Chart data including labels and datasets",
        attributes: [
          { name: "labels", type: "string[]", description: "X-axis labels" },
          {
            name: "datasets",
            type: "object[]",
            description: "Array of dataset objects",
            attributes: [
              { name: "label", type: "string", description: "Dataset label" },
              { name: "data", type: "number[]", description: "Dataset values" },
            ],
          },
        ],
      },
      {
        name: "type",
        type: "string",
        description: "Type of chart (e.g., 'bar', 'line', 'pie')",
      },
    ],
    handler: async ({ data, type }: { data: any; type: string }) => {
      const canvas = document.createElement('canvas');
      document.body.appendChild(canvas);
      
      new Chart(canvas, {
        type: type as any,
        data: data,
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top',
            },
            title: {
              display: true,
              text: 'Generated Chart'
            }
          }
        },
      });

      return "Chart generated successfully!";
    },
    render: ({ status }: { status: string }) => {
      if (status === "inProgress") return "Preparing to generate chart...";
      if (status === "executing") return "Generating chart...";
      if (status === "complete") return "Chart generated successfully!";
      return "";
    },
  });
};

================
File: app/copilot/useResearchAction.ts
================
// /app/copilot/useResearchAction.ts

import { useCopilotAction } from "@copilotkit/react-core";
import { useToast } from '@/hooks/use-toast';
import { research } from '@/app/copilot/tavily';

const useResearchAction = () => {
const { toast } = useToast();


  return useCopilotAction({
    name: 'research',
    description: 'Conducts research on a specified topic using the Tavily API and OpenAI.',
    parameters: [
      { name: 'topic', type: 'string', description: 'The topic to research. Must be 5 characters or longer.', required: true },
    ],
    handler: async ({ topic }) => {
      if (!topic || topic.length < 5) {
        toast({
          title: "Research Error",
          description: `Sorry, AI needs a question that is at least 5 characters long.`,
          variant: "destructive",
          duration: 3000,
        });
        throw new Error('The topic must be at least 5 characters long.');
      }

      try {
        const result = await research(topic);
        toast({
          title: "✅ Research Complete",
          description: `AI has successfully researched your question!`,
          variant: "default",
          duration: 3000,


        });
        return result;
      } catch (error) {
        console.error('Error conducting research:', error);
        toast({
          title: "Error",
          description: `Sorry, AI wasn't able to conduct the requested research. Please try again.`,
          variant: "destructive",
          duration: 3000,


        });
        throw new Error('Failed to conduct research.');
      }
    },
    render: ({ status }) => (status === 'complete' ? '✅ Research Complete!' : `One moment, AI is researching your question...`),
  });
};



export default useResearchAction;

================
File: app/copilot/UserProfile.tsx
================
import useAuth from '@/app/contexts/useAuth';
import { useEffect, useState } from 'react'
import { supabase } from '../utils/supabase/client'

interface UserData {
  id: string
  email: string
  full_name: string
  avatar_url: string
}

const UserProfile = () => {
  const { user } = useAuth()
  const [userData, setUserData] = useState<UserData | null>(null)

  useEffect(() => {
    const fetchUserData = async () => {
      if (user) {
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single()

        if (error) {
          console.error('Error fetching user data:', error)
        } else {
          setUserData(data)
        }
      }
    }

    fetchUserData()
  }, [user])

  if (!userData) {
    return <div>Loading user data...</div>
  }

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-4">User Profile</h1>
      <div className="space-y-2">
        <p><strong>Email:</strong> {userData.email}</p>
        <p><strong>Full Name:</strong> {userData.full_name}</p>
        <p><strong>User ID:</strong> {userData.id}</p>
        {userData.avatar_url && (
          <img 
            src={userData.avatar_url} 
            alt="User Avatar" 
            className="w-20 h-20 rounded-full"
          />
        )}
      </div>
    </div>
  )
}

export default UserProfile

================
File: app/copilot/useScheduleAppointmentAction.ts
================
import { useCopilotAction } from "@copilotkit/react-core";
import { useToast } from '@/hooks/use-toast';

const useScheduleAppointmentAction = () => {
  const { toast } = useToast();

  return useCopilotAction({
    name: 'scheduleAppointment',
    description: 'Schedules an appointment on Google Calendar',
    parameters: [
      { name: 'title', type: 'string', description: 'Title of the event', required: true },
      { name: 'startTime', type: 'string', description: 'Start time of the event in ISO format', required: true },
      { name: 'endTime', type: 'string', description: 'End time of the event in ISO format', required: true },
      { name: 'timeZone', type: 'string', description: 'Time zone of the event', required: true },
      { name: 'reminders', type: 'object', description: 'Reminders for the event', required: false },
      { name: 'recurrence', type: 'string[]', description: 'Recurrence rules for the event', required: false },
      { name: 'location', type: 'string', description: 'Location of the event', required: false },
      { name: 'description', type: 'string', description: 'Description of the event', required: false },
    ],
    handler: async ({ title, startTime, endTime, timeZone, reminders, recurrence, location, description }) => {
      if (!title || !startTime || !endTime || !timeZone) {
        toast({
          title: "Appointment Scheduling Error",
          description: `InteleosAI needs more information to complete your appointment request. Please try again.`,
          variant: "destructive",
          duration: 3000,
        });
        throw new Error('Missing required parameters');
      }

      try {
        const response = await fetch('/api/scheduleAppointment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title, startTime, endTime, timeZone, reminders, recurrence, location, description }),
        });

        const data = await response.json();

        if (!response.ok) {
          toast({
            title: "Error",
            description: data.error || "Failed to schedule appointment.",
            variant: "destructive",
            duration: 3500,
          });
          throw new Error(data.error || 'Failed to schedule appointment');
        }

        const eventLink = data.event.htmlLink;
        toast({
          title: `Your appointment has been scheduled.`,
          description: `The appointment has been successfully scheduled. <br />[View event](${eventLink})`,
          variant: "default",
          duration: 3500,

        });

        return data.event;
      } catch (error) {
        console.error('Error scheduling appointment:', error);
        toast({
          title: "Appointment scheduling failed.",
          description: `InteleosAI was unable to schedule your appointment. Please try again.`,
          variant: "destructive",
          duration: 3500,


        });
        throw new Error('Failed to schedule appointment');
      }
    },
    render: ({ status }) => (status === 'complete' ? '✅ Appointment Scheduled!' : `One moment please, InteleosAI is scheduling your appointment.`),
  });
};



export default useScheduleAppointmentAction;

================
File: app/copilot/useSuggestions.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
// /app/hooks/useSuggestions.ts

import { useState, useEffect, useRef } from 'react';
import { ExtendedCopilotContextParams } from '@/app/types/copilot';
import { CopilotChatSuggestionConfiguration } from '@copilotkit/react-core';
import logger from '../utils/logger';

export const useSuggestions = (context: ExtendedCopilotContextParams) => {
  const [suggestions, setSuggestions] = useState<{ title: string; message: string }[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const abortControllerRef = useRef<AbortController | null>(null);

  const loadSuggestions = async () => {
    setLoading(true);
    setError(null);
    try {
      const chatSuggestionConfiguration: { [key: string]: CopilotChatSuggestionConfiguration } = {
        default: {
          instructions: "Provide suggestions based on the user's context.",
          minSuggestions: 1,
          maxSuggestions: 5,
          className: 'suggestion-class',
        },
      };
      await loadSuggestions();
    } catch (err) {
      logger.error("Failed to load suggestions", { error: err });
      setError(err instanceof Error ? err : new Error('An unknown error occurred'));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (context) {
      loadSuggestions();
    }
    return () => {
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }
    };
  }, [context]);

  return { suggestions, loading, error, reloadSuggestions: loadSuggestions };
};

================
File: app/copilot/useUpdateSlide.tsx
================
// /app/copilot/useUpdateSlide.tsx

import { useCopilotAction } from "@copilotkit/react-core";
import { SlideModel } from "../types/copilot";
import { SlidePreview } from "./SlidePreview";

interface UpdateSlideParams {
  partialUpdateSlide: (partialSlide: Partial<SlideModel>) => void;
}

export default function useUpdateSlide({
  partialUpdateSlide,
}: UpdateSlideParams) {
  useCopilotAction({
    name: "updateSlide",
    description: "Update the current slide.",
    parameters: [
      {
        name: "content",
        description:
          "The content of the slide. Should generally consist of a few bullet points.",
      },
      {
        name: "backgroundImageUrl",
        description:
          "The url of the background image for the slide. Use the getImageUrl tool to retrieve a URL for a topic.",
      },
      {
        name: "spokenNarration",
        description:
          "The spoken narration for the slide. This is what the user will hear when the slide is shown.",
      },
    ],
    handler: async ({ content, backgroundImageUrl, spokenNarration }) => {
      partialUpdateSlide({
        content,
        backgroundImageUrl,
        spokenNarration,
      });
    },
    render: (props) => {
      return (
        <SlidePreview 
          content={props.args.content || ""}
          spokenNarration={props.args.spokenNarration}
          done={props.status === "complete"}
          onNavigate={() => {}}
          currentSlide={0}
          direction={0}
          nextSlide={() => {}}
          prevSlide={() => {}}
          addSlide={() => {}}
          backgroundImageUrl={props.args.backgroundImageUrl}
          currentSlideIndex={0}
          setCurrentSlide={() => {}}
          setDirection={() => {}}
          slides={[]}
          title={""}
        />
      );
    },
  });
}

================
File: app/copilot/VirtualizedThumbnails.tsx
================
import { useRef, useEffect } from 'react';
import { FixedSizeList as List } from 'react-window';
import { SlideThumbnail } from './SlideThumbnail';
import { SlideData } from '../types/copilot';

interface VirtualizedThumbnailsProps {
  slides: SlideData[];
  currentSlideIndex: number;
  setCurrentSlideIndex: (index: number) => void;
}

export const VirtualizedThumbnails: React.FC<VirtualizedThumbnailsProps> = ({ 
  slides, 
  currentSlideIndex, 
  setCurrentSlideIndex 
}) => {
    const listRef = useRef<List>(null);

  useEffect(() => {
    if (listRef.current) {
      listRef.current.scrollToItem(currentSlideIndex, 'center');
    }
  }, [currentSlideIndex]);

  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => (
    <div style={style}>
      <SlideThumbnail
        slide={slides[index]}
        isActive={index === currentSlideIndex}
        onClick={() => setCurrentSlideIndex(index)}
      />
    </div>
  );

  return (
    <List
      height={100}
      itemCount={slides.length}
      itemSize={150}
      layout="horizontal"
      width={600}
    >
      {Row}
    </List>
  );
};

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    /* Semi-Transparent Light Muted Purple */
    --sidebar-background: linear-gradient(
    135deg,
    hsla(270, 20%, 95%, 0.9),
    hsla(270, 15%, 90%, 0.9),
    hsla(270, 20%, 85%, 0.9)
    );
    --sidebar-foreground: 270 15% 40%;           /* Medium Muted Purple */
    --sidebar-primary: 270 20% 30%;              /* Dark Muted Purple */
    --sidebar-primary-foreground: 270 10% 95%;   /* Very Light Muted Purple */
    --sidebar-accent: 270 10% 85%;               /* Soft Muted Purple */
    --sidebar-accent-foreground: 270 20% 30%;    /* Dark Muted Purple */
    --sidebar-border: 270 10% 90%;               /* Light Muted Purple Border */
    --sidebar-ring: 270 25% 50%;                 /* Medium Muted Purple for Rings */
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    /* Semi-Transparent Dark Muted Purple Gradient */
    --sidebar-background: linear-gradient(
    135deg,
    hsla(270, 20%, 20%, 0.9),
    hsla(270, 15%, 25%, 0.9),
    hsla(270, 20%, 30%, 0.9)
    );
    --sidebar-foreground: 270 15% 80%;           /* Light Muted Purple */
    --sidebar-primary: 270 20% 70%;              /* Medium Muted Purple */
    --sidebar-primary-foreground: 270 10% 15%;   /* Dark Text for Contrast */
    --sidebar-accent: 270 10% 40%;               /* Medium Muted Purple */
    --sidebar-accent-foreground: 270 20% 70%;    /* Light Muted Purple */
    --sidebar-border: 270 10% 30%;               /* Dark Muted Purple Border */
    --sidebar-ring: 270 25% 40%;                 /* Darker Ring */
    }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: hsla(var(--sidebar-background), 0.5); /* Semi-transparent track */
}

.custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: hsla(var(--sidebar-accent), 0.7); /* Semi-transparent thumb */
    border-radius: 4px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: hsla(var(--sidebar-accent), 0.9); /* More opaque on hover */
}

.shadow-glow {
    box-shadow: 0 0 10px rgba(66, 153, 225, 0.5);
}
}

.animate-shimmer {
  animation: shimmer 2s linear infinite;
  background-size: 200% 100%;
}

.processing-animation {
  position: relative;
  z-index: 50;
  pointer-events: none;
}

.processing-animation::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(to right, transparent, rgba(59, 130, 246, 0.1), transparent);
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* Sidebar Container */
.sidebar {
  background: var(--sidebar-background);
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px); /* Added backdrop blur */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Light Mode Shadow */
  color: hsl(var(--sidebar-foreground));
  border: 1px solid hsla(var(--sidebar-border), 0.5); /* Semi-transparent border */
  padding: 5px;
  border-radius: 10px;
  transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
}

.dark .sidebar {
  background: var(--sidebar-background);
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px); /* Added backdrop blur */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5); /* Dark Mode Shadow */
  color: hsl(var(--sidebar-foreground));
  border: 1px solid hsla(var(--sidebar-border), 0.5); /* Semi-transparent border */
  padding: 5px;
  border-radius: 10px;
  transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
}

/* Primary Sidebar Elements */
.sidebar-primary {
  background-color: hsla(var(--sidebar-primary), 0.8); /* Semi-transparent background */
  color: hsl(var(--sidebar-primary-foreground));
  padding: 5px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
  transition: background-color 0.3s ease, color 0.3s ease;
}

/* Accent Sidebar Elements */
.sidebar-accent {
  background-color: hsla(var(--sidebar-accent), 0.8); /* Semi-transparent accent */
  color: hsl(var(--sidebar-accent-foreground));
  padding: 5px;
  border-radius: 4px;
  transition: background-color 0.3s ease, color 0.3s ease;
}

/* Sidebar Ring */
.sidebar-ring {
  box-shadow: 0 0 0 3px hsla(var(--sidebar-ring), 0.3); /* Semi-transparent ring */
}

/* Sidebar Border */
.sidebar-border {
border: 1px solid hsla(var(--sidebar-border), 0.5); /* Semi-transparent border */
}

.sidebar-content {
  overflow-y: auto;
  scrollbar-width: thin;
  scrollbar-color: hsla(var(--sidebar-accent), 0.7) hsla(var(--sidebar-background), 0.5);
}

================
File: app/layout.tsx
================
// /app/layout.tsx

'use client';
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core";
import localFont from "next/font/local";
import "./globals.css";
import "@copilotkit/react-ui/styles.css";

import { CopilotFeaturesProvider } from "./providers/CopilotFeaturesProvider";
import { InteleosContextProvider } from "./contexts/InteleosContext";
import { Toaster } from "@/components/ui/toaster";


const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

/*export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};*/

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        
        <CopilotKit runtimeUrl="/api/copilotkit">
          <InteleosContextProvider>
            <CopilotFeaturesProvider>
              {children}
              <Toaster />
            </CopilotFeaturesProvider>
          </InteleosContextProvider>
        </CopilotKit>
        
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
// app/page.tsx

import { CopilotCustomChatUI } from "./components/ai/CopilotCustomChatUI";
// import CopilotChatUI from "./copilot/CopilotChatUI";
import { Instructions } from "./components/Instructions";

export default function Home() {
  return (
    <div className="pb-28 font-[family-name:var(--font-geist-sans)] bg-white">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <div className='mt-5 m-3 p-3'>
        <Instructions />
        <CopilotCustomChatUI />
        {/* <CopilotChatUI /> */}
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
      </footer>
    </div>
  );
}

================
File: app/providers/AGUIProvider.tsx
================
// app/providers/AgentUIProvider.tsx
import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';
import { AgentUIState, ViewTypeEnum } from '@/app/types/agent';
import { useCoAgentStateRender } from '@/hooks/useCoAgentStateRender';
import { ENDPOINTS } from '@/app/configs/endpoints';

interface AgentUIContextType {
  uiState: AgentUIState;
  updateUIState: (newState: Partial<AgentUIState>) => void;
  setView: (view: ViewTypeEnum) => void;
  resetState: () => void;
  weatherAgent: ReturnType<typeof useCoAgentStateRender>;
}

const initialState: AgentUIState = {
  currentView: ViewTypeEnum.DEFAULT,
  actions: [],
  context: {},
};

const AgentUIContext = createContext<AgentUIContextType | undefined>(undefined);

export const AgentUIProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [uiState, setUIState] = useState<AgentUIState>(initialState);

  // Create a single instance of the inteleos agent
  const weatherAgent = useCoAgentStateRender({
    name: 'inteleos_agent',
    streamEndpoint: `${ENDPOINTS.PRODUCTION.BASE}${ENDPOINTS.PRODUCTION.ACTIONS}`,
    render: () => null, // Base render function, components will provide their own
  });

   const updateUIState = useCallback((newState: Partial<AgentUIState>) => {
    setUIState(prev => ({
      ...prev,
      ...newState,
    }));
  }, []);

  const setView = useCallback((view: ViewTypeEnum) => {
    setUIState(prev => ({
      ...prev,
      currentView: view,
    }));
  }, []);

  const resetState = useCallback(() => {
    setUIState(initialState);
  }, []);

  const value = useMemo(
    () => ({
      uiState,
      updateUIState,
      setView,
      resetState,
      weatherAgent,
    }),
    [uiState, updateUIState, setView, resetState, weatherAgent]
  );

  return (
    <AgentUIContext.Provider value={value}>
      {children}
    </AgentUIContext.Provider>
  );
};

export const useAgentUIContext = () => {
  const context = useContext(AgentUIContext);
  if (!context) {
    throw new Error('useAgentUIContext must be used within AgentUIProvider');
  }
  return context;
};

================
File: app/providers/CopilotFeaturesProvider.tsx
================
// CopilotFeaturesProvider.tsx
'use client'

import React, { ReactNode, useCallback, useMemo, useState } from 'react';
import { CopilotFeaturesContext } from '../contexts/CopilotFeaturesContext';
import { useCopilotReadable, useCopilotAction } from '@copilotkit/react-core';
import { useCopilotChatSuggestions } from "@copilotkit/react-ui";
import { useToast } from "@/hooks/use-toast";

interface CopilotFeaturesProviderProps {
  children: ReactNode;
}

export function CopilotFeaturesProvider({ children }: CopilotFeaturesProviderProps) {
  const { toast } = useToast();
  // Application state
  const actions = useMemo(() => ({}), []);
  const suggestions = useMemo(() => [], []);

  const [appState, setAppState] = useState({
    user: {
      name: 'John Doe',
      email: 'john.doe@example.com',
      role: 'Developer',
      avatar: '/user-avatar.png',
      company: 'Inteleos',
      location: 'New York, NY',
      department: 'Engineering',
      industry: 'Technology',
      personalInterests: ['Coding', 'Reading', 'Traveling', 'Podcasts'],
      professionalInterests: ['Software Development', 'Machine Learning', 'AI', 'Next.js', 'Tailwind CSS', 'TypeScript', 'HTML', 'CSS', 'Git', 'Docker', 'Kubernetes', 'Cloud', 'AWS', 'Azure', 'Google Cloud', 'OpenAI', 'CopilotKit', 'React UI', 'Framer Motion', 'GSAP', 'Lucide React', 'Tanstack Query', 'Tanstack Router', 'Tanstack Table', 'Tanstack Pagination', 'Tanstack Dialog', 'Tanstack Tooltip', 'Tanstack Popover', 'Tanstack Menu', 'Tanstack Accordion', 'Tanstack Tabs', 'Tanstack Listbox', 'Tanstack Combobox', 'Tanstack Alert', 'Tanstack Toast', 'Tanstack Drawer', 'Tanstack Modal', 'Tanstack Sheet', 'Tanstack AlertDialog', 'Tanstack ConfirmDialog'],
      keywords: ['JavaScript', 'Python', 'React', 'Node.js', 'AI', 'Next.js', 'Tailwind CSS', 'TypeScript', 'HTML', 'CSS', 'Git', 'Docker', 'Kubernetes', 'Cloud', 'AWS', 'Azure', 'Google Cloud', 'OpenAI', 'CopilotKit', 'React UI', 'Framer Motion', 'GSAP', 'Lucide React', 'Tanstack Query', 'Tanstack Router', 'Tanstack Table', 'Tanstack Pagination', 'Tanstack Dialog', 'Tanstack Tooltip', 'Tanstack Popover', 'Tanstack Menu', 'Tanstack Accordion', 'Tanstack Tabs', 'Tanstack Listbox', 'Tanstack Combobox', 'Tanstack Alert', 'Tanstack Toast', 'Tanstack Drawer', 'Tanstack Modal', 'Tanstack Sheet', 'Tanstack AlertDialog', 'Tanstack ConfirmDialog', 'Tanstack Tooltip', 'Tanstack Popover', 'Tanstack Menu', 'Tanstack Accordion', 'Tanstack Tabs', 'Tanstack Listbox', 'Tanstack Combobox', 'Tanstack Alert', 'Tanstack Toast', 'Tanstack Drawer', 'Tanstack Modal', 'Tanstack Sheet', 'Tanstack AlertDialog', 'Tanstack ConfirmDialog'],
      keyInformation: 'John Doe is a software developer with 5 years of experience in the tech industry. He is skilled in JavaScript, Python, and React, and has a passion for building scalable and efficient software solutions.',
    },
    employees: [
      { id: 1, name: 'Alice Smith', role: 'Developer' },
      { id: 2, name: 'Bob Johnson', role: 'Designer' },
      { id: 3, name: 'Charlie Brown', role: 'Manager' },
      { id: 4, name: 'Diana Ross', role: 'CEO' },
      { id: 5, name: 'Ethan Hunt', role: 'Spy' },
      { id: 6, name: 'Fiona Apple', role: 'Singer' },
      { id: 7, name: 'George Clooney', role: 'Actor' },
      { id: 8, name: 'Hannah Montana', role: 'Singer' },
      { id: 9, name: 'Ian McKellen', role: 'Actor' },
      { id: 10, name: 'Jane Smith', role: 'Data Scientist', avatar: '/user-avatar.png', company: 'Inteleos', location: 'Chicago, IL', department: 'Data Science', industry: 'Technology', personalInterests: ['Coding', 'Reading', 'Writing', 'Traveling'], professionalInterests: ['Software Development', 'Machine Learning', 'AI'], keywords: ['JavaScript', 'Python', 'React', 'Node.js', 'AI'], keyInformation: 'John Doe is a software developer with 5 years of experience in the tech industry. He is skilled in JavaScript, Python, and React, and has a passion for building scalable and efficient software solutions.' },
      { id: 11, name: 'John Doe', role: 'Developer', avatar: '/user-avatar.png', company: 'Inteleos', location: 'New York, NY', department: 'Engineering', industry: 'Technology', personalInterests: ['Coding', 'Reading', 'Traveling'], professionalInterests: ['Software Development', 'Machine Learning', 'AI'], keywords: ['JavaScript', 'Python', 'React', 'Node.js', 'AI'], keyInformation: 'John Doe is a software developer with 5 years of experience in the tech industry. He is skilled in JavaScript, Python, and React, and has a passion for building scalable and efficient software solutions.' },
      { id: 12, name: 'Jane Doe', role: 'Designer' },
    ],
  });

  // Provide readable state to the Copilot
  useCopilotReadable({
    description: 'Current user information',
    value: appState.user,
  });

  useCopilotReadable({
    description: 'List of employees',
    value: appState.employees,
  });

  // Define actions for the Copilot
  const greetUserHandler = useCallback(async () => {
    toast({
      title: `Hello, ${appState.user.name}!`,
      description: 'Welcome to Customer Support AI!',
      variant: 'default',
      duration: 2500,
    });
  }, [appState.user.name]);
  
  useCopilotAction({
    name: 'greetUser',
    description: 'Greets the current user.',
    parameters: [],
    handler: greetUserHandler,
  });
  
  const addEmployeeHandler = useCallback(async ({ name, role }: { name: string, role: string }) => {
    setAppState(prevState => ({
      ...prevState,
      employees: [
        ...prevState.employees,
        { id: Date.now(), name, role },
      ],
    }));
    return `Added employee ${name} with role ${role}.`;
  }, [setAppState]);

  useCopilotAction({
    name: 'addEmployee',
    description: 'Adds a new employee to the list.',
    parameters: [
      {
        name: 'name',
        type: 'string',
        description: 'Name of the new employee',
      },
      {
        name: 'role',
        type: 'string',
        description: 'Role of the new employee',
      },
    ],
    handler: addEmployeeHandler,
  });

  const contextValue = useMemo(() => ({
    appState,
    setAppState,
    actions,
    suggestions,
  }), [appState]);

  useCopilotChatSuggestions(
    {
      instructions: "Suggest the most relevant next actions.",
      minSuggestions: 2,
      maxSuggestions: 5,
    },
    [appState],
  );

  return (
    <CopilotFeaturesContext.Provider value={contextValue}>
      {children}
    </CopilotFeaturesContext.Provider>
  );
}

================
File: app/services/actionService.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
// app/services/actionService.ts
import { useState, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import { ENDPOINTS } from '@/app/configs/endpoints';
import { useAgentStore } from '@/app/store/AgentStateStore';
import { WeatherResponse } from '@/app/types/copilot';

export class ActionExecutionError extends Error {
  constructor(message: string, public readonly context: Record<string, unknown>) {
    super(message);
    this.name = 'ActionExecutionError';
  }
}

export const useExecuteAction = () => {
  const updateAgentState = useAgentStore(state => state.updateState);
  const { toast } = useToast();

  return async (actionName: string, parameters: Record<string, any>) => {
    try {
      updateAgentState({
        currentStep: 'Initiating request...',
        confidence: 0.1,
        isProcessing: true,
        intermediateResults: []
      });

      const response = await fetch(`${ENDPOINTS.PRODUCTION.BASE}${ENDPOINTS.PRODUCTION.ACTIONS}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action_name: actionName,
          parameters: parameters || {},
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Server error: ${errorData.message || response.statusText || 'Unexpected error'}`);
      }

      const data = await response.json();
      
      // Handle different response formats
      let result;
      if (data.status === "success" && data.result) {
        result = data.result;
      } else if (data.weather) {
        // Handle weather-specific response
        result = {
          conditions: data.weather.conditions || 'Unknown',
          temperature: parseFloat(data.weather.temperature) || 0,
          wind_speed: parseFloat(data.weather.wind_speed) || 0,
          wind_direction: data.weather.wind_direction || 'N/A'
        } as WeatherResponse;
      } else if (data.error) {
        throw new Error(`Action failed: ${data.error}`);
      } else {
        throw new Error('Invalid response format');
      }

      // Update state with successful response
      updateAgentState({
        currentStep: 'Processing response...',
        confidence: 1,
        isProcessing: false,
        intermediateResults: [result]
      });

      return result;
    } catch (error) {
      console.error("Error executing action:", error);
      
      // Update state with error
      updateAgentState({
        currentStep: 'Error occurred',
        confidence: 0,
        isProcessing: false,
        intermediateResults: []
      });

      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "An unexpected error occurred",
        variant: "destructive"
      });

      throw error;
    }
  };
};

================
File: app/store/AgentStateStore.ts
================
// File: src/app/store/AgentStateStore.ts

import { create } from 'zustand';
import { ViewTypeEnum } from '@/app/types/agent';

interface AgentState {
  currentStep: string;
  intermediateResults: Record<string, unknown>[];
  confidence: number;
  isProcessing: boolean;
  showDynamicUI: boolean;
  isThinking: boolean;
  needsApproval: boolean;
  currentView: ViewTypeEnum;
}

interface AgentStateStore {
  state: AgentState;
  updateState: (partial: Partial<AgentState>) => void;
  resetState: () => void;
  setShowDynamicUI: (value: boolean) => void;
}

const initialState: AgentState = {
  currentStep: '',
  intermediateResults: [],
  confidence: 0,
  isProcessing: false,
  showDynamicUI: false,
  isThinking: false,
  needsApproval: false,
  currentView: ViewTypeEnum.DEFAULT,
};

export const useAgentStore = create<AgentStateStore>((set) => ({
  state: initialState,
  updateState: (partial) => 
    set((state) => ({
      state: {
        ...state.state,
        ...partial,
        intermediateResults: partial.intermediateResults
          ? [...state.state.intermediateResults, ...partial.intermediateResults]
          : state.state.intermediateResults,
      }
    })),
  resetState: () => set({ state: initialState }),
  setShowDynamicUI: (value: boolean) => set({ state: { ...initialState, showDynamicUI: value } }),
}));

================
File: app/types/agent.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/types/agent.ts
import { ReactNode } from 'react';

export enum ViewTypeEnum {
  DEFAULT = 'default',
  APPROVAL = 'approval',
  THINKING = 'thinking',
  ACTION = 'action',
  ERROR = 'error',
  RESPONSE = 'response',
}

export interface AgentUIState {
  currentView: ViewTypeEnum;
  actions: string[];
  context: Record<string, any>;
}

  export interface CoAgentState {
    render: () => ReactNode;
    needsApproval: boolean;
    setNeedsApproval: (value: boolean) => void;
    pendingAction: string | null;
    setPendingAction: (action: string | null) => void;
    executeAction: (action: ActionContext, context: ActionContext) => Promise<void>;
    renderDynamicUI: () => ReactNode;
    status: string;
    state: Record<string, unknown> | null;
    streamState: {
      intermediateResults: Record<string, unknown>[];
      currentStep: string;
      confidence: number;
    };
  }
  
  export interface ActionResult {
    success: boolean;
    data?: {
      response: string;
      metadata?: Record<string, unknown>;
    };
    error?: string;
    timestamp: string;
  }
  
  export interface ActionContext {
    type: string;
    payload: Record<string, unknown>;
    metadata?: Record<string, unknown>;
  }
  
  export interface SharedState {
    currentAction?: string;
    lastAction?: ActionResult;
    lastError?: {
      action: string;
      error: string;
      timestamp: string;
    };
    isProcessing: boolean;
  }

  export interface AgentStreamState {
    currentStep: string;
    confidence: number;
    intermediateResults: any[];
  }

================
File: app/types/copilot.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// /app/types/copilot.ts

import { CopilotContextParams, CopilotChatSuggestionConfiguration } from '@copilotkit/react-core';
import { Message as OpenAIMessage } from '@copilotkit/runtime-client-gql';
import React from 'react';
import { Presentation } from '@/app/copilot/Presentation';
import { Slide } from '@/app/copilot/Slide';
import { Header } from '@/app/copilot/HeaderPPTGen';
import { SlideNumberIndicator } from '@/app/copilot/SlideNumberIndicator';
import { GenerateSlideButton } from '@/app/copilot/GenerateSlideButton';
import { DeleteSlideButton } from '@/app/copilot/DeleteSlideButton';
import { NavButton } from '@/app/copilot/NavButton';
import { PerformResearchSwitch } from '@/app/copilot/PerformResearchSwitch';
import { AddSlideButton } from '@/app/copilot/AddSlideButton';
import { SpeakCurrentSlideButton } from '@/app/copilot/SpeakCurrentSlideButton';
import { copilotComponents } from '@/app/copilot/components';
import * as XLSX from 'xlsx';
import pptxgen from 'pptxgenjs';
import { useCopilotAction } from '@copilotkit/react-core';
import { useSlideTransition } from '@/hooks/useSlideTransition';
import { SlidePreviewCarousel } from '@/app/copilot/SlidePreviewCarousel';
import { PowerPointActions } from '@/app/copilot/PowerPointActions';
import { SlidePreview } from '@/app/copilot/SlidePreview';
import { usePowerPointState } from '@/hooks/usePowerPointState';
import { Parameter, MappedParameterTypes } from '@copilotkit/shared';
import { useAISuggestions } from '@/app/copilot/useAISuggestions';
import useCopilotPollAction from '@/app/copilot/useCopilotPollAction';
import PollComponent from '@/app/copilot/PollComponent';
import { useMakeCopilotReadable } from '@/hooks/useMakeCopilotReadable';
import { FrontendAction } from '@/app/contexts/InteleosContext';
import useAppendSlide from '@/app/copilot/useAppendSlide';
import { useGenerateChartAction } from '@/hooks/useGenerateChartAction';
import { useGenerateSpreadsheetAction } from '@/hooks/useGenerateSpreadsheetAction';
import { useGeneratePresentationAction } from '@/hooks/useGeneratePresentationAction';
import useUpdateSlide from '../copilot/useUpdateSlide';
import useScheduleAppointmentAction from '../copilot/useScheduleAppointmentAction';
import useResearchAction from '../copilot/useResearchAction';
import { Role } from '@copilotkit/runtime-client-gql';

// types.ts

/*export interface CopilotAction {
  name: string;
  description: string;
  addRemoteActionEndpoint?: (endpoint: { url: string }) => void;
  parameters: Array<{
    name: string;
    type: string;
    description: string;
  }>;
}*/

export interface CopilotMessage {
  id: string;
  content: string;
  role: typeof Role;
  metadata?: Record<string, unknown>;
}

export type WeatherResponse = {
  conditions: string;
  temperature: number;
  wind_direction: string;
  wind_speed: number;
};

export type AgentState = {
  final_response: WeatherResponse;
  input: string;
  messages: any[];
};

export interface ReadableConfig {
    description: string;
    value: any;
    categories: string[];
  }

  export interface CopilotReadableResult {
    error?: Error;
    isLoading?: boolean;
  }
  
  /*export interface CopilotReadableOptions {
    description: string;
    value: any;
    categories: string[];
  }*/

export interface CopilotReadableOptions<T = any> {
  description: string;
  value: T;
  parentId?: string;
  categories?: string[];
  convert?: (description: string, value: T) => string;
}

export type Action<T extends Parameter[] | [] = []> = {
  name: string;
  description?: string;
  parameters?: T;
  handler: T extends [] ? () => any | Promise<any> : (args: MappedParameterTypes<T>) => any | Promise<any>;
  addRemoteActionEndpoint?: (endpoint: { url: string }) => void;
};

export interface CustomActionResult<T = any> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface RealtimeActionResponse {
  response: string;
  metadata?: Record<string, unknown>;
}

export interface SlideModel {
  content: string;
  backgroundImageUrl: string;
  spokenNarration: string;
  title?: string;
}

// Define a type for slide data
export interface SlideData {
  title: string;
  content: string;
  spokenNarration?: string;
}

export interface ActionResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface CopilotAction {
  name: string;
  description: string;
  parameters: Array<{
    name: string;
    type: string;
    description: string;
  }>;
  handler: (args: any) => Promise<any>;
  addRemoteActionEndpoint?: (endpoint: { url: string }) => void;
}

export interface CopilotActionParameter {
  name: string;
  type: string;
  description: string;
}

export interface CopilotConfig {
  actions: CopilotAction[];
  initialContext?: Record<string, any>;
}

export interface CopilotState {
  actions: CopilotAction[];
  context: Record<string, unknown>;
  isInitialized: boolean;
}

export interface MessagePayload {
  message: string;
}

export interface ActionContext {
  payload: MessagePayload;
  type: string;
}

export type SpreadsheetData = {
    headers: string[];
    rows: (string | number)[][];
};

export type PresentationSlide = {
  title: string;
  content: string[];
};

export type PresentationData = {
  title: string;
  slides: PresentationSlide[];
};

export type EmailParams = {
    to: string;
    subject: string;
    body: string;
};

type SendEmailFunction = (params: EmailParams) => Promise<void>;

type InChatRenderFunction = (args: any) => JSX.Element;

export interface ExtendedCopilotContextParams extends Omit<CopilotContextParams, 'messages' | 'setMessages' | 'chatComponentsCache' | 'actions' | 'coAgentStateRenders' | 'generateSpreadsheet' | 'generatePresentation'> {
  appendSlide: typeof useAppendSlide;
  useAppendSlide: typeof useAppendSlide;
  actions: Record<string, FrontendAction<any>>;
  coAgentStateRenders: Record<string, any>;
  pollAction: typeof useCopilotPollAction;
  pollComponent: typeof PollComponent;
  useCopilotPollAction: typeof useCopilotPollAction;
  useAISuggestions: typeof useAISuggestions;
  sendEmail: SendEmailFunction;
  getChatCompletionFunctionDescriptions: () => any[];
  entryPoints: Record<string, any>;
  setEntryPoint: (name: string, value: any) => void;
  removeEntryPoint: (name: string) => void;
  chatComponentsCache: React.MutableRefObject<Record<string, string | InChatRenderFunction>>;
  getFunctionCallHandler: () => (...args: any[]) => Promise<any>;
  setFunctionCallHandler: (name: string, handler: (...args: any[]) => Promise<any>) => void;
  removeFunctionCallHandler: (name: string) => void;
  getChatCompletion: () => string;
  setChatCompletion: (completion: string) => void;
  removeChatCompletion: () => void;
  getChatComponent: () => string;
  setChatComponent: (component: string | InChatRenderFunction) => void;
  removeChatComponent: () => void;
  getChatSuggestion: () => string;
  setChatSuggestion: (suggestion: string) => void;
  removeChatSuggestion: () => void;
  messages: OpenAIMessage[];
  setMessages: React.Dispatch<React.SetStateAction<OpenAIMessage[]>>;
  addContext: (context: string) => string;
  removeContext: (context: string) => void;
  getContextString: () => string;
  addDocumentContext: (document: any) => string;
  removeDocumentContext: (documentId: string) => string;
  getDocumentsContext: (categories: string[]) => any[];
  chatSuggestionConfiguration: Record<string, any>;
  addChatSuggestionConfiguration: (id: string, suggestion: CopilotChatSuggestionConfiguration) => void;
  removeChatSuggestionConfiguration: (id: string) => void;
  copilotApiConfig: {
      chatApiEndpoint: string;
      chatApiEndpointV2: string;
      headers: Record<string, string>;
      body: Record<string, any>;
  };
  isLoading: boolean;
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
  chatInstructions: string;
  setChatInstructions: React.Dispatch<React.SetStateAction<string>>;
  generateSpreadsheet: (data: SpreadsheetData, filename: string) => Promise<string>;
  generatePresentation: (data: PresentationData, filename: string) => Promise<string>;
  Presentation: typeof Presentation;
  Slide: typeof Slide;
  Header: typeof Header;
  SlideNumberIndicator: typeof SlideNumberIndicator;
  GenerateSlideButton: typeof GenerateSlideButton;
  DeleteSlideButton: typeof DeleteSlideButton;
  NavButton: typeof NavButton;
  PerformResearchSwitch: typeof PerformResearchSwitch;
  AddSlideButton: typeof AddSlideButton;
  SpeakCurrentSlideButton: typeof SpeakCurrentSlideButton;
  copilotComponents: typeof copilotComponents;
  XLSX: typeof XLSX;
  pptxgen: typeof pptxgen;
  useCopilotAction: typeof useCopilotAction;
  useSlideTransition: typeof useSlideTransition;
  SlidePreviewCarousel: typeof SlidePreviewCarousel;
  PowerPointActions: typeof PowerPointActions;
  SlidePreview: typeof SlidePreview;
  usePowerPointState: typeof usePowerPointState;
  slides: SlideData[];
  setSlides: React.Dispatch<React.SetStateAction<SlideData[]>>;
  addSlide: (slide: SlideData) => void;
  currentSlide: number;
  setCurrentSlide: React.Dispatch<React.SetStateAction<number>>;
  direction: number;
  setDirection: React.Dispatch<React.SetStateAction<number>>;
  nextSlide: () => void;
  prevSlide: () => void;
  initialSlides: SlideData[];
  setInitialSlides: React.Dispatch<React.SetStateAction<SlideData[]>>;
  useMakeCopilotReadable: (options: CopilotReadableOptions) => ReturnType<typeof useMakeCopilotReadable>;
  useGenerateChartAction: typeof useGenerateChartAction;
  useGenerateSpreadsheetAction: typeof useGenerateSpreadsheetAction;
  useGeneratePresentationAction: typeof useGeneratePresentationAction;
  useUpdateSlide: typeof useUpdateSlide;
  useScheduleAppointmentAction: typeof useScheduleAppointmentAction;
  useResearchAction: typeof useResearchAction;
  sharedState: Record<string, any>;
  updateState: (newState: Record<string, any>) => void;
}

export type { SendEmailFunction, InChatRenderFunction };

================
File: app/types/index.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/types/index.ts
// TODO: Intended to be a single file that exports all the types used in the app. Will require some refactoring to make it work.

// types/index.ts
export * from './agent';
export * from './copilot';
// export * from './weather';

// types/agent.ts
export interface AgentUIState {
  currentView: 'default' | 'thinking' | 'action';
  actions: string[];
  context: Record<string, unknown>;
}

export interface ActionContext {
  type: string;
  payload: Record<string, unknown>;
}

export interface ActionResult {
  success: boolean;
  data?: {
    response: string;
    metadata?: Record<string, unknown>;
  };
  error?: string;
  timestamp: string;
}

// types/copilot.ts
export interface WeatherResponse {
  conditions: string;
  temperature: number;
  wind_speed: number;
  wind_direction: string;
}

export interface CopilotAction {
  name: string;
  description: string;
  parameters: ActionParameter[];
  handler: (args: any) => Promise<any>;
}

interface ActionParameter {
  name: string;
  type: string;
  description: string;
}

================
File: app/types/langgraph.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// /app/types/langgraph.ts

export interface Assistant {
    assistant_id: string;
    graph_id: string;
    created_at: string;
    updated_at: string;
    config: {
      configurable: {
        model_name: string;
      };
    };
    metadata: Record<string, any>;
  }
  
  export interface RunEvent {
    event: string;
    data: any;
  }

================
File: app/types/supabaseTypes.ts
================
// /app/types/supabaseTypes.ts

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
    public: {
        Tables: {
          profiles: {  // Move this inside Tables
            Row: {
              id: string
              full_name: string | null
              email: string | null
              role: string | null
              avatar: string | null
              company: string | null
              location: string | null
              department: string | null
              industry: string | null
              personal_interests: string[] | null
              professional_interests: string[] | null
              keywords: string[] | null
              key_information: string | null
              created_at: string | null
              updated_at: string | null
            }
            Insert: {
              id: string
              full_name?: string | null
              email?: string | null
              role?: string | null
              avatar?: string | null
              company?: string | null
              location?: string | null
              department?: string | null
              industry?: string | null
              personal_interests?: string[] | null
              professional_interests?: string[] | null
              keywords?: string[] | null
              key_information?: string | null
              created_at?: string | null
              updated_at?: string | null
            }
            Update: {
              id?: string
              full_name?: string | null
              email?: string | null
              role?: string | null
              avatar?: string | null
              company?: string | null
              location?: string | null
              department?: string | null
              industry?: string | null
              personal_interests?: string[] | null
              professional_interests?: string[] | null
              keywords?: string[] | null
              key_information?: string | null
              created_at?: string | null
              updated_at?: string | null
            }
            Relationships: [
              {
                foreignKeyName: "profiles_id_fkey"
                columns: ["id"]
                isOneToOne: true
                referencedRelation: "users"
                referencedColumns: ["id"]
              }
            ]
          }
      comments: {
        Row: {
          content: string
          created_at: string | null
          id: string
          poll_id: string
          updated_at: string | null
          user_id: string
        }
        Insert: {
          content: string
          created_at?: string | null
          id?: string
          poll_id: string
          updated_at?: string | null
          user_id: string
        }
        Update: {
          content?: string
          created_at?: string | null
          id?: string
          poll_id?: string
          updated_at?: string | null
          user_id?: string
        }
        Relationships: []
      }
      countries: {
        Row: {
          id: number
          name: string
        }
        Insert: {
          id?: never
          name: string
        }
        Update: {
          id?: never
          name?: string
        }
        Relationships: []
      }
      "inteleos-context-document": {
        Row: {
          content: string | null
          created_at: string
          cx_data: string | null
          id: number
        }
        Insert: {
          content?: string | null
          created_at?: string
          cx_data?: string | null
          id?: number
        }
        Update: {
          content?: string | null
          created_at?: string
          cx_data?: string | null
          id?: number
        }
        Relationships: []
      }
      poll_options: {
        Row: {
          id: string
          option_text: string
          poll_id: string | null
          votes: number | null
        }
        Insert: {
          id?: string
          option_text: string
          poll_id?: string | null
          votes?: number | null
        }
        Update: {
          id?: string
          option_text?: string
          poll_id?: string | null
          votes?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "poll_options_poll_id_fkey"
            columns: ["poll_id"]
            isOneToOne: false
            referencedRelation: "poll_results"
            referencedColumns: ["poll_id"]
          },
          {
            foreignKeyName: "poll_options_poll_id_fkey"
            columns: ["poll_id"]
            isOneToOne: false
            referencedRelation: "polls"
            referencedColumns: ["id"]
          },
        ]
      }
      polls: {
        Row: {
          created_at: string | null
          id: string
          question: string
          topic: string | null
          total_votes: number | null
        }
        Insert: {
          created_at?: string | null
          id?: string
          question: string
          topic?: string | null
          total_votes?: number | null
        }
        Update: {
          created_at?: string | null
          id?: string
          question?: string
          topic?: string | null
          total_votes?: number | null
        }
        Relationships: []
      }
      votes: {
        Row: {
          created_at: string | null
          id: string
          option_id: string
          poll_id: string
          user_id: string
        }
        Insert: {
          created_at?: string | null
          id?: string
          option_id: string
          poll_id: string
          user_id: string
        }
        Update: {
          created_at?: string | null
          id?: string
          option_id?: string
          poll_id?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "votes_option_id_fkey"
            columns: ["option_id"]
            isOneToOne: false
            referencedRelation: "poll_options"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "votes_option_id_fkey"
            columns: ["option_id"]
            isOneToOne: false
            referencedRelation: "poll_results"
            referencedColumns: ["option_id"]
          },
          {
            foreignKeyName: "votes_poll_id_fkey"
            columns: ["poll_id"]
            isOneToOne: false
            referencedRelation: "poll_results"
            referencedColumns: ["poll_id"]
          },
          {
            foreignKeyName: "votes_poll_id_fkey"
            columns: ["poll_id"]
            isOneToOne: false
            referencedRelation: "polls"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      poll_results: {
        Row: {
          option_id: string | null
          option_text: string | null
          poll_id: string | null
          question: string | null
          topic: string | null
          total_votes: number | null
          vote_percentage: number | null
          votes: number | null
        }
        Relationships: []
      }
    }
    Functions: {
      has_user_voted: {
        Args: {
          p_poll_id: string
          p_user_id: string
        }
        Returns: boolean
      }
      increment_vote:
        | {
            Args: {
              option_id: string
            }
            Returns: undefined
          }
        | {
            Args: {
              p_option_id: string
              p_user_id: string
            }
            Returns: undefined
          }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

================
File: app/utils/actionUtils.ts
================
// app/utils/actionUtils.ts
export const actionRequiresApproval = (action: string): boolean => {
    const actionsRequiringApproval = [
      'delete',
      'update',
      'critical_operation',
      'sensitive_data_access',
    ];
    return actionsRequiringApproval.includes(action);
  };

================
File: app/utils/error-classes/errorClasses.tsx
================
// /utils/error-classes/errorClasses.tsx

class CopilotReadableError extends Error {
    constructor(message: string) {
      super(`CopilotReadable Error: ${message}`);
      this.name = 'CopilotReadableError';
    }
  }

  export { CopilotReadableError };

  export class SupabaseError extends Error {
    constructor(message: string) {
      super(message);
      this.name = 'SupabaseError';
    }
  }
  
  export class DataNotFoundError extends Error {
    constructor(message: string) {
      super(message);
      this.name = 'DataNotFoundError';
    }
  }

================
File: app/utils/globalAudio.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

export let globalAudio: any = undefined;

export function resetGlobalAudio() {
  if (globalAudio) {
    globalAudio.pause();
    globalAudio.currentTime = 0;
  } else {
    globalAudio = new Audio();
  }
}

export async function speak(text: string) {
  const encodedText = encodeURIComponent(text);
  const url = `/api/tts?text=${encodedText}`;
  globalAudio.src = url;
  globalAudio.play();
  await new Promise<void>((resolve) => {
    globalAudio.onended = function () {
      resolve();
    };
  });
  await new Promise((resolve) => setTimeout(resolve, 500));
}

================
File: app/utils/logger.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// utils/logger.ts

const serializeError = (error: any) => {
  if (error instanceof Error) {
      return { message: error.message, stack: error.stack };
  }
  return error;
};

const logger = {
  info: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.log(...args);
      } else {
          // Client-side logging
          console.log(...args);
      }
  },
  error: (...args: any[]) => {
      const serializedArgs = args.map(arg => serializeError(arg));
      if (typeof window === 'undefined') {
          // Server-side logging
          console.error(...serializedArgs);
      } else {
          // Client-side logging
          console.error(...serializedArgs);
      }
  },
  warn: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.warn(...args);
      } else {
          // Client-side logging
          console.warn(...args);
      }
  },
  debug: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.debug(...args);
      } else {
          // Client-side logging
          console.debug(...args);
      }
  },
  log: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.log(...args);
      } else {
          // Client-side logging
          console.log(...args);
      }
  },
  trace: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.trace(...args);
      } else {
          // Client-side logging
          console.trace(...args);
      }
  },
  table: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.table(...args);
      } else {
          // Client-side logging
          console.table(...args);
      }
  },
  group: (...args: any[]) => {
      if (typeof window === 'undefined') {
          // Server-side logging
          console.group(...args);
      } else {
          // Client-side logging
          console.group(...args);
      }
  }
  // Add other log levels as needed (warn, debug, etc.)
};

export default logger;

================
File: app/utils/supabase/client.ts
================
// /utils/supabase/client.ts

import { createClient, SupabaseClient } from '@supabase/supabase-js';

interface SupabaseConfig {
    url: string;
    key: string;
}

const supabaseConfig: SupabaseConfig = {
    url: process.env.NEXT_PUBLIC_SUPABASE_URL || '',
    key: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
};

if (!supabaseConfig.url || !supabaseConfig.key) {
    throw new Error('Supabase configuration is incomplete. Check your environment variables.');
}

export const supabase: SupabaseClient = createClient(supabaseConfig.url, supabaseConfig.key, {
    auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true,
    },
    // Removed global.headers to use default headers
});

export const setSupabaseToken = (access_token: string) => {
    supabase.auth.setSession({ access_token, refresh_token: '' });
};

export const refreshSession = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
        const { data, error } = await supabase.auth.refreshSession();
        if (error) {
            console.error('Error refreshing session:', error);
            return null;
        }
        return data.session;
    }
    return null;
};

export const getUser = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
};

================
File: app/utils/supabase/server.ts
================
// /utils/supabase/server.ts

import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/app-sidebar.tsx
================
// /components/ui/app-sidebar.tsx

'use client'
import React, { useState } from "react"
import { Calendar, Home, Inbox, Search, Settings } from "lucide-react"
import InfoModal from "@/app/components/InfoModal"
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"
import { cn } from "@/lib/utils"
import { Button } from "./button"
// Menu items.
  

export function AppSidebar() {
    const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)

    // Function to handle opening the modal
    const handleOpenInfoModal = () => {
      setIsInfoModalOpen(true)
    }
  
    // Function to handle closing the modal
    const handleCloseInfoModal = () => {
      setIsInfoModalOpen(false)
    }

    const items = [
        {
            title: "FAQ",
            icon: () => (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M12 8a4 4 0 100 8 4 4 0 000-8z" />
              </svg>
            ),
            action: () => handleOpenInfoModal(),
          },
        {
          title: "N/A 1",
          url: "#",
          icon: Home,
        },
        {
          title: "N/A 2",
          url: "#",
          icon: Inbox,
        },
        {
          title: "N/A 3",
          url: "#",
          icon: Calendar,
        },
        {
          title: "N/A 4",
          url: "#",
          icon: Search,
        },
        {
          title: "N/A 5",
          url: "#",
          icon: Settings,
        },
      ]

  return (
    <Sidebar>
      <SidebarContent className='custom-scrollbar sidebar-content'>
        <SidebarGroup>
          <SidebarGroupLabel className={cn('text-black text-lg')}>Demo Guide</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  {item.action ? (
                    <SidebarMenuButton onClick={item.action}>
                      {item.icon()}
                      <span>{item.title}</span>
                    </SidebarMenuButton>
                  ) : (
                    <SidebarMenuButton asChild>
                      <a href={item.url}>
                        <item.icon />
                        <span>{item.title}</span>
                      </a>
                    </SidebarMenuButton>
                  )}
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>

      {/* Render the InfoModal */}
      <InfoModal
        className="text-white"
        isOpen={isInfoModalOpen}
        onClose={handleCloseInfoModal}
        title="How to use the Inteleos AI Assistant"
        footer={
          <Button onClick={handleCloseInfoModal}>Close</Button>
        }
      >
        <p className="text-white font-bold text-center">Inteleos customer support AI is capable of answering questions about Inteleos&apos; certifications, exams, and more.</p>
        <br />
        <p className="text-white font-bold text-center">Try, &quot;Research Inteleos POCUS certification and requirements.&quot;</p>
        <br />
        <p className="text-white font-bold text-center">You can also ask Inteleos AI to research the Inteleos&apos; mission, values, and more.</p>
      </InfoModal>
    </Sidebar>
  )
}

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => <ChevronLeft className="h-4 w-4" />,
        IconRight: () => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/resizable.tsx
================
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: components/ui/scroll-area.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// scroll-area.tsx
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => {
  // Create a stable ref that won't cause re-renders
  const stableRef = React.useRef(null);
  
  // Use callback ref to handle ref changes safely
  const setRefs = React.useCallback((element: any) => {
    stableRef.current = element;
    // Handle both function and object refs
    if (typeof ref === 'function') {
      ref(element);
    } else if (ref) {
      ref.current = element;
    }
  }, [ref]);

  return (
    <ScrollAreaPrimitive.Root
      className={cn("relative overflow-hidden", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        ref={setRefs}
        className="h-full w-full rounded-[inherit]"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  );
});
ScrollArea.displayName = "ScrollArea";

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = "ScrollBar";

export { ScrollArea, ScrollBar };

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "10rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:sidebar-primary",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "inset",
      collapsible = "none",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col sidebar-primary",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] sidebar-primary p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-transparent bg-opacity-50 backdrop-filter backdrop-blur-sm shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ComponentRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn(
        "mx-2 w-auto bg-sidebar-border bg-opacity-50",
        className
      )}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex sidebar min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm sidebar-primary", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative sidebar-primary", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-all ease-linear hover:bg-sidebar-accent hover:text-sidebar-accent-foreground text-black focus-visible:ring-2",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: hooks/useActionHandler.ts
================
// hooks/useActionHandler.ts
import { useCallback } from 'react';
import { ActionContext, ActionResult } from '@/app/types/agent';
import { useToast } from '@/hooks/use-toast';

export const useActionHandler = () => {
  const { toast } = useToast();

  const handleAction = useCallback(async (
    action: ActionContext,
    endpoint: string
  ): Promise<ActionResult> => {
    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(action),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      return {
        success: true,
        data,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      
      toast({
        title: 'Action Failed',
        description: errorMessage,
        variant: 'destructive',
        duration: 2500,
      });

      return {
        success: false,
        error: errorMessage,
        timestamp: new Date().toISOString(),
      };
    }
  }, [toast]);

  return { handleAction };
};

================
File: hooks/useAgentActions.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/hooks/useAgentUI.ts
import { useState, useCallback } from 'react';
import { AgentUIState } from '@/app/types/agent';
import { motion } from 'framer-motion';
import { ThinkingView } from '@/app/components/ai/views/ThinkingView';
import { ActionView } from '@/app/components/ai/views/ActionView';
import { HumanApprovalModal } from '@/app/components/ai/HumanApprovalModal';
import { useRealtimeActions } from '@/hooks/useRealTimeActions';
import { actionRequiresApproval } from "@/app/utils/actionUtils";
import { ViewTypeEnum } from '@/app/types/agent';

export const useAgentActions = () => {
  const [uiState, setUIState] = useState<AgentUIState>({
    currentView: ViewTypeEnum.DEFAULT,
    actions: [],
    context: {}
  });
  const { handleRealtimeAction } = useRealtimeActions();

  const updateUIState = useCallback((
    newState: Partial<AgentUIState>
  ) => {
    setUIState(prev => ({
      ...prev,
      ...newState
    }));
  }, []);

  const renderDynamicUI = useCallback(() => {
    const { currentView, context, actions } = uiState;

    const commonProps = {
      className: "mt-4 w-full",
      animate: { opacity: 1, y: 0 },
      initial: { opacity: 0, y: 20 },
      exit: { opacity: 0, y: -20 },
      transition: { duration: 0.3 }
    };

    switch(currentView) {
      case ViewTypeEnum.THINKING:
        return (
          <motion.div {...commonProps}>
            <ThinkingView 
              context={context}
              key="thinking-view"
            />
          </motion.div>
        );
      case ViewTypeEnum.ACTION:
        return (
          <motion.div {...commonProps}>
            <ActionView 
              actions={actions}
              key="action-view"
              onActionSelect={async (action) => {
                if (actionRequiresApproval(action)) {
                  updateUIState({ currentView: ViewTypeEnum.APPROVAL, context: { ...context, pendingAction: action } });
                } else {
                  await handleRealtimeAction(action, { type: action, payload: context });
                  updateUIState({ currentView: ViewTypeEnum.DEFAULT });
                }
              }}
            />
          </motion.div>
        );
      case ViewTypeEnum.APPROVAL:
        return (
          <motion.div {...commonProps}>
            <HumanApprovalModal
              isOpen={true}
              onClose={() => updateUIState({ currentView: ViewTypeEnum.DEFAULT })}
              onApprove={async () => {
                const pendingAction = context.pendingAction as string;
                await handleRealtimeAction(pendingAction, { type: pendingAction, payload: context });
                updateUIState({ currentView: ViewTypeEnum.DEFAULT });
              }}
              onReject={() => updateUIState({ currentView: ViewTypeEnum.DEFAULT })}
              data={context.pendingAction as any}
            />
          </motion.div>
        );
      default:
        return null;
    }
  }, [uiState, handleRealtimeAction, updateUIState]);

  return {
    uiState,
    updateUIState,
    renderDynamicUI
  };
};

================
File: hooks/useAgentUI.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// app/hooks/useAgentUI.ts
import { useState, useCallback, useRef } from 'react';
import { AgentUIState, ViewTypeEnum } from '@/app/types/agent';
import { motion } from 'framer-motion';
import { ThinkingView } from '@/app/components/ai/views/ThinkingView';
import { ActionView } from '@/app/components/ai/views/ActionView';
import { HumanApprovalModal } from '@/app/components/ai/HumanApprovalModal';
import { actionRequiresApproval } from "@/app/utils/actionUtils";
import { useRealtimeActions } from '@/hooks/useRealTimeActions';

export const useAgentUI = () => {
  const [uiState, setUIState] = useState<AgentUIState>({
    currentView: ViewTypeEnum.DEFAULT,
    actions: [],
    context: {}
  });
  
  const { handleRealtimeAction } = useRealtimeActions();
  const prevStateRef = useRef<AgentUIState>(uiState);

  const updateUIState = useCallback((
    newState: Partial<AgentUIState>
  ) => {
    setUIState(prev => {
      const merged = {
        ...prev,
        ...newState
      };
      
      // Only update if the state has actually changed
      if (JSON.stringify(prevStateRef.current) === JSON.stringify(merged)) {
        return prev;
      }
      
      prevStateRef.current = merged;
      return merged;
    });
  }, []);

  const renderDynamicUI = useCallback(() => {
    const { currentView, context, actions } = uiState;

    const commonProps = {
      className: "mt-4 w-full",
      animate: { opacity: 1, y: 0 },
      initial: { opacity: 0, y: 20 },
      exit: { opacity: 0, y: -20 },
      transition: { duration: 0.3 }
    };

    switch(currentView) {
      case ViewTypeEnum.THINKING:
        return (
          <motion.div {...commonProps}>
            <ThinkingView 
              context={context}
              key="thinking-view"
            />
          </motion.div>
        );
      case ViewTypeEnum.ACTION:
        return (
          <motion.div {...commonProps}>
            <ActionView 
              actions={actions}
              key="action-view"
              onActionSelect={async (action) => {
                if (actionRequiresApproval(action)) {
                  updateUIState({ currentView: ViewTypeEnum.APPROVAL, context: { ...context, pendingAction: action } });
                } else {
                  await handleRealtimeAction(action, { type: action, payload: context });
                  updateUIState({ currentView: ViewTypeEnum.DEFAULT });
                }
              }}
            />
          </motion.div>
        );
      case ViewTypeEnum.APPROVAL:
        return (
          <motion.div {...commonProps}>
            <HumanApprovalModal
              isOpen={true}
              onClose={() => updateUIState({ currentView: ViewTypeEnum.DEFAULT })}
              onApprove={async () => {
                const pendingAction = context.pendingAction as string;
                await handleRealtimeAction(pendingAction, { type: pendingAction, payload: context });
                updateUIState({ currentView: ViewTypeEnum.DEFAULT });
              }}
              onReject={() => updateUIState({ currentView: ViewTypeEnum.DEFAULT })}
              data={context.pendingAction as any}
            />
          </motion.div>
        );
      default:
        return null;
    }
  }, [uiState, handleRealtimeAction, updateUIState]);

  return {
    uiState,
    updateUIState,
    renderDynamicUI
  };
};

================
File: hooks/useAIActions.ts
================
// hooks/useAgentActions.ts

'use client';

// TODO: This is a potential evolution of the useAgentActions hook. Needs polish.
import { useCallback } from 'react';
import { useAgentStore } from '@/app/store/AgentStateStore';
import { ActionResult } from '@/app/types';

export const useAIActions = () => {
  const { updateState } = useAgentStore();

  const executeAction = useCallback(async (
    actionName: string, 
    params: Record<string, unknown>
  ): Promise<ActionResult> => {
    try {
      updateState({ isProcessing: true });
      
      const response = await fetch('/api/actions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: actionName, params })
      });

      const result = await response.json();
      
      updateState({ isProcessing: false });
      
      return {
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      updateState({ isProcessing: false });
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      };
    }
  }, [updateState]);

  return { executeAction };
};

================
File: hooks/useCoAgentStateRender.ts
================
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useCallback, useEffect, useState, useRef } from 'react';
import type { CoAgentState, ActionContext } from '@/app/types/agent';
import { WeatherResponse } from '@/app/types/copilot';
import { useAgentStore } from '@/app/store/AgentStateStore';

export interface RenderState {
  status: string;
  state: WeatherAgentState;
  metadata?: {
    step: string;
    confidence: number;
    error?: string;
  };
}

export interface WeatherAgentState extends Record<string, unknown> {
  final_response: WeatherResponse;
}

interface UseCoAgentStateRenderOptions {
  name: string;
  streamEndpoint: string;
  render: (state: RenderState) => React.ReactNode;
}

export function useCoAgentStateRender({
  name,
  streamEndpoint,
  render,
}: UseCoAgentStateRenderOptions): CoAgentState {
  const [currentState, setCurrentState] = useState<RenderState>({
    status: 'idle',
    state: { final_response: {} as WeatherResponse } as WeatherAgentState,
    metadata: {
      step: '',
      confidence: 0
    }
  });

  const [needsApproval, setNeedsApproval] = useState(false);
  const [pendingAction, setPendingAction] = useState<string | null>(null);
  
  const updateAgentState = useAgentStore(state => state.updateState);
  const resetAgentState = useAgentStore(state => state.resetState);
  
  const processingRef = useRef<boolean>(false);
  const activeStreamRef = useRef<boolean>(false);
  
  const cleanup = useCallback(() => {
    processingRef.current = false;
    activeStreamRef.current = false;
  }, []);

  const renderDynamicUI = useCallback(() => {
    return render(currentState);
  }, [currentState, render]);
  
  const executeAction = useCallback(async (action: ActionContext, context: ActionContext): Promise<void> => {
    if (processingRef.current) return;

    try {
        cleanup();
        processingRef.current = true;
        activeStreamRef.current = true;

            // Update thinking state when starting
        updateAgentState({
          isThinking: true,
          currentStep: 'Processing request...',
          confidence: 0.5,
          isProcessing: true
        });

        // Update both local and global state
        const newState = {
            status: 'thinking',
            state: { final_response: {} as WeatherResponse } as WeatherAgentState,
            metadata: {
                step: 'Processing request...',
                confidence: 0.5
            }
        };

        setCurrentState(newState);
        updateAgentState({
            currentStep: 'Processing request...',
            confidence: 0.5,
            isProcessing: true,
            intermediateResults: []
        });

        const response = await fetch(streamEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'text/event-stream',
            },
            body: JSON.stringify({
                agent_name: name,
                action: action.type,
                context: context.payload,
                stream: true
            })
        });

        if (!response.ok) {
            const message = `HTTP error! status: ${response.status}`;
            throw new Error(message);
        }

        // Ensure response body exists before accessing it
        if (!response.body) {
            throw new Error('Response body is missing');
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let buffer = '';
        let finalResponseSet = false;

        while (activeStreamRef.current) {
            const { value, done } = await reader.read();
            if (done) break;

            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split('\n');
            buffer = lines.pop() || '';

            for (const line of lines) {
                if (line.trim()) {
                    try {
                        const event = JSON.parse(line);
                        if (event.type === 'update' && event.data) {
                            const weatherData = {
                                conditions: event.data.conditions || 'Unknown',
                                temperature: parseFloat(event.data.temperature) || 0,
                                wind_speed: parseFloat(event.data.wind_speed) || 0,
                                wind_direction: event.data.wind_direction || 'N/A'
                            } as WeatherResponse;
              }
                 // Check for other event types like 'thinking' or 'response'
              else if (event.type === 'thinking') {  
                setCurrentState({
                  status: 'thinking',
                  state: { final_response: {} as WeatherResponse } as WeatherAgentState,
                  metadata: {
                    step: 'Processing request...',
                    confidence: 0.5
                  }
                });

                updateAgentState({
                  currentStep: event.data?.step || 'Thinking...', 
                  confidence: event.data?.confidence || 0.5,
                  isProcessing: true,
                  intermediateResults: []
                });
              } else if (event.type === 'response') {
                setCurrentState({
                  status: 'response',
                  state: { final_response: {} as WeatherResponse } as WeatherAgentState,
                  metadata: {
                    step: 'Received weather data',
                    confidence: 1
                  }
                });

                const newState = {
                  status: 'response',
                  state: {
                    final_response: {} as WeatherResponse
                  } as WeatherAgentState,
                  metadata: {
                    step: 'Received weather data',
                    confidence: 1
                  }
                };

                setCurrentState(newState);
                updateAgentState({
                  currentStep: 'Received weather data',
                  confidence: 1,
                  isProcessing: false,
                  intermediateResults: [{} as WeatherResponse]
                });

                updateAgentState({
                  currentStep: event.data?.step || 'Response received', 
                  confidence: event.data?.confidence || 1,
                  isProcessing: false,
                  intermediateResults: [{} as WeatherResponse]
                });
                
                finalResponseSet = true;
              }
            } catch (e) {
              console.error('Error parsing stream data:', e);
            }
          }
        }
      }

    } catch (error) {
      console.error('Action error:', error);
      updateAgentState({
        isThinking: false,
        currentStep: 'Error occurred',
        confidence: 0,
        isProcessing: false
      });
    } finally {
      cleanup();
      // Ensure thinking state is reset
      updateAgentState({
        isThinking: false,
        isProcessing: false
      });
    }
  }, [name, streamEndpoint, updateAgentState, cleanup]);

  useEffect(() => {
    return () => {
      cleanup();
      resetAgentState();
    };
  }, [resetAgentState, cleanup]);

  return {
    render: renderDynamicUI,
    needsApproval,
    setNeedsApproval,
    pendingAction,
    setPendingAction,
    executeAction,
    renderDynamicUI,
    status: currentState.status,
    state: currentState.state,
    streamState: {
      intermediateResults: [],
      currentStep: currentState.metadata?.step || '',
      confidence: currentState.metadata?.confidence || 0
    }
  };
}

================
File: hooks/useCoAgentStateRenderOld.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useCallback, useEffect, useState, useRef } from 'react';
import type { CoAgentState, ActionContext } from '@/app/types/agent';

interface RenderState {
  status: string;
  state: Record<string, unknown>;
  metadata?: Record<string, unknown>;
}

interface CopilotKitEvent extends CustomEvent {
  detail: {
    agentName: string;
    type: string;
    data: Record<string, unknown>;
    metadata?: Record<string, unknown>;
  };
}

interface UseCoAgentStateRenderOptions {
  name: string;
  streamEndpoint: string;
  render: (state: RenderState) => React.ReactNode;
}

export function useCoAgentStateRender({
  name,
  streamEndpoint,
  render,
}: UseCoAgentStateRenderOptions): CoAgentState {
  const [currentState, setCurrentState] = useState<RenderState | null>(null);
  const [needsApproval, setNeedsApproval] = useState(false);
  const [pendingAction, setPendingAction] = useState<string | null>(null);
  const [intermediateResults, setIntermediateResults] = useState<Record<string, unknown>[]>([]);
  const eventSourceRef = useRef<EventSource | null>(null);

  useEffect(() => {
    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }
    };
  }, []);

  const executeAction = useCallback(async (action: ActionContext, context: ActionContext): Promise<void> => {
    try {
      console.log('Executing action:', action);
      console.log('Context:', context);
      
      // Update state to thinking when processing a message
      if (action.type === 'processMessage') {
        setCurrentState(prev => ({
          status: 'thinking',
          state: prev?.state || {},
          metadata: {
            step: 'Processing user message...',
            confidence: 0.5
          }
        }));
      }

      // Close existing EventSource if any
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }

      // Create new EventSource with proper configuration
      const response = await fetch(streamEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'text/event-stream',
        },
        body: JSON.stringify({
          agent_name: name,
          action: action.type,
          context: context.payload,
          stream: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      if (!response.body) {
        throw new Error('No response body available');
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      const buffer = '';

      await new Promise<void>((resolve, reject) => {
        const processStream = async () => {
          try {
            while (true) {
              const { done, value } = await reader.read();
              if (done) break;

              const text = decoder.decode(value, { stream: true });
              const lines = text.split('\n');

              for (const line of lines) {
                if (line.trim() === '') continue;
                if (line.startsWith('data: ')) {
                  try {
                    const data = JSON.parse(line.slice(6));
                    console.log('Stream data:', data);
                    
                    setCurrentState(prevState => ({
                      status: data.type || prevState?.status || 'idle',
                      state: data.data || prevState?.state || {},
                      metadata: {
                        ...prevState?.metadata,
                        ...data.metadata,
                        step: data.metadata?.step || 'Processing...',
                        confidence: data.metadata?.confidence || 0.5
                      }
                    }));
                    
                    setIntermediateResults(prev => [...prev, data]);

                    // Dispatch event for other components
                    const customEvent = new CustomEvent('copilotkit:state', {
                      detail: {
                        agentName: name,
                        type: data.type,
                        data: data.data,
                        metadata: data.metadata
                      }
                    });
                    window.dispatchEvent(customEvent);

                    if (data.type === 'complete') {
                      resolve();
                      return;
                    }
                  } catch (e) {
                    console.error('Error parsing stream data:', e);
                  }
                }
              }
            }
            resolve();
          } catch (error) {
            reject(error);
          }
        };

        processStream().catch(reject);
      });

    } catch (error) {
      console.error('Error executing action:', error);
      setCurrentState(prev => ({
        status: 'error',
        state: prev?.state || {},
        metadata: {
          step: 'Error occurred',
          confidence: 0,
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      }));
      throw error;
    }
  }, [name, streamEndpoint]);

  const renderDynamicUI = useCallback(() => {
    if (!currentState) return null;
    return render(currentState);
  }, [currentState, render]);

  // Listen for state updates from Copilotkit
  useEffect(() => {
    const handleStateUpdate = (event: CopilotKitEvent) => {
      if (event.detail.agentName === name) {
        console.log('Received state update:', event.detail);
        setCurrentState({
          status: event.detail.type,
          state: event.detail.data,
          metadata: event.detail.metadata
        });
        setIntermediateResults(prev => [...prev, event.detail]);
      }
    };

    window.addEventListener('copilotkit:state', handleStateUpdate as EventListener);
    return () => window.removeEventListener('copilotkit:state', handleStateUpdate as EventListener);
  }, [name]);

  return {
    render: renderDynamicUI,
    needsApproval,
    setNeedsApproval,
    pendingAction,
    setPendingAction,
    executeAction,
    renderDynamicUI,
    status: currentState?.status || 'idle',
    state: currentState?.state || null,
    streamState: {
      intermediateResults,
      currentStep: currentState?.metadata?.step as string || '',
      confidence: currentState?.metadata?.confidence as number || 0
    }
  };
}

================
File: hooks/useCopilotActions.ts
================
// hooks/useCopilotActions.ts
import { useCallback } from 'react';
import { useCopilotAction } from '@copilotkit/react-core';
import { useToast } from "@/hooks/use-toast";

export const useCopilotActions = (sendMessage?: (content: string) => void) => {
  const { toast } = useToast();

  const sendJokeMessageHandler = useCallback(
    async ({ message }: { message: string }) => {
      toast({
        title: "AI Action Success",
        description: "The AI action was successful.",
        variant: "default",
        duration: 2000,
      });
      sendMessage?.(message);
    },
    [sendMessage, toast]
  );

  const clearChatHandler = useCallback(async () => {
    toast({
      title: "AI Action Success",
      description: "The AI action was successful.",
      variant: "default",
      duration: 2000,
    });
    return "Chat cleared successfully";
  }, [toast]);

  useCopilotAction({
    name: "sendJokeMessage",
    description: "Send a clever joke to the chat",
    parameters: [
      {
        name: "message",
        type: "string",
        description: "The message to send",
      },
    ],
    handler: sendJokeMessageHandler,
  });

  useCopilotAction({
    name: "clearChat",
    description: "Clear all chat messages",
    parameters: [],
    handler: clearChatHandler,
  });

  return { sendJokeMessageHandler, clearChatHandler };
};

================
File: hooks/useCopilotChatSuggestions.ts
================
// hooks/useCopilotChatSuggestions.ts

import { useCopilotChatSuggestions } from "@copilotkit/react-ui"; 
 
export function CopilotChatSuggestions() {

  useCopilotChatSuggestions(
    {
      instructions: "Suggest the most relevant next actions.",
      minSuggestions: 2,
      maxSuggestions: 5,
    },
    [],
  );
}

================
File: hooks/useCopilotReadableState.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// hooks/useCopilotReadableState.ts
import { useCopilotReadable } from '@copilotkit/react-core';
import { useContext, useMemo } from 'react';
import { InteleosContext } from '@/app/contexts/InteleosContext';
import { ExtendedCopilotContextParams } from '@/app/types/copilot';
// import { createReadableConfigs } from '@/app/configs/copilotReadableConfigs';

interface CopilotReadableOptions {
  description: string;
  value: any;
  categories?: string[];
}

export const useCopilotReadableState = (
  options: {
    chatState?: {
      visibleMessages: any[];
      isLoading: boolean;
    };
    appState?: any;
    additionalConfigs?: CopilotReadableOptions[];
  } = {}
) => {
  const contextValues = useContext(InteleosContext) as ExtendedCopilotContextParams;

  // Document Context
  useCopilotReadable({
    description: 'Inteleos company information and CX data',
    value: contextValues.addDocumentContext,
    categories: ['documentContext'],
  });

  // Chat Messages
  useCopilotReadable({
    description: "Chat UI State",
    value: {
      messages: options.chatState?.visibleMessages || [],
    },
    categories: ['chatState'],
  });

  // Chat Loading
  useCopilotReadable({
    description: "Chat UI Loading State",
    value: {
      isLoading: options.chatState?.isLoading || false,
    },
    categories: ['chatState'],
  });

  // User Info
  useCopilotReadable({
    description: 'Current user information',
    value: options.appState?.user || null,
    categories: ['userState'],
  });

  // App State
  useCopilotReadable({
    description: 'Application state',
    value: options.appState || null,
    categories: ['appState'],
  });

  // Additional Config 1
  useCopilotReadable({
    description: options.additionalConfigs?.[0]?.description || 'Additional Config 1',
    value: options.additionalConfigs?.[0]?.value || null,
    categories: options.additionalConfigs?.[0]?.categories || [],
  });

  // Additional Config 2
  useCopilotReadable({
    description: options.additionalConfigs?.[1]?.description || 'Additional Config 2',
    value: options.additionalConfigs?.[1]?.value || null,
    categories: options.additionalConfigs?.[1]?.categories || [],
  });

  // Additional Config 3
  useCopilotReadable({
    description: options.additionalConfigs?.[2]?.description || 'Additional Config 3',
    value: options.additionalConfigs?.[2]?.value || null,
    categories: options.additionalConfigs?.[2]?.categories || [],
  });

  // Context Config 1
  useCopilotReadable({
    description: 'Context Config 1',
    value: contextValues || null,
    categories: ['contextConfig'],
  });

  // Memoize the configs for return value
  const allConfigs = useMemo(() => [
    {
      description: 'Inteleos company information and CX data',
      value: contextValues.addDocumentContext,
      categories: ['documentContext'],
    },
    {
      description: "Chat UI State",
      value: {
        messages: options.chatState?.visibleMessages || [],
      },
      categories: ['chatState'],
    },
    {
      description: "Chat UI Loading State",
      value: {
        isLoading: options.chatState?.isLoading || false,
      },
      categories: ['chatState'],
    },
    {
      description: 'Current user information',
      value: options.appState?.user || null,
      categories: ['userState'],
    },
    {
      description: 'Application state',
      value: options.appState || null,
      categories: ['appState'],
    },
    ...(options.additionalConfigs || []).slice(0, 3),
    {
      description: 'Context Config 1',
      value: contextValues || null,
      categories: ['contextConfig'],
    },
  ].filter(config => config.value !== null), [
    contextValues,
    options.chatState?.visibleMessages,
    options.chatState?.isLoading,
    options.appState,
    options.additionalConfigs,
  ]);

  return { configs: allConfigs };
};

================
File: hooks/useGenerateChartAction.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// import { useMemo } from 'react';
import { useCopilotAction, ActionRenderProps } from '@copilotkit/react-core';
import { Parameter } from '@copilotkit/shared';

interface ChartData {
  title: string;
  type: 'line' | 'bar' | 'pie';
  data: {
    labels: string[];
    datasets: Array<{
      label: string;
      data: number[];
    }>;
  };
}

type ChartParameters = [
  {
    name: 'data';
    type: 'object';
    description: 'Chart data including title, type and datasets';
    attributes: [
      { name: 'title'; type: 'string'; description: 'Chart title' },
      { name: 'type'; type: 'string'; description: 'Chart type (line, bar, or pie)' },
      { name: 'data'; type: 'object'; description: 'Chart datasets' }
    ];
  }
];

export function useGenerateChartAction() {
  return useCopilotAction({
    name: 'generateChart',
    description: 'Generate a chart visualization',
    parameters: [
      {
        name: 'data',
        type: 'object',
        description: 'Chart data including title, type and datasets',
        attributes: [
          { name: 'title', type: 'string', description: 'Chart title' },
          { name: 'type', type: 'string', description: 'Chart type (line, bar, or pie)' },
          { name: 'data', type: 'object', description: 'Chart datasets' }
        ]
      }
    ] as Parameter[],
    handler: async (args: { [x: string]: string | number | boolean | object | any[] }) => {
      // Handler implementation
      if ('data' in args) {
        return args.data as ChartData;
      }
      throw new Error('Invalid arguments');
    },
    render: (props: ActionRenderProps<ChartParameters>) => {
      if (props.status === 'complete' && props.args?.data) {
        return (
          <div key="chart-complete">
            <div>
              <p className="text-green-500 text-center text-lg font-bold border-2 border-green-500 p-2 rounded-md m-2 bg-green-500/20">
                Chart generated successfully!
              </p>
            </div>
            <div className="chart-container">
              {/* Chart rendering component would go here */}
              <h3>{props.args.data.title}</h3>
            </div>
          </div>
        ) as React.ReactElement;
      }
      return "" as const;
    }
  });
}

================
File: hooks/useGeneratePresentationAction.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// /hooks/useGeneratePresentationAction.ts

import { useCopilotAction } from '@copilotkit/react-core'; // Replace with the actual path
import pptxgen from 'pptxgenjs'; // Ensure pptxgenjs is installed: npm install pptxgenjs
import { SlidePreviewCarousel } from '../app/copilot/SlidePreviewCarousel'; // Replace with the actual path
import logger from '../app/utils/logger'; // Replace with your logging utility

// Define the structure of a single slide
type SlideData = {
    title: string;
    content: string[];
  };
  
  // Define the structure of the entire presentation data
  type PresentationData = {
    title: string;
    slides: SlideData[];
  };
  
  // Define the hook
  export const useGeneratePresentationAction = (
    slides: SlideData[],
    currentSlide: number,
    direction: number,
    nextSlide: () => void,
    prevSlide: () => void
  ) => {
    const action = useCopilotAction(
      {
        name: "generatePresentation",
        description: "Generate a PowerPoint presentation based on provided data",
        parameters: [
          {
            name: "data",
            type: "object",
            description: "Presentation data including title and slides",
            attributes: [
              {
                name: "title",
                type: "string",
                description: "Presentation title",
              },
              {
                name: "slides",
                type: "object[]",
                description: "Array of slide objects",
                attributes: [
                  {
                    name: "title",
                    type: "string",
                    description: "Slide title",
                  },
                  {
                    name: "content",
                    type: "string[]",
                    description: "Slide content as array of strings",
                  },
                ],
              },
            ],
          },
          {
            name: "filename",
            type: "string",
            description: "Name of the file to be generated",
          },
        ],
        handler: async ({ data, filename }: { data: PresentationData; filename: string }) => {
          logger.info("Generating presentation");
          try {
            const pres = new pptxgen();
            pres.layout = 'LAYOUT_WIDE';
  
            // Add title slide
            const titleSlide = pres.addSlide();
            titleSlide.addText(data.title, {
              x: 1,
              y: 1,
              w: '80%',
              h: 1,
              fontSize: 44,
              bold: true,
              align: 'center',
            });
  
            // Add each slide
            data.slides.forEach((slide) => {
              const newSlide = pres.addSlide();
              newSlide.addText(slide.title, {
                x: 0.5,
                y: 0.5,
                w: '90%',
                h: 1,
                fontSize: 32,
                bold: true,
              });
              slide.content.forEach((content, index) => {
                newSlide.addText(content, {
                  x: 0.5,
                  y: 1.5 + index * 0.5,
                  w: '90%',
                  h: 0.5,
                  fontSize: 18,
                });
              });
            });
  
            // Generate and save the presentation file
            await pres.writeFile({ fileName: `${filename}.pptx` });
            logger.info("Presentation generated successfully");
            return "Presentation generated successfully!";
          } catch (error) {
            logger.error("Error generating presentation:", error);
            throw new Error("Failed to generate presentation");
          }
        },
        render: ({ status, args }) => {
          if (status === "complete") {
            return (
              <div key="presentation-complete">
                <div>
                  <p className="text-green-500 text-center text-lg font-bold border-2 border-green-500 p-2 rounded-md m-2 bg-green-500/20">
                    Presentation generated successfully!
                  </p>
                </div>
                <SlidePreviewCarousel
                  slides={args.data.slides.map(slide => ({
                    ...slide,
                    content: slide.content.join(' ')
                  }))}
                  backgroundImageUrl={'/images/APCA_transparent.png'}
                />
              </div>
            ) as React.ReactElement;
          }
          return "" as const;
        },
      },
      [] // Empty dependencies array ensures the action is only created once
    );
  
    return action;
  };

================
File: hooks/useGenerateSpreadsheetAction.ts
================
import { useCopilotAction } from "@copilotkit/react-core";
import * as XLSX from 'xlsx';
import logger from '@/app/utils/logger';
import { SpreadsheetData } from '@/app/types/copilot';
// /hooks/useGenerateSpreadsheetAction.ts
export const useGenerateSpreadsheetAction = () => {
    // Move hook to top level
    const action = useCopilotAction({
      name: "generateSpreadsheet",
      description: "Generate an Excel spreadsheet based on provided data",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Spreadsheet data including headers and rows",
          attributes: [
            { name: "headers", type: "string[]", description: "Column headers" },
            { name: "rows", type: "object[]", description: "Data rows" },
          ],
        },
        {
          name: "filename",
          type: "string",
          description: "Name of the file to be generated",
        },
      ],
      handler: async ({ data, filename }: { data: SpreadsheetData; filename: string }) => {
        logger.info("Generating spreadsheet");
        try {
          if (!Array.isArray(data.rows) || data.rows.length === 0) {
            throw new Error("Invalid or empty data rows");
          }
          const worksheet = XLSX.utils.aoa_to_sheet([data.headers, ...data.rows]);
          const workbook = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
          XLSX.writeFile(workbook, `${filename}.xlsx`);   

          return "Spreadsheet generated successfully!";
        } catch (error) {
          logger.error("Error generating spreadsheet:", error);
          throw new Error("Failed to generate spreadsheet: " + (error instanceof Error ? error.message : String(error)));
        }
      },
      render: ({ status }: { status: string }) => {
        if (status === "inProgress") return "Preparing to generate spreadsheet...";
        if (status === "executing") return "Generating spreadsheet...";
        if (status === "complete") return "Spreadsheet generated successfully!";
        return "";
      },
    });
  
    return action;
  };

================
File: hooks/useMakeCopilotReadable.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
// /hooks/useMakeCopilotReadable.ts
// import { CopilotReadableOptions } from '@/app/types/copilot';
import { useCopilotReadable } from '@copilotkit/react-core';
import logger from '@/app/utils/logger';
import { CopilotReadableError } from '@/app/utils/error-classes/errorClasses';
import { useContext, useEffect } from 'react';
// import { CopilotFeaturesContext } from '@/app/contexts/CopilotFeaturesContext';
import { InteleosContext } from '@/app/contexts/InteleosContext';
import { createReadableConfigs } from '@/app/configs/copilotReadableConfigs';
import { ExtendedCopilotContextParams } from '@/app/types/copilot';
import useAppendSlide from '@/app/copilot/useAppendSlide';
import { Presentation } from '@/app/copilot/Presentation';
import { Header } from '@/app/copilot/HeaderPPTGen';
import { SlideNumberIndicator } from '@/app/copilot/SlideNumberIndicator';
import { GenerateSlideButton } from '@/app/copilot/GenerateSlideButton';
import { DeleteSlideButton } from '@/app/copilot/DeleteSlideButton';
import { NavButton } from '@/app/copilot/NavButton';
import { PerformResearchSwitch } from '@/app/copilot/PerformResearchSwitch';
import { AddSlideButton } from '@/app/copilot/AddSlideButton';
import { SpeakCurrentSlideButton } from '@/app/copilot/SpeakCurrentSlideButton';
import { SlidePreview } from '@/app/copilot/SlidePreview';
import { SlidePreviewCarousel } from '@/app/copilot/SlidePreviewCarousel';
import { useSlideTransition } from '@/hooks/useSlideTransition';
// import { PowerPointActions } from '@/app/copilot/PowerPointActions';
import { usePowerPointState } from '@/hooks/usePowerPointState';
import useCopilotPollAction from '@/app/copilot/useCopilotPollAction';
import PollComponent from '@/app/copilot/PollComponent';
import { useGenerateSpreadsheetAction } from '@/hooks/useGenerateSpreadsheetAction';
import { useGeneratePresentationAction } from '@/hooks/useGeneratePresentationAction';
import useGenerateChartAction from '@/app/copilot/useGenerateChart';
import useUpdateSlide from '@/app/copilot/useUpdateSlide';

export const useMakeCopilotReadable = () => {
  const contextValues = useContext(InteleosContext) as ExtendedCopilotContextParams;
  const { slides, setSlides, addSlide, currentSlide, setCurrentSlide, direction, setDirection, nextSlide, prevSlide, initialSlides } = usePowerPointState();

  // Move useCopilotReadable to the top level
  const copilotReadable = useCopilotReadable({
    description: 'Inteleos company information and CX data',
    value: contextValues.addDocumentContext,
    categories: ['documentContext'],
  }) as unknown as (config: {
    description: string;
    value: any;
    categories: string[];
  }) => void;

  useEffect(() => {
    const myAppState = {
        useAppendSlide: useAppendSlide,
        useUpdateSlide: useUpdateSlide,
        SlidePreview: SlidePreview,
        useGenerateChartAction: useGenerateChartAction,
        useGenerateSpreadsheetAction: useGenerateSpreadsheetAction,
        useGeneratePresentationAction: useGeneratePresentationAction,
        Presentation: Presentation,
        Header: Header,
        SlideNumberIndicator: SlideNumberIndicator,
        GenerateSlideButton: GenerateSlideButton,
        DeleteSlideButton: DeleteSlideButton,
        NavButton: NavButton,
        PerformResearchSwitch: PerformResearchSwitch,
        AddSlideButton: AddSlideButton,
        SpeakCurrentSlideButton: SpeakCurrentSlideButton,
        SlidePreviewCarousel: SlidePreviewCarousel,
        useSlideTransition: useSlideTransition,
        slides: slides,
        setSlides: setSlides,
        addSlide: addSlide,
        currentSlide: currentSlide,
        setCurrentSlide: setCurrentSlide,
        direction: direction,
        setDirection: setDirection,
        nextSlide: nextSlide,
        prevSlide: prevSlide,
        initialSlides: initialSlides,
        pollAction: useCopilotPollAction,
        pollComponent: PollComponent,
        useCopilotPollAction: useCopilotPollAction,
    };

    const readableConfigs = createReadableConfigs(contextValues, myAppState);

    // Process all configurations
    readableConfigs.forEach(config => {
      try {
        if (typeof copilotReadable === 'function') {
          copilotReadable({
            description: config.description,
            value: config.value,
            categories: config.categories,
          });
        } else {
          logger.error('copilotReadable is not a function');
        }
      } catch (error) {
        logger.error(
          new CopilotReadableError(`Failed to make ${config.description} readable`)
        );
        logger.error(error instanceof Error ? error.message : String(error));
      }
    });
  }, [contextValues, copilotReadable, slides, setSlides, addSlide, currentSlide, setCurrentSlide, direction, setDirection, nextSlide, prevSlide, initialSlides]);
};

// Alternative approach using multiple useCopilotReadable calls
export const useMakeCopilotReadable2 = () => {
  const contextValues = useContext(InteleosContext) as ExtendedCopilotContextParams;
  
  // Separate hook calls for each configuration
  const documentReadable = useCopilotReadable({
    description: "Inteleos company information and CX data",
    value: contextValues.addDocumentContext,
    categories: ['documentContext'],
  });

  const appContextReadable = useCopilotReadable({
    description: "Application context information and tools",
    value: {
      sendEmail: contextValues.sendEmail,
      useAppendSlide: contextValues.useAppendSlide,
      useUpdateSlide: contextValues.useUpdateSlide,
      SlidePreview: SlidePreview,
      useGenerateChartAction: contextValues.useGenerateChartAction,
      useGenerateSpreadsheetAction: contextValues.useGenerateSpreadsheetAction,
      useGeneratePresentationAction: contextValues.useGeneratePresentationAction,
      Presentation: Presentation,
      Header: Header,
      SlideNumberIndicator: SlideNumberIndicator,
      GenerateSlideButton: GenerateSlideButton,
      DeleteSlideButton: DeleteSlideButton,
      NavButton: NavButton,
      PerformResearchSwitch: PerformResearchSwitch,
      AddSlideButton: AddSlideButton,
      SpeakCurrentSlideButton: SpeakCurrentSlideButton,
      SlidePreviewCarousel: SlidePreviewCarousel,
      useSlideTransition: useSlideTransition,
      slides: contextValues.slides,
      setSlides: contextValues.setSlides,
      addSlide: contextValues.addSlide,
      currentSlide: contextValues.currentSlide,
      setCurrentSlide: contextValues.setCurrentSlide,
      direction: contextValues.direction,
      setDirection: contextValues.setDirection,
      nextSlide: contextValues.nextSlide,
      prevSlide: contextValues.prevSlide,
      initialSlides: contextValues.initialSlides,
      pollAction: contextValues.pollAction,
      pollComponent: contextValues.pollComponent,
      useCopilotPollAction: contextValues.useCopilotPollAction,
    },
    categories: ['appContext'],
  });

  useEffect(() => {
    // Handle any side effects if needed
    if (documentReadable && (documentReadable as any).error) {
      logger.error(new CopilotReadableError("Failed to make document readable"));
    }
    if (appContextReadable && (appContextReadable as any).error) {
      logger.error(new CopilotReadableError("Failed to make app context readable"));
    }
  }, [documentReadable, appContextReadable]);
};

================
File: hooks/usePowerPointState.ts
================
// hooks/usePowerPointState.ts
import { useState, useCallback } from 'react';

export interface Slide {
  title: string;
  content: string;
  spokenNarration?: string;
}

export const usePowerPointState = (initialSlides: Slide[] = []) => {
  const [slides, setSlides] = useState<Slide[]>(initialSlides);
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);

  const currentSlide = slides[currentSlideIndex];

  const addSlide = useCallback((newSlide: Slide) => {
    setSlides(prevSlides => [...prevSlides, newSlide]);
  }, []);

  const updateSlide = useCallback((index: number, updatedSlide: Partial<Slide>) => {
    setSlides(prevSlides => 
      prevSlides.map((slide, i) => i === index ? { ...slide, ...updatedSlide } : slide)
    );
  }, []);

  const deleteSlide = useCallback((index: number) => {
    setSlides(prevSlides => prevSlides.filter((_, i) => i !== index));
    setCurrentSlideIndex(prevIndex => Math.min(prevIndex, slides.length - 2));
  }, [slides.length]);

  const nextSlide = useCallback(() => {
    setCurrentSlideIndex(prevIndex => (prevIndex + 1) % slides.length);
  }, [slides.length]);

  const prevSlide = useCallback(() => {
    setCurrentSlideIndex(prevIndex => (prevIndex - 1 + slides.length) % slides.length);
  }, [slides.length]);

  const setCurrentSlide = useCallback((index: number) => {
    setCurrentSlideIndex(index);
  }, []);

  const setDirection = useCallback((direction: number) => {
    setDirection(direction);
  }, []);

  const direction = 0;

  return {
    slides,
    setSlides,
    initialSlides,
    currentSlideIndex,
    currentSlide,
    addSlide,
    updateSlide,
    deleteSlide,
    nextSlide,
    prevSlide,
    setCurrentSlideIndex,
    setCurrentSlide,
    direction,
    setDirection,
  };
};

================
File: hooks/useRealTimeActions.ts
================
// app/hooks/useRealtimeActions.ts
import { useCallback, useContext } from 'react';
import { InteleosSharedStateContext } from '@/app/contexts/InteleosContext';
import { ActionContext, ActionResult } from '@/app/types/agent';
import { useExecuteAction } from '@/app/services/actionService';

export const useRealtimeActions = () => {
  const { sharedState, updateState } = useContext(InteleosSharedStateContext);
  const executeAction = useExecuteAction();

  const handleRealtimeAction = useCallback(async (
    action: string,
    context: ActionContext
  ): Promise<ActionResult> => {
    const timestamp = new Date().toISOString();

    try {
      // Pre-action state update
      updateState({
        currentAction: action,
        isProcessing: true
      }, { merge: true });

      // Execute the action
      const result = await executeAction(action, context.payload as Record<string, unknown>);

      // Post-action state update
      updateState({
        lastAction: {
          success: true,
          data: result,
          timestamp
        },
        currentAction: undefined,
        isProcessing: false
      }, { merge: true });

      return {
        success: true,
        data: result,
        timestamp
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      
      // Error state update
      updateState({
        lastError: {
          action,
          error: errorMessage,
          timestamp
        },
        currentAction: undefined,
        isProcessing: false
      }, { merge: true });

      return {
        success: false,
        error: errorMessage,
        timestamp
      };
    }
  }, [executeAction, updateState]);

  return {
    handleRealtimeAction,
    isProcessing: sharedState.isProcessing
  };
};

================
File: hooks/useSlideTransition.ts
================
// /app/hooks/useSlideTransition.ts

import { useState, useCallback } from 'react';
import { SlideData } from '@/app/types/copilot';

export const useSlideTransition = (initialSlides: SlideData[] = []) => {
  const [slides, setSlides] = useState<SlideData[]>(initialSlides);
  const [currentSlide, setCurrentSlide] = useState(0);
  const [direction, setDirection] = useState(0);

  const nextSlide = useCallback(() => {
    setDirection(1);
    setCurrentSlide((prev) => (prev + 1) % slides.length);
  }, [slides.length]);

  const prevSlide = useCallback(() => {
    setDirection(-1);
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
  }, [slides.length]);

  const addSlide = useCallback((newSlide: SlideData) => {
    setSlides((prevSlides) => [...prevSlides, newSlide]);
  }, []);

  return { 
    currentSlide, 
    direction, 
    nextSlide, 
    prevSlide, 
    setCurrentSlide, 
    setDirection, 
    slides, 
    setSlides,
    addSlide
  };
};

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: middleware.ts
================
// /middleware.ts

import { NextRequest, NextResponse } from 'next/server';

export function middleware(req: NextRequest) {
  const origin = req.headers.get('origin');
  const allowedOrigins = [
    process.env.NEXT_PUBLIC_FRONTEND_URL,
    'http://localhost:3000',
    //'https://web-dev-461a.up.railway.app',
  ].filter(Boolean);

  if (origin && !allowedOrigins.includes(origin)) {
    return new NextResponse(null, {
      status: 403,
      statusText: 'Forbidden',
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }

  // Allow access for valid origins
  return NextResponse.next();
}

// Next.js specific configuration to tell the middleware which routes to apply on
export const config = {
  matcher: ['/api/:path*'],  // Apply to all API routes
};

================
File: next.config.ts
================
// next.config.ts

/** @type {import('next').NextConfig} */
const nextConfig = {
  async rewrites() {
    return [
      {
        source: '/api/copilotkit/:path*',
        destination: `${process.env.NEXT_PUBLIC_API_URL}/copilotkit_remote/:path*`, // Forward to FastAPI backend's CopilotKit endpoint
      },
    ];
  },
  async headers() {
    return [
      {
        source: '/api/copilotkit/:path*',
        headers: [
          { key: 'Access-Control-Allow-Credentials', value: 'true' },
          { key: 'Access-Control-Allow-Origin', value: process.env.NEXT_PUBLIC_FRONTEND_URL || '*' }, // Restrict to frontend URL
          { key: 'Access-Control-Allow-Methods', value: 'GET,POST,OPTIONS' },
          { key: 'Access-Control-Allow-Headers', value: 'Content-Type, Authorization, X-Requested-With' },
        ],
      },
    ];
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "ai-customer-support",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@copilotkit/react-core": "^1.3.15",
    "@copilotkit/react-textarea": "^1.3.15",
    "@copilotkit/react-ui": "^1.3.15",
    "@copilotkit/runtime": "^1.3.15",
    "@copilotkit/shared": "^1.3.15",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.46.1",
    "chart.js": "^4.4.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.4.0",
    "file-saver": "^2.0.5",
    "framer-motion": "^11.11.17",
    "gsap": "^3.12.5",
    "input-otp": "^1.4.1",
    "jspdf": "^2.5.2",
    "langsmith": "^0.2.11",
    "lucide-react": "^0.460.0",
    "next": "15.0.3",
    "next-themes": "^0.4.3",
    "openai": "^4.72.0",
    "pptxgenjs": "^3.12.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-error-boundary": "^4.1.2",
    "react-hook-form": "^7.53.2",
    "react-i18next": "^15.1.1",
    "react-icons": "^5.3.0",
    "react-intersection-observer": "^9.13.1",
    "react-resizable-panels": "^2.1.7",
    "react-swipeable": "^7.0.2",
    "react-window": "^1.8.10",
    "recharts": "^2.13.3",
    "sonner": "^1.7.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "utilities": "^1.0.6",
    "vaul": "^1.1.1",
    "xlsx": "^0.18.5",
    "zod": "^3.23.8",
    "zustand": "^5.0.1"
  },
  "devDependencies": {
    "@types/file-saver": "^2.0.7",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-window": "^1.8.8",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

```
ai-customer-support
├─ .eslintrc.json
├─ .git
│  ├─ COMMIT_EDITMSG
│  ├─ config
│  ├─ description
│  ├─ FETCH_HEAD
│  ├─ HEAD
│  ├─ hooks
│  │  ├─ applypatch-msg.sample
│  │  ├─ commit-msg.sample
│  │  ├─ fsmonitor-watchman.sample
│  │  ├─ post-update.sample
│  │  ├─ pre-applypatch.sample
│  │  ├─ pre-commit.sample
│  │  ├─ pre-merge-commit.sample
│  │  ├─ pre-push.sample
│  │  ├─ pre-rebase.sample
│  │  ├─ pre-receive.sample
│  │  ├─ prepare-commit-msg.sample
│  │  ├─ push-to-checkout.sample
│  │  ├─ sendemail-validate.sample
│  │  └─ update.sample
│  ├─ index
│  ├─ info
│  │  └─ exclude
│  ├─ logs
│  │  ├─ HEAD
│  │  └─ refs
│  │     ├─ heads
│  │     │  ├─ dev
│  │     │  └─ main
│  │     └─ remotes
│  │        └─ origin
│  │           ├─ dev
│  │           └─ main
│  ├─ objects
│  │  ├─ 00
│  │  │  ├─ 4145cddf3f9db91b57b9cb596683c8eb420862
│  │  │  └─ a4cc42ba077766285eedf0bca3cc8dd792819e
│  │  ├─ 01
│  │  │  ├─ 956b3b5fb9f121148656f136bb08017f7cc93c
│  │  │  ├─ b8b6d4f716ff7c26065bc9e46aebd932729fc1
│  │  │  └─ ff19c7e453295645fa83788d3ffedf6944226a
│  │  ├─ 02
│  │  │  └─ e111d81dd774038ac483c11b5f5a8f8aceb024
│  │  ├─ 03
│  │  │  └─ 40c9bcf6c7325dbdf09c869079e58315c1c305
│  │  ├─ 07
│  │  │  └─ 678489e57d926cd5451e598bbbdad61434ab55
│  │  ├─ 09
│  │  │  └─ 24a0b1f24c62a78d68dce12d75046ebb63ab6c
│  │  ├─ 0a
│  │  │  ├─ 85eda338981b9a2ed35cc243514e103157a443
│  │  │  └─ b3a1735fc279a007320964960bc74e8b5a25b7
│  │  ├─ 0b
│  │  │  └─ 4a48d87fabda1c6e9612172abb56a78e26c14f
│  │  ├─ 0c
│  │  │  ├─ 490efeaf8dc710e02c165b82ad0de2f982dd83
│  │  │  └─ 743dcd3c7cde975ead075ad740768587fbe6af
│  │  ├─ 0e
│  │  │  └─ 206142b5d89a1382f05ec1d552a709cb6505b5
│  │  ├─ 0f
│  │  │  ├─ 2b9adcbfe05e5bf43176bcd27717ccf22102f3
│  │  │  ├─ b97eb43a5017263eed27f0ebd5e7c4f86744a7
│  │  │  └─ c4c0e0714c5f1a7032cc71e4846470a487a471
│  │  ├─ 12
│  │  │  ├─ c24a97af71f25f1dc258de76e8d1d404a83373
│  │  │  ├─ ca3e893638ad4480b62d3f548522edc60ba5d7
│  │  │  └─ d81c4a853472948b6dd2e85eff99b5d12fe60b
│  │  ├─ 13
│  │  │  ├─ 1adc904c0c9ca6b39eb2f87f70ba418b790ee1
│  │  │  ├─ 62b8826a5aa4c94cc17fbe1f22cdad10416188
│  │  │  ├─ 81a3a881570795f41c32e5c22cbec6a3a3825b
│  │  │  └─ cbeb44ffa085a46291311a4501d24858fba78e
│  │  ├─ 14
│  │  │  └─ 19f56695be517ec78fe8ad26a6f7da3a7d53b2
│  │  ├─ 17
│  │  │  └─ 1beb46d9c020c1be1ee9cb260b816d0bc2c1dd
│  │  ├─ 18
│  │  │  └─ be8f2c82fc42b0a87e67816ecad48c840f3f9a
│  │  ├─ 19
│  │  │  ├─ 6dd73d6e1b56bae85a9ed0da35d33ffbf620b8
│  │  │  └─ 8b8a4290fede5f1468e5de0115bcf193029512
│  │  ├─ 1a
│  │  │  ├─ 69fd2a450afc3bf47e08b22c149190df0ffdb4
│  │  │  └─ 97cfd99674fede53e034aa801ecd15fa6ae4e7
│  │  ├─ 1b
│  │  │  ├─ 62daacff96dad6584e71cd962051b82957c313
│  │  │  ├─ 8b16faf89c240a955736e67ae454bc62680919
│  │  │  └─ dc1d66ab5752bb8929bbb4ca0daee1df5f30da
│  │  ├─ 1c
│  │  │  └─ 876bbeecabe59b684719afe58e684f34cdecbf
│  │  ├─ 22
│  │  │  └─ ca5c450d4a4575656dc61c15d19b7988d2d512
│  │  ├─ 24
│  │  │  └─ c788c2c44cb058812cdbb97d071439a87af5f0
│  │  ├─ 25
│  │  │  ├─ c3235f9886fed521f4f609f798d81889ce3ad2
│  │  │  └─ e7b474464c9849cef836f5c863be0f38bdaac3
│  │  ├─ 26
│  │  │  └─ eb109120e2ee43feddb68900f353a119976c41
│  │  ├─ 27
│  │  │  └─ cc9d452b81cf9ae3994c72c36831aee5c00d15
│  │  ├─ 2b
│  │  │  └─ 0fe1dfef3b17850bbac040665f514a8ffd0f15
│  │  ├─ 2c
│  │  │  ├─ 51d662ff9d8d09f88f61075b30dc9c2357256e
│  │  │  └─ 7ec57368b6ebe4789472ebbe86d8546784272d
│  │  ├─ 2d
│  │  │  └─ e6988d64d90d4bb33547fbe4448f60b57d3e94
│  │  ├─ 2e
│  │  │  └─ 16637808c2c9d4a86dc66f1751a89be06bc95f
│  │  ├─ 2f
│  │  │  └─ 8dfccc679b658ad8fcfaf225f7d098c0b7c98f
│  │  ├─ 30
│  │  │  ├─ 796be76316106c04b5c8e5b373e3341f7dac4d
│  │  │  ├─ e2960eac1b0e47f09d2c87f5accb655cbb44c6
│  │  │  └─ fc44d90f39c96ca622c9174684dd6bc8534e16
│  │  ├─ 31
│  │  │  └─ 91b30532b12cf7ed3035592993bfe469078e2b
│  │  ├─ 32
│  │  │  └─ 502cb05000052db228a333e7045114eb9b876e
│  │  ├─ 33
│  │  │  └─ b1483840ecdeaff9b69777f1cdfefb9f74a3c9
│  │  ├─ 36
│  │  │  └─ 496a28727a3643b4212a14225d4f6cbd50bda5
│  │  ├─ 37
│  │  │  └─ 224185490e6db2d26a574d66d4d476336bf644
│  │  ├─ 3d
│  │  │  └─ b8590d762d391187ba6efed7f9e0fe8cce8311
│  │  ├─ 3e
│  │  │  └─ 8b7414646b925c4ae5d0a1098ee98503af4de0
│  │  ├─ 3f
│  │  │  ├─ 24824b1e680bfe7585189323d3f2d48fd9a56e
│  │  │  └─ b001768e91fbec1be80aac3bd3816367ac9ac4
│  │  ├─ 41
│  │  │  ├─ 97ec5e1d51a1037da2c5e09530aceafdbeaa05
│  │  │  └─ fa7e0561a3fdb5f986c1213a35e563de740e96
│  │  ├─ 43
│  │  │  ├─ 2a7ae3d4e8517019d0ed1f836c1d5a8f93eb12
│  │  │  ├─ 2edbb04565681a6d922883e7b009e0fd520cff
│  │  │  └─ fa941d290e56128c058e6eca0ecd977412d02b
│  │  ├─ 45
│  │  │  ├─ 2f4d9f0dde88611113632c1d759d60155fe4d3
│  │  │  └─ aa79603f2f5c1db3c1dfc732c631fbff4370a9
│  │  ├─ 48
│  │  │  └─ a8a1f653bf180c02d057216ce6d98279aadfab
│  │  ├─ 4a
│  │  │  └─ d8c3f3a4406ea87d7309ef25fff1a008ce9899
│  │  ├─ 4b
│  │  │  └─ 0d767f431e9b99c87feda3bbf318e3bec3af8b
│  │  ├─ 4d
│  │  │  └─ 858bb6b02662c749d3cb334129a9a1977b0c51
│  │  ├─ 4e
│  │  │  ├─ 4d10c4c938ca665ead873736c34d4e1cd065c9
│  │  │  └─ b3f5ab3e0cb50c646ebbfa2734dd0e5878bc42
│  │  ├─ 51
│  │  │  ├─ 479e8361a21afb7e524a6f20e3f98ea8d67d50
│  │  │  ├─ 74b28c565c285e3e312ec5178be64fbeca8398
│  │  │  └─ e507ba9d08bcdbb1fb630498f1cbdf2bf50093
│  │  ├─ 52
│  │  │  └─ 1b94b07981916e3ee36e8cc28a70b4d9abc728
│  │  ├─ 53
│  │  │  ├─ 4182176bf87f9308355514adc884d2b69750a5
│  │  │  └─ ad179d57b432bebd96dc781bb6fab0ca0c441d
│  │  ├─ 55
│  │  │  └─ 86fa9b21f48d45092fd7e5856a87b5a1a91e22
│  │  ├─ 56
│  │  │  └─ 7f17b0d7c7fb662c16d4357dd74830caf2dccb
│  │  ├─ 57
│  │  │  └─ aaf548ccffc73b420d8cb30f5002b60793b51c
│  │  ├─ 59
│  │  │  └─ a26452940473d58818cb8489bf2b35e8b9b004
│  │  ├─ 5c
│  │  │  └─ 87ea4865610374cdc591d1619157b4d8909a87
│  │  ├─ 5d
│  │  │  └─ f031e733758480d7bdc5b1f2ec8a6ca33e32cc
│  │  ├─ 5e
│  │  │  └─ 00593cb4c0fb274bb1f17db14d38e214a9fddb
│  │  ├─ 5f
│  │  │  └─ af5020c277e64f2e8a2732f4d8325f3e08f20a
│  │  ├─ 60
│  │  │  ├─ 43560a552abeb13314a29b27b964afbd238512
│  │  │  └─ e6c96f72f0350d08b47e4730cab8f3975dc853
│  │  ├─ 61
│  │  │  ├─ 60b95642060d7936e96e87833c3fd756644f73
│  │  │  ├─ c2584e02ac5857123545adab87b757cf550fda
│  │  │  └─ d2b451ef5fd1d9faa1162371628a8132dd51df
│  │  ├─ 63
│  │  │  ├─ 0adb3e98e358eca65fee535bec386ecc24c409
│  │  │  ├─ 56727e9e26ccf46e15f523d2dfb7b61e323c49
│  │  │  └─ e79ef3327ce79e30990ac25edab142336734c6
│  │  ├─ 65
│  │  │  └─ 6d2ca4e0baa2da3ea417a8ac5ad265bfc0837e
│  │  ├─ 66
│  │  │  ├─ 4f59c1c962305ae84b4d72251c97413cf0dd15
│  │  │  └─ e2bfa75123785cc8b86d414a33c47880f6aecd
│  │  ├─ 67
│  │  │  ├─ 1622879c5c28ed7bf621acc86ac155c7fb1bba
│  │  │  └─ b1d481c953786902346b6806be5e24797a9715
│  │  ├─ 68
│  │  │  └─ 551b9276b4164a8263aa58d385db30f81a4453
│  │  ├─ 6a
│  │  │  ├─ 0ef53dde8991d3adeadd791cd262808aaf9ac0
│  │  │  └─ 1ff0b84326e6b8bbe7fd781b1d9c3eaffb4956
│  │  ├─ 6b
│  │  │  ├─ 2dbdec3b935cfe83e305c3edb6142463e5edfe
│  │  │  └─ 717ad346d3dff8914e9545038c799226d59c89
│  │  ├─ 6c
│  │  │  └─ 75d7d4c64838a07b47375df85485db36444d4c
│  │  ├─ 6e
│  │  │  └─ 90a0efddb5f92b68d12aa01b2af0653400122d
│  │  ├─ 6f
│  │  │  ├─ 100494bbd7c82df138853bb1e0fbd0934e0668
│  │  │  ├─ 660c4ab966051c4b82c7817a432e31b527954d
│  │  │  └─ cc4e86de3a88211bf3e9d786a87af4ab2c9905
│  │  ├─ 70
│  │  │  └─ bb5403a2fd0460e0bd0f8050cc0f011201a372
│  │  ├─ 71
│  │  │  └─ 8d6fea4835ec2d246af9800eddb7ffb276240c
│  │  ├─ 73
│  │  │  ├─ 30ada0ba0700c18cb819cd2b9470fb374e3919
│  │  │  └─ ac7ad04b15276f43517112b610cd025329f9fc
│  │  ├─ 75
│  │  │  └─ 867bb417abca139245feeae1aa51b2bc516040
│  │  ├─ 76
│  │  │  ├─ 0997a0202cba79a1455ed5ad7394863e8387d6
│  │  │  └─ 9eda9337c747e2e6ed8d7f447ba80808a151ae
│  │  ├─ 77
│  │  │  └─ 053960334e2e34dc584dea8019925c3b4ccca9
│  │  ├─ 78
│  │  │  └─ 27afa46627c3535f8487afdfcb2b4ae607d959
│  │  ├─ 7a
│  │  │  ├─ 26d1d3768c501606a58ebe9f0033b4c4dd1d4c
│  │  │  ├─ 55a597af808f6ed252bb8e88275641ad2c32a9
│  │  │  └─ 7d24b11f0237800547e68d817eb15e6c0a259a
│  │  ├─ 7c
│  │  │  └─ bff4faf7cf831b7dfe76de24a6e61e9b0edba0
│  │  ├─ 7d
│  │  │  └─ 979f121ac1a98a0f55267ceae0cdecb10bff83
│  │  ├─ 7e
│  │  │  └─ 266cca97a714902853f4810f03cfefe19c296a
│  │  ├─ 7f
│  │  │  ├─ 3502f8b2820be1d6f0aa4c1ffaa351799c1ed3
│  │  │  └─ c3086503e859c2d6024b62ba7d23f74f296d24
│  │  ├─ 82
│  │  │  └─ f633f083909e827fee7db55cb43d2a88e75f5e
│  │  ├─ 85
│  │  │  ├─ 108221db20c562b3f116c25576d72076918720
│  │  │  └─ 3751545b9dd270894ed5fe3dc99609eee903f5
│  │  ├─ 86
│  │  │  ├─ 20baa3b32301ef0e071b13049f2a00caa6f0bc
│  │  │  └─ e3251708474bef0b423b625b11476a13cf55d9
│  │  ├─ 87
│  │  │  ├─ 2695526a628de89db508acbd2a59a2b19c5e32
│  │  │  └─ a6ba7f6b56cefc54f58a14dbb82771dc7e866f
│  │  ├─ 88
│  │  │  └─ f466b68997abeab34eeb4f9d0f9335fd548b1b
│  │  ├─ 89
│  │  │  └─ f4a74a1f8814a646b5bee16416e8ba3b9d6929
│  │  ├─ 8c
│  │  │  └─ a2b7317e4d461e4d51f488182142631f80f686
│  │  ├─ 8f
│  │  │  └─ 9f630e05a3d1c44d920e3a8292514cc190b668
│  │  ├─ 90
│  │  │  ├─ 07252c56852fbbdfe53e803bbdb45645efafa2
│  │  │  └─ 189ec02b2316379838510d8c35453d791c87db
│  │  ├─ 92
│  │  │  ├─ 14ffd908078ed6b5c5ee8c1fac1efa8e9cdd92
│  │  │  └─ d9bb6f7dce8e5947a953017a72b6e55f4ce0a0
│  │  ├─ 93
│  │  │  └─ ef37ba98dcd024a577feac7e4fea21c36add62
│  │  ├─ 94
│  │  │  └─ 459b42379ee6b5f817658bd6be518017a14ac4
│  │  ├─ 95
│  │  │  └─ f622d199d593227c482c5110271c6a2a3b0b68
│  │  ├─ 97
│  │  │  ├─ 355c7a1fe046b646f120e9dd901501e74193ba
│  │  │  └─ 57de0c0be78ac7b66191a601e4fca3e793648c
│  │  ├─ 98
│  │  │  ├─ 680fdd76df6c66e587be7b2f9b8ce681876a82
│  │  │  └─ d9993e9c470713b099f694002d6f370d393789
│  │  ├─ 99
│  │  │  ├─ 0aa20ea486179b7d0c1c1a6ba09c0335e7e855
│  │  │  └─ e01e55f78c0091bb430caeb4830653b69917cc
│  │  ├─ 9a
│  │  │  ├─ 0e41df38b00e0863e960ff53a54297335c3e4f
│  │  │  └─ b4c77ee6127d0303ee70720f0a30309b4a2a7a
│  │  ├─ 9d
│  │  │  ├─ 728384778a21b4abb8b451b7215d40cb768aa7
│  │  │  └─ ac1a70fea72d250115dd4adf41b5e9260aab5d
│  │  ├─ 9f
│  │  │  ├─ 26b1319884fe4cfe0173ea866e0c8805442817
│  │  │  ├─ 425c20326ead556ada0580cd6ac22ea53360fc
│  │  │  └─ a48946afd1eb56bd932377fd888e3986304676
│  │  ├─ a0
│  │  │  └─ ec48beee4e92c55292fcb104680af68d00d365
│  │  ├─ a1
│  │  │  ├─ 14c905547af907b2ac8b025b55f08c82f105ee
│  │  │  └─ b89b5f36b85559bbcfd5eb50d8164e8f2beed4
│  │  ├─ a3
│  │  │  ├─ 6cde01c60b91e16e4c976d00546686e2d4e470
│  │  │  ├─ 7f17ba04055c1c174bd439d58aa3b5b2857cc9
│  │  │  ├─ 8d8cc155c91d19a64ed4713eabc935d1605852
│  │  │  └─ c3736e0744d5381a8898d09a54bb74d7570149
│  │  ├─ a6
│  │  │  ├─ 2206fc0a21517747a3ed6bc2cad44ed18d5c00
│  │  │  └─ 67ca1c73bd8d7b363aa6ed5fd06d69bf24c357
│  │  ├─ a8
│  │  │  └─ 144b69904500d9c864f64c4bd4591a99b4b6ef
│  │  ├─ a9
│  │  │  └─ 2ab7077ce1dd5493e267cc2bfb5d7f974125a9
│  │  ├─ ab
│  │  │  ├─ 8d444effbbf19996b3bd482cf8e877aa5c8c1e
│  │  │  └─ b86228d8dfa06ca1492caad7e1f75d1ccb6ed1
│  │  ├─ ac
│  │  │  └─ 782d259e6393d4e774bfcd66c6f647b13b36be
│  │  ├─ ad
│  │  │  └─ b5e0a65956ad7c0d6eed0bd0c7130830ab8845
│  │  ├─ af
│  │  │  └─ 61fb27a1082960afb271ede7517e99239ef96a
│  │  ├─ b1
│  │  │  ├─ b7cc64c1b0a8b87065edc7820218624e304e8d
│  │  │  └─ b8f7768c9adcc4ffea8aeb99defdcc43d67ed3
│  │  ├─ b2
│  │  │  ├─ 903d9e5367c48700d93a0a337ffcf05ec3db2e
│  │  │  ├─ b2a44f6ebc70c450043c05a002e7a93ba5d651
│  │  │  └─ c7a287615d40bf226c4a3a54893c5d9ac14849
│  │  ├─ b3
│  │  │  └─ 8e1da4fbb0bc85ff3a1019edee2cf82910832b
│  │  ├─ b4
│  │  │  ├─ 950cb8004be2c0e3bd2c6f56704fe73f9d931d
│  │  │  └─ 9b93b1396eb20324c778f62b0e3bb83733ef39
│  │  ├─ b7
│  │  │  └─ fd42aecad42cd299196e41dc4fec349b68870f
│  │  ├─ b8
│  │  │  ├─ 8fda01fb78019239ce42093b2d653504425c1b
│  │  │  ├─ 986e6cfb71aa5e362691bb9ef46ae90f9b33a3
│  │  │  └─ f6cf3a0e376358509ff0037a91b5131a12de93
│  │  ├─ b9
│  │  │  └─ 84e38938f5b088a8b9d6adba8d6728c8be7304
│  │  ├─ ba
│  │  │  ├─ 5611ce2b62193a10b1b88f547aaba9324cd217
│  │  │  └─ 58fb8864df4c632a24d57b4b0b9af5d4fe40a9
│  │  ├─ bb
│  │  │  └─ f3101e03d8766c0d4af7508c9f992f5cfb8730
│  │  ├─ bc
│  │  │  ├─ 62442bc202384b2c8330a8d38e3f4d89e824f6
│  │  │  ├─ 69cf2dbfc512347350c5cea6cb8e4a3d7f667d
│  │  │  ├─ ed06e5bc789e2b6532a723a39c5e5c3fd5c1b3
│  │  │  └─ fb78d532c6c814a1c8026917fe9a5cb0cfeb3f
│  │  ├─ bd
│  │  │  ├─ 0c391ddd1088e9067844c48835bf4abcd61783
│  │  │  └─ c5f1080240371b1549055d598fe678e13bd67b
│  │  ├─ c1
│  │  │  └─ 9bea37315b245ce0c3588deafb27adc8397f0f
│  │  ├─ c2
│  │  │  └─ c7372761bcd7c3170f5e0af53b1916a091db16
│  │  ├─ c3
│  │  │  └─ 1c2b3bc1a9f1677b32250668a6d47fe5a353ce
│  │  ├─ c4
│  │  │  └─ 7105f63fdb9d7b73dcebfd9e50a8f887553a84
│  │  ├─ c8
│  │  │  ├─ 84894fa3244e7012999651b0a8a0d8486f5848
│  │  │  ├─ 8f389de09f418da376598c42e8788d4fb6d172
│  │  │  └─ 931ff88440371716f3d3157c36e7b04090fd0c
│  │  ├─ cb
│  │  │  ├─ 3207808416978c46386370bc453a05988623d7
│  │  │  └─ e5a36b695dda828fa2f17e46fe35970aa6fa78
│  │  ├─ cd
│  │  │  ├─ 71258390c0a99c1b88cd1359392790ecc97387
│  │  │  └─ 9e689fa6cb7d309f1428dbf0fb9a0468bcc46e
│  │  ├─ ce
│  │  │  ├─ 0be3009afb3a37d96ce48bec54587356f90021
│  │  │  └─ 264aef25034feded1285c057c7d11d3d0f1178
│  │  ├─ d3
│  │  │  ├─ 0dcfb490672b349502de51d56bc0109415afbe
│  │  │  ├─ 2cc78b89fc9af2b1caf304864e10f041df05e6
│  │  │  └─ 689f217f61433046cf1fde5d8cf6818f0a7b25
│  │  ├─ d5
│  │  │  ├─ 5b66e312184d6bb89c58becc1711242f4a3be6
│  │  │  └─ ccc64dca98cc57876ba385101ca136a84fe02d
│  │  ├─ d6
│  │  │  ├─ 616e8058341df6f5310bff70a582d46fc1f3bd
│  │  │  ├─ a5226f5e9cc09a2bd1ccbce465524e41f04345
│  │  │  └─ f98ad44203e6bbc5ef43642dfb72c67daac808
│  │  ├─ d8
│  │  │  ├─ 8ffcf79ca3b6199078236613075532087c7249
│  │  │  ├─ b93235f205efbea6e8fceb1c9ddb57ddddf28d
│  │  │  ├─ e1409583ccc9690cb34d75d95a2a54a53809f0
│  │  │  └─ eee5c1f82b7d3b8d227a6e5b76e13edf5c887f
│  │  ├─ d9
│  │  │  ├─ bbbf37fd5e24d8c94a91da22a8562c73eae574
│  │  │  └─ ef0ae537daba0b9fb71e78522e5aa763c4de93
│  │  ├─ da
│  │  │  └─ 41ddbf86d969f26b6902c6eda99eaa22ad2dae
│  │  ├─ dc
│  │  │  └─ 686135092d48c159b0ade043ece0010058130d
│  │  ├─ de
│  │  │  ├─ 8b2d729f59ef3f81de250f615c698051b63064
│  │  │  └─ ff60c8424598d6c321c0a70cba1bb79a1b2fff
│  │  ├─ df
│  │  │  └─ 61a13881538701ff6a10d644d217bfa01b64e6
│  │  ├─ e0
│  │  │  └─ ba832c96e83cf0ce77b47128257ecb37c6bf5f
│  │  ├─ e1
│  │  │  ├─ 5bdc619fb67853c1bc84f38b80f6d7e554edbe
│  │  │  └─ 95624449d3deeed8e37f451319482abdfc2b04
│  │  ├─ e2
│  │  │  └─ 15bc4ccf138bbc38ad58ad57e92135484b3c0f
│  │  ├─ e3
│  │  │  └─ d3fc16f87ca458253f3af9dc3a94fc2d0f6e86
│  │  ├─ e4
│  │  │  └─ e7a5400dfadbb5fba6e153d1c7ec8b82cfff09
│  │  ├─ e5
│  │  │  ├─ 4d91cf81f48462887825698166393764c4251f
│  │  │  └─ e133df0391a96427da0def29bee9f4f4477235
│  │  ├─ e6
│  │  │  └─ d085784cad318f5081198a4a28b0e3c6c8857e
│  │  ├─ e7
│  │  │  ├─ 17540f8434934f9deb5562ab2aa6d1615a4a0b
│  │  │  └─ 2078897a7f5d8a67497b7fd1af1cbce5b004a3
│  │  ├─ e8
│  │  │  └─ b8e02a8bf77ff42c6bbb06fd846c1e8983f310
│  │  ├─ e9
│  │  │  ├─ bde1793628d1d76ab8e5700c2484547e8bbbf2
│  │  │  ├─ e6a3b6ce7d5a0d6de2327ee41cda27485e7999
│  │  │  └─ ffa3083ad279ecf95fd8eae59cb253e9a539c4
│  │  ├─ ea
│  │  │  └─ 40d196dc72673f36c4084bf56457385edc855e
│  │  ├─ ec
│  │  │  ├─ 505d00d95ecdbbc1501d1bfa7020e51d6010a7
│  │  │  ├─ 61defa06eb3f0c98a74609763af64ff8ad2bb7
│  │  │  └─ 7f274aa94e716f8d3bb4bf01ef4d3fce267e6e
│  │  ├─ ee
│  │  │  ├─ b2d7aebcf77d22605587c4055cde9cd351b5ef
│  │  │  └─ f3b208441465376d54e65e0642c93127403692
│  │  ├─ f0
│  │  │  ├─ 00e3ef5176395b067dfc3f3e1256a80c450015
│  │  │  └─ 7806141cfc0f9c62aeff8ec92dacaa3fdc0226
│  │  ├─ f2
│  │  │  ├─ 7961427a6d7f0bedb5625e2013929bb3335f93
│  │  │  └─ ae185cbfd16946a534d819e9eb03924abbcc49
│  │  ├─ f3
│  │  │  ├─ 95d9161ef790154418ac23b7ea0670c6eb3a28
│  │  │  └─ dd20f899f8ade53b7a24be95c02acb7f51b0af
│  │  ├─ f4
│  │  │  └─ bc5586b67f45d3cc35f228e8bac2e4bc2cea16
│  │  ├─ f6
│  │  │  ├─ 2edea578d50058bef5e6bcc178b88d145564e9
│  │  │  └─ 6fcfa0ddbe3b9b7f4773b1d69576aa61f96db8
│  │  ├─ f9
│  │  │  └─ 3153ecbf9d019d3ce7053a73396e00a6256625
│  │  ├─ fa
│  │  │  ├─ 39650a87e1b5d9348bcc5294a1b0ef07317c0e
│  │  │  └─ 5a75987e6cb9e8790cc7a3300468bd0708e677
│  │  ├─ fc
│  │  │  ├─ b741a341df889205f9868e01cdef51cc530ae9
│  │  │  ├─ d92e97a74c0ac43094fe3ce5d866439744e3a7
│  │  │  └─ e17abb52aa67cffe2aa5dfadb4be472d04bc3d
│  │  ├─ info
│  │  └─ pack
│  ├─ ORIG_HEAD
│  └─ refs
│     ├─ heads
│     │  ├─ dev
│     │  └─ main
│     ├─ remotes
│     │  └─ origin
│     │     ├─ dev
│     │     └─ main
│     └─ tags
├─ .gitignore
├─ app
│  ├─ api
│  │  └─ copilotkit
│  │     └─ route.ts
│  ├─ components
│  │  ├─ ai
│  │  │  ├─ CopilotCustomChatUI.tsx
│  │  │  └─ CopilotCustomerSupport.tsx
│  │  ├─ database
│  │  │  └─ SupaDemo.tsx
│  │  └─ errors
│  │     └─ ErrorBoundary.tsx
│  ├─ configs
│  │  └─ copilotReadableConfigs.ts
│  ├─ contexts
│  │  ├─ CopilotFeaturesContext.tsx
│  │  ├─ InteleosContext.tsx
│  │  └─ useAuth.ts
│  ├─ copilot
│  │  ├─ ActionButton.tsx
│  │  ├─ AddSlideButton.tsx
│  │  ├─ AIChatSuggestions.tsx
│  │  ├─ aiPollGenerator.ts
│  │  ├─ components.ts
│  │  ├─ CopilotChatUI.tsx
│  │  ├─ CopilotGenAI.tsx
│  │  ├─ CopilotTextarea.tsx
│  │  ├─ DeleteSlideButton.tsx
│  │  ├─ GenerateSlideButton.tsx
│  │  ├─ HeaderPPTGen.tsx
│  │  ├─ NavButton.tsx
│  │  ├─ PerformResearchSwitch.tsx
│  │  ├─ PollComponent.tsx
│  │  ├─ PowerPointActions.tsx
│  │  ├─ Presentation.tsx
│  │  ├─ sendEmailButton.tsx
│  │  ├─ Slide.tsx
│  │  ├─ SlideNumberIndicator.tsx
│  │  ├─ SlidePreview.tsx
│  │  ├─ SlidePreviewCarousel.tsx
│  │  ├─ SlideThumbnail.tsx
│  │  ├─ SpeakCurrentSlideButton.tsx
│  │  ├─ tavily.ts
│  │  ├─ useAISuggestions.tsx
│  │  ├─ useAppendSlide.tsx
│  │  ├─ useCopilotPollAction.tsx
│  │  ├─ useCopilotReadable.ts
│  │  ├─ useEmailSendingAction.ts
│  │  ├─ useGenerateChart.tsx
│  │  ├─ useResearchAction.ts
│  │  ├─ UserProfile.tsx
│  │  ├─ useScheduleAppointmentAction.ts
│  │  ├─ useSuggestions.tsx
│  │  ├─ useUpdateSlide.tsx
│  │  └─ VirtualizedThumbnails.tsx
│  ├─ favicon.ico
│  ├─ fonts
│  │  ├─ GeistMonoVF.woff
│  │  └─ GeistVF.woff
│  ├─ globals.css
│  ├─ layout.tsx
│  ├─ page.tsx
│  ├─ providers
│  │  └─ CopilotFeaturesProvider.tsx
│  ├─ types
│  │  └─ copilot.ts
│  └─ utils
│     ├─ error-classes
│     │  └─ errorClasses.tsx
│     ├─ globalAudio.tsx
│     ├─ logger.ts
│     └─ supabase
│        ├─ client.ts
│        └─ server.ts
├─ components
│  └─ ui
│     ├─ accordion.tsx
│     ├─ alert-dialog.tsx
│     ├─ alert.tsx
│     ├─ aspect-ratio.tsx
│     ├─ avatar.tsx
│     ├─ badge.tsx
│     ├─ breadcrumb.tsx
│     ├─ button.tsx
│     ├─ calendar.tsx
│     ├─ card.tsx
│     ├─ carousel.tsx
│     ├─ chart.tsx
│     ├─ checkbox.tsx
│     ├─ collapsible.tsx
│     ├─ command.tsx
│     ├─ context-menu.tsx
│     ├─ dialog.tsx
│     ├─ drawer.tsx
│     ├─ dropdown-menu.tsx
│     ├─ form.tsx
│     ├─ hover-card.tsx
│     ├─ input-otp.tsx
│     ├─ input.tsx
│     ├─ label.tsx
│     ├─ menubar.tsx
│     ├─ navigation-menu.tsx
│     ├─ pagination.tsx
│     ├─ popover.tsx
│     ├─ progress.tsx
│     ├─ radio-group.tsx
│     ├─ resizable.tsx
│     ├─ scroll-area.tsx
│     ├─ select.tsx
│     ├─ separator.tsx
│     ├─ sheet.tsx
│     ├─ sidebar.tsx
│     ├─ skeleton.tsx
│     ├─ slider.tsx
│     ├─ sonner.tsx
│     ├─ switch.tsx
│     ├─ table.tsx
│     ├─ tabs.tsx
│     ├─ textarea.tsx
│     ├─ toast.tsx
│     ├─ toaster.tsx
│     ├─ toggle-group.tsx
│     ├─ toggle.tsx
│     └─ tooltip.tsx
├─ components.json
├─ hooks
│  ├─ use-mobile.tsx
│  ├─ use-toast.ts
│  ├─ useCopilotChatSuggestions.ts
│  ├─ useGenerateChartAction.tsx
│  ├─ useGeneratePresentationAction.tsx
│  ├─ useGenerateSpreadsheetAction.ts
│  ├─ useMakeCopilotReadable.ts
│  ├─ usePowerPointState.ts
│  └─ useSlideTransition.ts
├─ lib
│  └─ utils.ts
├─ next.config.ts
├─ package-lock.json
├─ package.json
├─ postcss.config.mjs
├─ public
│  ├─ ai-avatar.png
│  ├─ file.svg
│  ├─ generic-support-avatar.png
│  ├─ globe.svg
│  ├─ next.svg
│  ├─ support-avatar.png
│  ├─ user-avatar.png
│  ├─ vercel.svg
│  └─ window.svg
├─ README.md
├─ tailwind.config.ts
├─ tsconfig
│  └─ base.json
└─ tsconfig.json

```

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";

export default {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			},
  			shimmer: {
  				'0%': {
  					backgroundPosition: '200% 0',
  					opacity: '1'
  				},
  				'100%': {
  					backgroundPosition: '-200% 0',
  					opacity: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out',
  			shimmer: 'shimmer 2s ease-in-out forwards'
  		}
  	}
  },
	  plugins: [animate],
	} satisfies Config;

================
File: tsconfig.json
================
{
  "extends": "./tsconfig/base.json",
  "compilerOptions": {
      "target": "ES2017",
      "lib": [
          "dom",
          "dom.iterable",
          "esnext"
      ],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "preserve",
      "incremental": true,
      "plugins": [
          {
              "name": "next"
          }
      ],
      "baseUrl": ".",
      "paths": {
          "@/*": [
              "./*"
          ]
      }
  },
  "include": [
      "next-env.d.ts",
      "**/*.ts",
      "**/*.tsx",
      ".next/types/**/*.ts"
  ],
  "exclude": [
      "node_modules"
  ]
}

================
File: tsconfig/base.json
================
{
  "compilerOptions": {
      "target": "ES2017",
      "module": "esnext",
      "strict": true,
      "jsx": "react",
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true,
      "baseUrl": ".",
      "paths": {
          "@/*": [
              "../../*"
          ]
      }
  },
  "include": [
      "../../**/*"
  ],
  "exclude": [
      "node_modules"
  ]
}

================
File: tsconfig/react-library.json
================
{
    "name": "ai-customer-support",
    "version": "1.0.0",
    "description": "A React component library",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": ["dist"],
    "scripts": {
      "build": "tsc -p tsconfig.json",
      "clean": "rimraf dist",
      "prepublishOnly": "npm run clean && npm run build"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/yourusername/my-react-library.git"
    },
    "keywords": ["react", "component", "library"],
    "author": "Your Name",
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/yourusername/my-react-library/issues"
    },
    "homepage": "https://github.com/yourusername/my-react-library#readme",
    "peerDependencies": {
      "react": "^18.0.0",
      "react-dom": "^18.0.0"
    },
    "devDependencies": {
      "typescript": "^5.0.0",
      "rimraf": "^5.0.0",
      "@types/react": "^18.0.0",
      "@types/react-dom": "^18.0.0"
    },
    "dependencies": {}
  }
